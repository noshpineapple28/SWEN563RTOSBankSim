
USART SSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003580  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003708  08003708  00004708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003750  08003750  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003750  08003750  00004750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003758  08003758  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003758  08003758  00004758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800375c  0800375c  0000475c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003760  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800376c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800376c  00005104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bad6  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019bd  00000000  00000000  00010b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  000124d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ec  00000000  00000000  00012f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002477c  00000000  00000000  00013704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c46c  00000000  00000000  00037e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e644c  00000000  00000000  000442ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012a738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029e4  00000000  00000000  0012a77c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0012d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080036f0 	.word	0x080036f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080036f0 	.word	0x080036f0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <set_display>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void set_display (uint8_t display_segment, uint8_t value)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	460a      	mov	r2, r1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4613      	mov	r3, r2
 80004c6:	71bb      	strb	r3, [r7, #6]
	uint8_t output[] = {value, display_segment};
 80004c8:	79bb      	ldrb	r3, [r7, #6]
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2120      	movs	r1, #32
 80004d4:	4809      	ldr	r0, [pc, #36]	@ (80004fc <set_display+0x44>)
 80004d6:	f000 fdbf 	bl	8001058 <HAL_GPIO_WritePin>
	HAL_USART_Transmit(&husart1, output, 2, 100);
 80004da:	f107 010c 	add.w	r1, r7, #12
 80004de:	2364      	movs	r3, #100	@ 0x64
 80004e0:	2202      	movs	r2, #2
 80004e2:	4807      	ldr	r0, [pc, #28]	@ (8000500 <set_display+0x48>)
 80004e4:	f002 fe5b 	bl	800319e <HAL_USART_Transmit>
	HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2120      	movs	r1, #32
 80004ec:	4803      	ldr	r0, [pc, #12]	@ (80004fc <set_display+0x44>)
 80004ee:	f000 fdb3 	bl	8001058 <HAL_GPIO_WritePin>
}
 80004f2:	bf00      	nop
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	48000400 	.word	0x48000400
 8000500:	20000028 	.word	0x20000028

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f000 fa99 	bl	8000a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f81b 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 f8c9 	bl	80006a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000516:	f000 f897 	bl	8000648 <MX_USART2_UART_Init>
  MX_USART1_Init();
 800051a:	f000 f867 	bl	80005ec <MX_USART1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t tx[] = {0x03, 0x2f};
 800051e:	f642 7303 	movw	r3, #12035	@ 0x2f03
 8000522:	80bb      	strh	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	set_display((uint8_t) SEGMENT_1, (uint8_t) DISPLAY_8);
 8000524:	2101      	movs	r1, #1
 8000526:	208f      	movs	r0, #143	@ 0x8f
 8000528:	f7ff ffc6 	bl	80004b8 <set_display>
	set_display((uint8_t) SEGMENT_2, (uint8_t) DISPLAY_9);
 800052c:	2119      	movs	r1, #25
 800052e:	204f      	movs	r0, #79	@ 0x4f
 8000530:	f7ff ffc2 	bl	80004b8 <set_display>
	set_display((uint8_t) SEGMENT_3, (uint8_t) DISPLAY_0);
 8000534:	2103      	movs	r1, #3
 8000536:	202f      	movs	r0, #47	@ 0x2f
 8000538:	f7ff ffbe 	bl	80004b8 <set_display>
	set_display((uint8_t) SEGMENT_4, (uint8_t) DISPLAY_1);
 800053c:	219f      	movs	r1, #159	@ 0x9f
 800053e:	201f      	movs	r0, #31
 8000540:	f7ff ffba 	bl	80004b8 <set_display>
	set_display((uint8_t) SEGMENT_1, (uint8_t) DISPLAY_8);
 8000544:	bf00      	nop
 8000546:	e7ed      	b.n	8000524 <main+0x20>

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	@ 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	@ 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 f89d 	bl	8003696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800056e:	f000 fd99 	bl	80010a4 <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f000 f912 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000584:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000596:	230a      	movs	r3, #10
 8000598:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fdd0 	bl	8001150 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005b6:	f000 f8f3 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f998 	bl	8001908 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005de:	f000 f8df 	bl	80007a0 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3758      	adds	r7, #88	@ 0x58
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <MX_USART1_Init+0x54>)
 80005f2:	4a14      	ldr	r2, [pc, #80]	@ (8000644 <MX_USART1_Init+0x58>)
 80005f4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_USART1_Init+0x54>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_USART1_Init+0x54>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000604:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_USART1_Init+0x54>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <MX_USART1_Init+0x54>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX;
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_USART1_Init+0x54>)
 8000612:	2208      	movs	r2, #8
 8000614:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_USART1_Init+0x54>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_USART1_Init+0x54>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_ENABLE;
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MX_USART1_Init+0x54>)
 8000624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000628:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_USART1_Init+0x54>)
 800062c:	f002 fd6d 	bl	800310a <HAL_USART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_Init+0x4e>
  {
    Error_Handler();
 8000636:	f000 f8b3 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000028 	.word	0x20000028
 8000644:	40013800 	.word	0x40013800

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800064e:	4a15      	ldr	r2, [pc, #84]	@ (80006a4 <MX_USART2_UART_Init+0x5c>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067e:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000684:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <MX_USART2_UART_Init+0x58>)
 800068c:	f002 f81c 	bl	80026c8 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000696:	f000 f883 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000078 	.word	0x20000078
 80006a4:	40004400 	.word	0x40004400

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	4b35      	ldr	r3, [pc, #212]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a34      	ldr	r2, [pc, #208]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006c4:	f043 0304 	orr.w	r3, r3, #4
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b32      	ldr	r3, [pc, #200]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0304 	and.w	r3, r3, #4
 80006d2:	613b      	str	r3, [r7, #16]
 80006d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a2e      	ldr	r2, [pc, #184]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a28      	ldr	r2, [pc, #160]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <MX_GPIO_Init+0xec>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <MX_GPIO_Init+0xec>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070a:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <MX_GPIO_Init+0xec>)
 800070c:	f043 0302 	orr.w	r3, r3, #2
 8000710:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_GPIO_Init+0xec>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000716:	f003 0302 	and.w	r3, r3, #2
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000726:	f000 fc97 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LATCH_GPIO_Port, LATCH_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2120      	movs	r1, #32
 800072e:	481a      	ldr	r0, [pc, #104]	@ (8000798 <MX_GPIO_Init+0xf0>)
 8000730:	f000 fc92 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000734:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800073a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	4814      	ldr	r0, [pc, #80]	@ (800079c <MX_GPIO_Init+0xf4>)
 800074c:	f000 fada 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800076a:	f000 facb 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LATCH_Pin */
  GPIO_InitStruct.Pin = LATCH_Pin;
 800076e:	2320      	movs	r3, #32
 8000770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LATCH_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_GPIO_Init+0xf0>)
 8000786:	f000 fabd 	bl	8000d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800078a:	bf00      	nop
 800078c:	3728      	adds	r7, #40	@ 0x28
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	48000400 	.word	0x48000400
 800079c:	48000800 	.word	0x48000800

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b0ac      	sub	sp, #176	@ 0xb0
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2288      	movs	r2, #136	@ 0x88
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f002 ff3e 	bl	8003696 <memset>
  if(husart->Instance==USART1)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a22      	ldr	r2, [pc, #136]	@ (80008a8 <HAL_USART_MspInit+0xb4>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d13c      	bne.n	800089e <HAL_USART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000824:	2301      	movs	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000828:	2300      	movs	r3, #0
 800082a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4618      	mov	r0, r3
 8000832:	f001 fa8d 	bl	8001d50 <HAL_RCCEx_PeriphCLKConfig>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 800083c:	f7ff ffb0 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000840:	4b1a      	ldr	r3, [pc, #104]	@ (80008ac <HAL_USART_MspInit+0xb8>)
 8000842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000844:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <HAL_USART_MspInit+0xb8>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084a:	6613      	str	r3, [r2, #96]	@ 0x60
 800084c:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <HAL_USART_MspInit+0xb8>)
 800084e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <HAL_USART_MspInit+0xb8>)
 800085a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085c:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <HAL_USART_MspInit+0xb8>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000864:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <HAL_USART_MspInit+0xb8>)
 8000866:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000870:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000884:	2303      	movs	r3, #3
 8000886:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800088a:	2307      	movs	r3, #7
 800088c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000890:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000894:	4619      	mov	r1, r3
 8000896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089a:	f000 fa33 	bl	8000d04 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800089e:	bf00      	nop
 80008a0:	37b0      	adds	r7, #176	@ 0xb0
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000

080008b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0ac      	sub	sp, #176	@ 0xb0
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	2288      	movs	r2, #136	@ 0x88
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fee0 	bl	8003696 <memset>
  if(huart->Instance==USART2)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a21      	ldr	r2, [pc, #132]	@ (8000960 <HAL_UART_MspInit+0xb0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d13b      	bne.n	8000958 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4618      	mov	r0, r3
 80008ee:	f001 fa2f 	bl	8001d50 <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f8:	f7ff ff52 	bl	80007a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fc:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_UART_MspInit+0xb4>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000900:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <HAL_UART_MspInit+0xb4>)
 8000902:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000906:	6593      	str	r3, [r2, #88]	@ 0x58
 8000908:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_UART_MspInit+0xb4>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <HAL_UART_MspInit+0xb4>)
 8000916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000918:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <HAL_UART_MspInit+0xb4>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000920:	4b10      	ldr	r3, [pc, #64]	@ (8000964 <HAL_UART_MspInit+0xb4>)
 8000922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800092c:	230c      	movs	r3, #12
 800092e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000944:	2307      	movs	r3, #7
 8000946:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800094e:	4619      	mov	r1, r3
 8000950:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000954:	f000 f9d6 	bl	8000d04 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000958:	bf00      	nop
 800095a:	37b0      	adds	r7, #176	@ 0xb0
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40004400 	.word	0x40004400
 8000964:	40021000 	.word	0x40021000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 f89b 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f0:	f7ff ffea 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	@ (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f002 fe45 	bl	80036a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fd71 	bl	8000504 <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a30:	08003760 	.word	0x08003760
  ldr r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a38:	20000104 	.word	0x20000104

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <HAL_Init+0x3c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a7c <HAL_Init+0x3c>)
 8000a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a54:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a56:	2003      	movs	r0, #3
 8000a58:	f000 f920 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f000 f80f 	bl	8000a80 <HAL_InitTick>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d002      	beq.n	8000a6e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	71fb      	strb	r3, [r7, #7]
 8000a6c:	e001      	b.n	8000a72 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a6e:	f7ff fe9d 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40022000 	.word	0x40022000

08000a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a8c:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <HAL_InitTick+0x6c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d023      	beq.n	8000adc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a94:	4b16      	ldr	r3, [pc, #88]	@ (8000af0 <HAL_InitTick+0x70>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <HAL_InitTick+0x6c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 f91d 	bl	8000cea <HAL_SYSTICK_Config>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d10f      	bne.n	8000ad6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d809      	bhi.n	8000ad0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abc:	2200      	movs	r2, #0
 8000abe:	6879      	ldr	r1, [r7, #4]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f000 f8f5 	bl	8000cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac8:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_InitTick+0x74>)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	6013      	str	r3, [r2, #0]
 8000ace:	e007      	b.n	8000ae0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
 8000ad4:	e004      	b.n	8000ae0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e001      	b.n	8000ae0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000004 	.word	0x20000004

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000100 	.word	0x20000100

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000100 	.word	0x20000100

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff47 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff5c 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffb0 	bl	8000c58 <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e17f      	b.n	8001014 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8171 	beq.w	800100e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d005      	beq.n	8000d44 <HAL_GPIO_Init+0x40>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d130      	bne.n	8000da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	f003 0201 	and.w	r2, r3, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d118      	bne.n	8000de4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	6939      	ldr	r1, [r7, #16]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80ac 	beq.w	800100e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001034 <HAL_GPIO_Init+0x330>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	4a5e      	ldr	r2, [pc, #376]	@ (8001034 <HAL_GPIO_Init+0x330>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8001034 <HAL_GPIO_Init+0x330>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ece:	4a5a      	ldr	r2, [pc, #360]	@ (8001038 <HAL_GPIO_Init+0x334>)
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000ef8:	d025      	beq.n	8000f46 <HAL_GPIO_Init+0x242>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4f      	ldr	r2, [pc, #316]	@ (800103c <HAL_GPIO_Init+0x338>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01f      	beq.n	8000f42 <HAL_GPIO_Init+0x23e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4e      	ldr	r2, [pc, #312]	@ (8001040 <HAL_GPIO_Init+0x33c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0x23a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4d      	ldr	r2, [pc, #308]	@ (8001044 <HAL_GPIO_Init+0x340>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x236>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4c      	ldr	r2, [pc, #304]	@ (8001048 <HAL_GPIO_Init+0x344>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x232>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4b      	ldr	r2, [pc, #300]	@ (800104c <HAL_GPIO_Init+0x348>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x22e>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4a      	ldr	r2, [pc, #296]	@ (8001050 <HAL_GPIO_Init+0x34c>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x22a>
 8000f2a:	2306      	movs	r3, #6
 8000f2c:	e00c      	b.n	8000f48 <HAL_GPIO_Init+0x244>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e00a      	b.n	8000f48 <HAL_GPIO_Init+0x244>
 8000f32:	2305      	movs	r3, #5
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x244>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x244>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x244>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x244>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x244>
 8000f46:	2300      	movs	r3, #0
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f58:	4937      	ldr	r1, [pc, #220]	@ (8001038 <HAL_GPIO_Init+0x334>)
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f66:	4b3b      	ldr	r3, [pc, #236]	@ (8001054 <HAL_GPIO_Init+0x350>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4013      	ands	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f8a:	4a32      	ldr	r2, [pc, #200]	@ (8001054 <HAL_GPIO_Init+0x350>)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f90:	4b30      	ldr	r3, [pc, #192]	@ (8001054 <HAL_GPIO_Init+0x350>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fb4:	4a27      	ldr	r2, [pc, #156]	@ (8001054 <HAL_GPIO_Init+0x350>)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <HAL_GPIO_Init+0x350>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fde:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <HAL_GPIO_Init+0x350>)
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_GPIO_Init+0x350>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001008:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <HAL_GPIO_Init+0x350>)
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa22 f303 	lsr.w	r3, r2, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	f47f ae78 	bne.w	8000d14 <HAL_GPIO_Init+0x10>
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40021000 	.word	0x40021000
 8001038:	40010000 	.word	0x40010000
 800103c:	48000400 	.word	0x48000400
 8001040:	48000800 	.word	0x48000800
 8001044:	48000c00 	.word	0x48000c00
 8001048:	48001000 	.word	0x48001000
 800104c:	48001400 	.word	0x48001400
 8001050:	48001800 	.word	0x48001800
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001074:	e002      	b.n	800107c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40007000 	.word	0x40007000

080010a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010b2:	d130      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b4:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010c0:	d038      	beq.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2232      	movs	r2, #50	@ 0x32
 80010d8:	fb02 f303 	mul.w	r3, r2, r3
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010de:	fba2 2303 	umull	r2, r3, r2, r3
 80010e2:	0c9b      	lsrs	r3, r3, #18
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010e8:	e002      	b.n	80010f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f0:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010fc:	d102      	bne.n	8001104 <HAL_PWREx_ControlVoltageScaling+0x60>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f2      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800110c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001110:	d110      	bne.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e00f      	b.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001116:	4b0b      	ldr	r3, [pc, #44]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800111e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001122:	d007      	beq.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800112c:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001132:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40007000 	.word	0x40007000
 8001148:	20000000 	.word	0x20000000
 800114c:	431bde83 	.word	0x431bde83

08001150 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e3ca      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001162:	4b97      	ldr	r3, [pc, #604]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 030c 	and.w	r3, r3, #12
 800116a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800116c:	4b94      	ldr	r3, [pc, #592]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 80e4 	beq.w	800134c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d007      	beq.n	800119a <HAL_RCC_OscConfig+0x4a>
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b0c      	cmp	r3, #12
 800118e:	f040 808b 	bne.w	80012a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	2b01      	cmp	r3, #1
 8001196:	f040 8087 	bne.w	80012a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800119a:	4b89      	ldr	r3, [pc, #548]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x62>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e3a2      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1a      	ldr	r2, [r3, #32]
 80011b6:	4b82      	ldr	r3, [pc, #520]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d004      	beq.n	80011cc <HAL_RCC_OscConfig+0x7c>
 80011c2:	4b7f      	ldr	r3, [pc, #508]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011ca:	e005      	b.n	80011d8 <HAL_RCC_OscConfig+0x88>
 80011cc:	4b7c      	ldr	r3, [pc, #496]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80011ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011d8:	4293      	cmp	r3, r2
 80011da:	d223      	bcs.n	8001224 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f000 fd55 	bl	8001c90 <RCC_SetFlashLatencyFromMSIRange>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e383      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f0:	4b73      	ldr	r3, [pc, #460]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a72      	ldr	r2, [pc, #456]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b70      	ldr	r3, [pc, #448]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	496d      	ldr	r1, [pc, #436]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120e:	4b6c      	ldr	r3, [pc, #432]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	4968      	ldr	r1, [pc, #416]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
 8001222:	e025      	b.n	8001270 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001224:	4b66      	ldr	r3, [pc, #408]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a65      	ldr	r2, [pc, #404]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800122a:	f043 0308 	orr.w	r3, r3, #8
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b63      	ldr	r3, [pc, #396]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4960      	ldr	r1, [pc, #384]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800123e:	4313      	orrs	r3, r2
 8001240:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001242:	4b5f      	ldr	r3, [pc, #380]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	495b      	ldr	r1, [pc, #364]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fd15 	bl	8001c90 <RCC_SetFlashLatencyFromMSIRange>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e343      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001270:	f000 fc4a 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001274:	4602      	mov	r2, r0
 8001276:	4b52      	ldr	r3, [pc, #328]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	4950      	ldr	r1, [pc, #320]	@ (80013c4 <HAL_RCC_OscConfig+0x274>)
 8001282:	5ccb      	ldrb	r3, [r1, r3]
 8001284:	f003 031f 	and.w	r3, r3, #31
 8001288:	fa22 f303 	lsr.w	r3, r2, r3
 800128c:	4a4e      	ldr	r2, [pc, #312]	@ (80013c8 <HAL_RCC_OscConfig+0x278>)
 800128e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001290:	4b4e      	ldr	r3, [pc, #312]	@ (80013cc <HAL_RCC_OscConfig+0x27c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fbf3 	bl	8000a80 <HAL_InitTick>
 800129a:	4603      	mov	r3, r0
 800129c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d052      	beq.n	800134a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	e327      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d032      	beq.n	8001316 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012b0:	4b43      	ldr	r3, [pc, #268]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a42      	ldr	r2, [pc, #264]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc30 	bl	8000b20 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc2c 	bl	8000b20 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e310      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012d6:	4b3a      	ldr	r3, [pc, #232]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012e2:	4b37      	ldr	r3, [pc, #220]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a36      	ldr	r2, [pc, #216]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b34      	ldr	r3, [pc, #208]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	4931      	ldr	r1, [pc, #196]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001300:	4b2f      	ldr	r3, [pc, #188]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	492c      	ldr	r1, [pc, #176]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001310:	4313      	orrs	r3, r2
 8001312:	604b      	str	r3, [r1, #4]
 8001314:	e01a      	b.n	800134c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001316:	4b2a      	ldr	r3, [pc, #168]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a29      	ldr	r2, [pc, #164]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001322:	f7ff fbfd 	bl	8000b20 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800132a:	f7ff fbf9 	bl	8000b20 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e2dd      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800133c:	4b20      	ldr	r3, [pc, #128]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f0      	bne.n	800132a <HAL_RCC_OscConfig+0x1da>
 8001348:	e000      	b.n	800134c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800134a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d074      	beq.n	8001442 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2b08      	cmp	r3, #8
 800135c:	d005      	beq.n	800136a <HAL_RCC_OscConfig+0x21a>
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	2b0c      	cmp	r3, #12
 8001362:	d10e      	bne.n	8001382 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b15      	ldr	r3, [pc, #84]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d064      	beq.n	8001440 <HAL_RCC_OscConfig+0x2f0>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d160      	bne.n	8001440 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e2ba      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x24a>
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0b      	ldr	r2, [pc, #44]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e026      	b.n	80013e8 <HAL_RCC_OscConfig+0x298>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013a2:	d115      	bne.n	80013d0 <HAL_RCC_OscConfig+0x280>
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a05      	ldr	r2, [pc, #20]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80013aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a02      	ldr	r2, [pc, #8]	@ (80013c0 <HAL_RCC_OscConfig+0x270>)
 80013b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	e014      	b.n	80013e8 <HAL_RCC_OscConfig+0x298>
 80013be:	bf00      	nop
 80013c0:	40021000 	.word	0x40021000
 80013c4:	08003708 	.word	0x08003708
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004
 80013d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a9f      	ldr	r2, [pc, #636]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80013d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b9d      	ldr	r3, [pc, #628]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a9c      	ldr	r2, [pc, #624]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fb96 	bl	8000b20 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fb92 	bl	8000b20 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e276      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800140a:	4b92      	ldr	r3, [pc, #584]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x2a8>
 8001416:	e014      	b.n	8001442 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fb82 	bl	8000b20 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fb7e 	bl	8000b20 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	@ 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e262      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001432:	4b88      	ldr	r3, [pc, #544]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x2d0>
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	2b00      	cmp	r3, #0
 800144c:	d060      	beq.n	8001510 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	2b04      	cmp	r3, #4
 8001452:	d005      	beq.n	8001460 <HAL_RCC_OscConfig+0x310>
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b0c      	cmp	r3, #12
 8001458:	d119      	bne.n	800148e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	2b02      	cmp	r3, #2
 800145e:	d116      	bne.n	800148e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001460:	4b7c      	ldr	r3, [pc, #496]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_OscConfig+0x328>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e23f      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b76      	ldr	r3, [pc, #472]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	4973      	ldr	r1, [pc, #460]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148c:	e040      	b.n	8001510 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d023      	beq.n	80014de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001496:	4b6f      	ldr	r3, [pc, #444]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a6e      	ldr	r2, [pc, #440]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a2:	f7ff fb3d 	bl	8000b20 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014aa:	f7ff fb39 	bl	8000b20 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e21d      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014bc:	4b65      	ldr	r3, [pc, #404]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c8:	4b62      	ldr	r3, [pc, #392]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	495f      	ldr	r1, [pc, #380]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
 80014dc:	e018      	b.n	8001510 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014de:	4b5d      	ldr	r3, [pc, #372]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a5c      	ldr	r2, [pc, #368]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80014e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb19 	bl	8000b20 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fb15 	bl	8000b20 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e1f9      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001504:	4b53      	ldr	r3, [pc, #332]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150c:	2b00      	cmp	r3, #0
 800150e:	d1f0      	bne.n	80014f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	2b00      	cmp	r3, #0
 800151a:	d03c      	beq.n	8001596 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01c      	beq.n	800155e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001524:	4b4b      	ldr	r3, [pc, #300]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001526:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800152a:	4a4a      	ldr	r2, [pc, #296]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff faf4 	bl	8000b20 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff faf0 	bl	8000b20 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e1d4      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ef      	beq.n	800153c <HAL_RCC_OscConfig+0x3ec>
 800155c:	e01b      	b.n	8001596 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155e:	4b3d      	ldr	r3, [pc, #244]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001560:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001564:	4a3b      	ldr	r2, [pc, #236]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff fad7 	bl	8000b20 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001576:	f7ff fad3 	bl	8000b20 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1b7      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001588:	4b32      	ldr	r3, [pc, #200]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 800158a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1ef      	bne.n	8001576 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80a6 	beq.w	80016f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d10d      	bne.n	80015d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	4a26      	ldr	r2, [pc, #152]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015be:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c0:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015cc:	2301      	movs	r3, #1
 80015ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015d0:	4b21      	ldr	r3, [pc, #132]	@ (8001658 <HAL_RCC_OscConfig+0x508>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d118      	bne.n	800160e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <HAL_RCC_OscConfig+0x508>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001658 <HAL_RCC_OscConfig+0x508>)
 80015e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015e8:	f7ff fa9a 	bl	8000b20 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f0:	f7ff fa96 	bl	8000b20 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e17a      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_RCC_OscConfig+0x508>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_RCC_OscConfig+0x4d8>
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001626:	e029      	b.n	800167c <HAL_RCC_OscConfig+0x52c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b05      	cmp	r3, #5
 800162e:	d115      	bne.n	800165c <HAL_RCC_OscConfig+0x50c>
 8001630:	4b08      	ldr	r3, [pc, #32]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001636:	4a07      	ldr	r2, [pc, #28]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001640:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001646:	4a03      	ldr	r2, [pc, #12]	@ (8001654 <HAL_RCC_OscConfig+0x504>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001650:	e014      	b.n	800167c <HAL_RCC_OscConfig+0x52c>
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	40007000 	.word	0x40007000
 800165c:	4b9c      	ldr	r3, [pc, #624]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 800165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001662:	4a9b      	ldr	r2, [pc, #620]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800166c:	4b98      	ldr	r3, [pc, #608]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001672:	4a97      	ldr	r2, [pc, #604]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d016      	beq.n	80016b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff fa4c 	bl	8000b20 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff fa48 	bl	8000b20 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e12a      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a2:	4b8b      	ldr	r3, [pc, #556]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80016a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ed      	beq.n	800168c <HAL_RCC_OscConfig+0x53c>
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fa35 	bl	8000b20 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff fa31 	bl	8000b20 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e113      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d0:	4b7f      	ldr	r3, [pc, #508]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1ed      	bne.n	80016ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e4:	4b7a      	ldr	r3, [pc, #488]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e8:	4a79      	ldr	r2, [pc, #484]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80016ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80fe 	beq.w	80018f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016fe:	2b02      	cmp	r3, #2
 8001700:	f040 80d0 	bne.w	80018a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001704:	4b72      	ldr	r3, [pc, #456]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0203 	and.w	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	429a      	cmp	r2, r3
 8001716:	d130      	bne.n	800177a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	3b01      	subs	r3, #1
 8001724:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d127      	bne.n	800177a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001734:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d11f      	bne.n	800177a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001744:	2a07      	cmp	r2, #7
 8001746:	bf14      	ite	ne
 8001748:	2201      	movne	r2, #1
 800174a:	2200      	moveq	r2, #0
 800174c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174e:	4293      	cmp	r3, r2
 8001750:	d113      	bne.n	800177a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	3b01      	subs	r3, #1
 8001760:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d109      	bne.n	800177a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	3b01      	subs	r3, #1
 8001774:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d06e      	beq.n	8001858 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	2b0c      	cmp	r3, #12
 800177e:	d069      	beq.n	8001854 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001780:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800178c:	4b50      	ldr	r3, [pc, #320]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0ad      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800179c:	4b4c      	ldr	r3, [pc, #304]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a4b      	ldr	r2, [pc, #300]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80017a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017a8:	f7ff f9ba 	bl	8000b20 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f9b6 	bl	8000b20 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e09a      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c2:	4b43      	ldr	r3, [pc, #268]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ce:	4b40      	ldr	r3, [pc, #256]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	4b40      	ldr	r3, [pc, #256]	@ (80018d4 <HAL_RCC_OscConfig+0x784>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017de:	3a01      	subs	r2, #1
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017e8:	0212      	lsls	r2, r2, #8
 80017ea:	4311      	orrs	r1, r2
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017f0:	0852      	lsrs	r2, r2, #1
 80017f2:	3a01      	subs	r2, #1
 80017f4:	0552      	lsls	r2, r2, #21
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017fc:	0852      	lsrs	r2, r2, #1
 80017fe:	3a01      	subs	r2, #1
 8001800:	0652      	lsls	r2, r2, #25
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001808:	0912      	lsrs	r2, r2, #4
 800180a:	0452      	lsls	r2, r2, #17
 800180c:	430a      	orrs	r2, r1
 800180e:	4930      	ldr	r1, [pc, #192]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001810:	4313      	orrs	r3, r2
 8001812:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001814:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a2d      	ldr	r2, [pc, #180]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 800181a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800181e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4a2a      	ldr	r2, [pc, #168]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800182c:	f7ff f978 	bl	8000b20 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f974 	bl	8000b20 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e058      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001846:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001852:	e050      	b.n	80018f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e04f      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001858:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d148      	bne.n	80018f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001864:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a19      	ldr	r2, [pc, #100]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800186e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001870:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a16      	ldr	r2, [pc, #88]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800187c:	f7ff f950 	bl	8000b20 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f94c 	bl	8000b20 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e030      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x734>
 80018a2:	e028      	b.n	80018f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b0c      	cmp	r3, #12
 80018a8:	d023      	beq.n	80018f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018aa:	4b09      	ldr	r3, [pc, #36]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_RCC_OscConfig+0x780>)
 80018b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff f933 	bl	8000b20 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	e00c      	b.n	80018d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018be:	f7ff f92f 	bl	8000b20 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d905      	bls.n	80018d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e013      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	4b09      	ldr	r3, [pc, #36]	@ (8001900 <HAL_RCC_OscConfig+0x7b0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1ec      	bne.n	80018be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <HAL_RCC_OscConfig+0x7b0>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4905      	ldr	r1, [pc, #20]	@ (8001900 <HAL_RCC_OscConfig+0x7b0>)
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_RCC_OscConfig+0x7b4>)
 80018ec:	4013      	ands	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
 80018f0:	e001      	b.n	80018f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3720      	adds	r7, #32
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40021000 	.word	0x40021000
 8001904:	feeefffc 	.word	0xfeeefffc

08001908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d101      	bne.n	800191c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0e7      	b.n	8001aec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800191c:	4b75      	ldr	r3, [pc, #468]	@ (8001af4 <HAL_RCC_ClockConfig+0x1ec>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0307 	and.w	r3, r3, #7
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d910      	bls.n	800194c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192a:	4b72      	ldr	r3, [pc, #456]	@ (8001af4 <HAL_RCC_ClockConfig+0x1ec>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0207 	bic.w	r2, r3, #7
 8001932:	4970      	ldr	r1, [pc, #448]	@ (8001af4 <HAL_RCC_ClockConfig+0x1ec>)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4313      	orrs	r3, r2
 8001938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b6e      	ldr	r3, [pc, #440]	@ (8001af4 <HAL_RCC_ClockConfig+0x1ec>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0cf      	b.n	8001aec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d010      	beq.n	800197a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4b66      	ldr	r3, [pc, #408]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001964:	429a      	cmp	r2, r3
 8001966:	d908      	bls.n	800197a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001968:	4b63      	ldr	r3, [pc, #396]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4960      	ldr	r1, [pc, #384]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d04c      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b03      	cmp	r3, #3
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198e:	4b5a      	ldr	r3, [pc, #360]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d121      	bne.n	80019de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0a6      	b.n	8001aec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b54      	ldr	r3, [pc, #336]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e09a      	b.n	8001aec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019be:	4b4e      	ldr	r3, [pc, #312]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e08e      	b.n	8001aec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ce:	4b4a      	ldr	r3, [pc, #296]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e086      	b.n	8001aec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b46      	ldr	r3, [pc, #280]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4943      	ldr	r1, [pc, #268]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f0:	f7ff f896 	bl	8000b20 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff f892 	bl	8000b20 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e06e      	b.n	8001aec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 020c 	and.w	r2, r3, #12
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1eb      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d010      	beq.n	8001a4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b31      	ldr	r3, [pc, #196]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d208      	bcs.n	8001a4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	492b      	ldr	r1, [pc, #172]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4e:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d210      	bcs.n	8001a7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5c:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 0207 	bic.w	r2, r3, #7
 8001a64:	4923      	ldr	r1, [pc, #140]	@ (8001af4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6c:	4b21      	ldr	r3, [pc, #132]	@ (8001af4 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e036      	b.n	8001aec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d008      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	4918      	ldr	r1, [pc, #96]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d009      	beq.n	8001abc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	4910      	ldr	r1, [pc, #64]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001abc:	f000 f824 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8001af8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	490b      	ldr	r1, [pc, #44]	@ (8001afc <HAL_RCC_ClockConfig+0x1f4>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	f003 031f 	and.w	r3, r3, #31
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad8:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <HAL_RCC_ClockConfig+0x1f8>)
 8001ada:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <HAL_RCC_ClockConfig+0x1fc>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe ffcd 	bl	8000a80 <HAL_InitTick>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001aea:	7afb      	ldrb	r3, [r7, #11]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08003708 	.word	0x08003708
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004

08001b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b16:	4b3e      	ldr	r3, [pc, #248]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b20:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x34>
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	2b0c      	cmp	r3, #12
 8001b34:	d121      	bne.n	8001b7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d11e      	bne.n	8001b7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b3c:	4b34      	ldr	r3, [pc, #208]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b48:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	e005      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b64:	4a2b      	ldr	r2, [pc, #172]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10d      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b78:	e00a      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b04      	cmp	r3, #4
 8001b7e:	d102      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b80:	4b25      	ldr	r3, [pc, #148]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	e004      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b8c:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001b8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d134      	bne.n	8001c00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b96:	4b1e      	ldr	r3, [pc, #120]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d003      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0xa6>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d003      	beq.n	8001bb4 <HAL_RCC_GetSysClockFreq+0xac>
 8001bac:	e005      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bb0:	617b      	str	r3, [r7, #20]
      break;
 8001bb2:	e005      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8001bb6:	617b      	str	r3, [r7, #20]
      break;
 8001bb8:	e002      	b.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	617b      	str	r3, [r7, #20]
      break;
 8001bbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	3301      	adds	r3, #1
 8001bcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	fb03 f202 	mul.w	r2, r3, r2
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001be6:	4b0a      	ldr	r3, [pc, #40]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	0e5b      	lsrs	r3, r3, #25
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c00:	69bb      	ldr	r3, [r7, #24]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	08003720 	.word	0x08003720
 8001c18:	00f42400 	.word	0x00f42400
 8001c1c:	007a1200 	.word	0x007a1200

08001c20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4904      	ldr	r1, [pc, #16]	@ (8001c60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	f003 031f 	and.w	r3, r3, #31
 8001c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	08003718 	.word	0x08003718

08001c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c68:	f7ff ffda 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0adb      	lsrs	r3, r3, #11
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4904      	ldr	r1, [pc, #16]	@ (8001c8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08003718 	.word	0x08003718

08001c90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ca8:	f7ff f9ee 	bl	8001088 <HAL_PWREx_GetVoltageRange>
 8001cac:	6178      	str	r0, [r7, #20]
 8001cae:	e014      	b.n	8001cda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cb0:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	4a24      	ldr	r2, [pc, #144]	@ (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cbc:	4b22      	ldr	r3, [pc, #136]	@ (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cc8:	f7ff f9de 	bl	8001088 <HAL_PWREx_GetVoltageRange>
 8001ccc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cce:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001d48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cd4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ce0:	d10b      	bne.n	8001cfa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b80      	cmp	r3, #128	@ 0x80
 8001ce6:	d919      	bls.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2ba0      	cmp	r3, #160	@ 0xa0
 8001cec:	d902      	bls.n	8001cf4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cee:	2302      	movs	r3, #2
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e013      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	e010      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b80      	cmp	r3, #128	@ 0x80
 8001cfe:	d902      	bls.n	8001d06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d00:	2303      	movs	r3, #3
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	e00a      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b80      	cmp	r3, #128	@ 0x80
 8001d0a:	d102      	bne.n	8001d12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e004      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b70      	cmp	r3, #112	@ 0x70
 8001d16:	d101      	bne.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 0207 	bic.w	r2, r3, #7
 8001d24:	4909      	ldr	r1, [pc, #36]	@ (8001d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d2c:	4b07      	ldr	r3, [pc, #28]	@ (8001d4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d001      	beq.n	8001d3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40022000 	.word	0x40022000

08001d50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d58:	2300      	movs	r3, #0
 8001d5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d041      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d74:	d02a      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001d76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001d7a:	d824      	bhi.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d80:	d008      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001d82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001d86:	d81e      	bhi.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00a      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001d8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d90:	d010      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d92:	e018      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d94:	4b86      	ldr	r3, [pc, #536]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	4a85      	ldr	r2, [pc, #532]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001da0:	e015      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3304      	adds	r3, #4
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fabb 	bl	8002324 <RCCEx_PLLSAI1_Config>
 8001dae:	4603      	mov	r3, r0
 8001db0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001db2:	e00c      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3320      	adds	r3, #32
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fba6 	bl	800250c <RCCEx_PLLSAI2_Config>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dc4:	e003      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	74fb      	strb	r3, [r7, #19]
      break;
 8001dca:	e000      	b.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001dcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001dce:	7cfb      	ldrb	r3, [r7, #19]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10b      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dd4:	4b76      	ldr	r3, [pc, #472]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dda:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001de2:	4973      	ldr	r1, [pc, #460]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dea:	e001      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dec:	7cfb      	ldrb	r3, [r7, #19]
 8001dee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d041      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e04:	d02a      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e06:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e0a:	d824      	bhi.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e10:	d008      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e16:	d81e      	bhi.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e20:	d010      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e22:	e018      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e24:	4b62      	ldr	r3, [pc, #392]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a61      	ldr	r2, [pc, #388]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e30:	e015      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fa73 	bl	8002324 <RCCEx_PLLSAI1_Config>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e42:	e00c      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3320      	adds	r3, #32
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fb5e 	bl	800250c <RCCEx_PLLSAI2_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e54:	e003      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	74fb      	strb	r3, [r7, #19]
      break;
 8001e5a:	e000      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e5e:	7cfb      	ldrb	r3, [r7, #19]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e64:	4b52      	ldr	r3, [pc, #328]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e72:	494f      	ldr	r1, [pc, #316]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e7a:	e001      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e7c:	7cfb      	ldrb	r3, [r7, #19]
 8001e7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a0 	beq.w	8001fce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e92:	4b47      	ldr	r3, [pc, #284]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea8:	4b41      	ldr	r3, [pc, #260]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	4a40      	ldr	r2, [pc, #256]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a3a      	ldr	r2, [pc, #232]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ece:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fe26 	bl	8000b20 <HAL_GetTick>
 8001ed4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ed6:	e009      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed8:	f7fe fe22 	bl	8000b20 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d902      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	74fb      	strb	r3, [r7, #19]
        break;
 8001eea:	e005      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001eec:	4b31      	ldr	r3, [pc, #196]	@ (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ef      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001ef8:	7cfb      	ldrb	r3, [r7, #19]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d15c      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001efe:	4b2c      	ldr	r3, [pc, #176]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d01f      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f16:	697a      	ldr	r2, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d019      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f1c:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f28:	4b21      	ldr	r3, [pc, #132]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f2e:	4a20      	ldr	r2, [pc, #128]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f38:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f48:	4a19      	ldr	r2, [pc, #100]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d016      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe fde1 	bl	8000b20 <HAL_GetTick>
 8001f5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f60:	e00b      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7fe fddd 	bl	8000b20 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d902      	bls.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	74fb      	strb	r3, [r7, #19]
            break;
 8001f78:	e006      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ec      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8e:	4b08      	ldr	r3, [pc, #32]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f9e:	4904      	ldr	r1, [pc, #16]	@ (8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fa6:	e009      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fa8:	7cfb      	ldrb	r3, [r7, #19]
 8001faa:	74bb      	strb	r3, [r7, #18]
 8001fac:	e006      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fbc:	7c7b      	ldrb	r3, [r7, #17]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d105      	bne.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc2:	4b9e      	ldr	r3, [pc, #632]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc6:	4a9d      	ldr	r2, [pc, #628]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fda:	4b98      	ldr	r3, [pc, #608]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe0:	f023 0203 	bic.w	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fe8:	4994      	ldr	r1, [pc, #592]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002002:	f023 020c 	bic.w	r2, r3, #12
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800200a:	498c      	ldr	r1, [pc, #560]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800201e:	4b87      	ldr	r3, [pc, #540]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002024:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202c:	4983      	ldr	r1, [pc, #524]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002040:	4b7e      	ldr	r3, [pc, #504]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002046:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	497b      	ldr	r1, [pc, #492]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002062:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002068:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002070:	4972      	ldr	r1, [pc, #456]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0320 	and.w	r3, r3, #32
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002084:	4b6d      	ldr	r3, [pc, #436]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	496a      	ldr	r1, [pc, #424]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020a6:	4b65      	ldr	r3, [pc, #404]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b4:	4961      	ldr	r1, [pc, #388]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020c8:	4b5c      	ldr	r3, [pc, #368]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d6:	4959      	ldr	r1, [pc, #356]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ea:	4b54      	ldr	r3, [pc, #336]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020f8:	4950      	ldr	r1, [pc, #320]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800210c:	4b4b      	ldr	r3, [pc, #300]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800211a:	4948      	ldr	r1, [pc, #288]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800212e:	4b43      	ldr	r3, [pc, #268]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002134:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213c:	493f      	ldr	r1, [pc, #252]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d028      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002150:	4b3a      	ldr	r3, [pc, #232]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002156:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800215e:	4937      	ldr	r1, [pc, #220]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800216a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800216e:	d106      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002170:	4b32      	ldr	r3, [pc, #200]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a31      	ldr	r2, [pc, #196]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800217a:	60d3      	str	r3, [r2, #12]
 800217c:	e011      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002182:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002186:	d10c      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	2101      	movs	r1, #1
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f8c8 	bl	8002324 <RCCEx_PLLSAI1_Config>
 8002194:	4603      	mov	r3, r0
 8002196:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800219e:	7cfb      	ldrb	r3, [r7, #19]
 80021a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d028      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021ae:	4b23      	ldr	r3, [pc, #140]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021bc:	491f      	ldr	r1, [pc, #124]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021cc:	d106      	bne.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ce:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a1a      	ldr	r2, [pc, #104]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021d8:	60d3      	str	r3, [r2, #12]
 80021da:	e011      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2101      	movs	r1, #1
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 f899 	bl	8002324 <RCCEx_PLLSAI1_Config>
 80021f2:	4603      	mov	r3, r0
 80021f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f6:	7cfb      	ldrb	r3, [r7, #19]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80021fc:	7cfb      	ldrb	r3, [r7, #19]
 80021fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d02b      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221a:	4908      	ldr	r1, [pc, #32]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800222a:	d109      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4a02      	ldr	r2, [pc, #8]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002236:	60d3      	str	r3, [r2, #12]
 8002238:	e014      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002244:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002248:	d10c      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	2101      	movs	r1, #1
 8002250:	4618      	mov	r0, r3
 8002252:	f000 f867 	bl	8002324 <RCCEx_PLLSAI1_Config>
 8002256:	4603      	mov	r3, r0
 8002258:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800225a:	7cfb      	ldrb	r3, [r7, #19]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002260:	7cfb      	ldrb	r3, [r7, #19]
 8002262:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d02f      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002270:	4b2b      	ldr	r3, [pc, #172]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002276:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800227e:	4928      	ldr	r1, [pc, #160]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800228a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800228e:	d10d      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3304      	adds	r3, #4
 8002294:	2102      	movs	r1, #2
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f844 	bl	8002324 <RCCEx_PLLSAI1_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a0:	7cfb      	ldrb	r3, [r7, #19]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d014      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022a6:	7cfb      	ldrb	r3, [r7, #19]
 80022a8:	74bb      	strb	r3, [r7, #18]
 80022aa:	e011      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022b4:	d10c      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	3320      	adds	r3, #32
 80022ba:	2102      	movs	r1, #2
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 f925 	bl	800250c <RCCEx_PLLSAI2_Config>
 80022c2:	4603      	mov	r3, r0
 80022c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022cc:	7cfb      	ldrb	r3, [r7, #19]
 80022ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022dc:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80022ea:	490d      	ldr	r1, [pc, #52]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00b      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002304:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800230e:	4904      	ldr	r1, [pc, #16]	@ (8002320 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002316:	7cbb      	ldrb	r3, [r7, #18]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000

08002324 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002332:	4b75      	ldr	r3, [pc, #468]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d018      	beq.n	8002370 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800233e:	4b72      	ldr	r3, [pc, #456]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	f003 0203 	and.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d10d      	bne.n	800236a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
       ||
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002356:	4b6c      	ldr	r3, [pc, #432]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	091b      	lsrs	r3, r3, #4
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
       ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d047      	beq.n	80023fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	e044      	b.n	80023fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d018      	beq.n	80023aa <RCCEx_PLLSAI1_Config+0x86>
 8002378:	2b03      	cmp	r3, #3
 800237a:	d825      	bhi.n	80023c8 <RCCEx_PLLSAI1_Config+0xa4>
 800237c:	2b01      	cmp	r3, #1
 800237e:	d002      	beq.n	8002386 <RCCEx_PLLSAI1_Config+0x62>
 8002380:	2b02      	cmp	r3, #2
 8002382:	d009      	beq.n	8002398 <RCCEx_PLLSAI1_Config+0x74>
 8002384:	e020      	b.n	80023c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002386:	4b60      	ldr	r3, [pc, #384]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d11d      	bne.n	80023ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002396:	e01a      	b.n	80023ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002398:	4b5b      	ldr	r3, [pc, #364]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d116      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a8:	e013      	b.n	80023d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023aa:	4b57      	ldr	r3, [pc, #348]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10f      	bne.n	80023d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023b6:	4b54      	ldr	r3, [pc, #336]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023c6:	e006      	b.n	80023d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	73fb      	strb	r3, [r7, #15]
      break;
 80023cc:	e004      	b.n	80023d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ce:	bf00      	nop
 80023d0:	e002      	b.n	80023d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023d2:	bf00      	nop
 80023d4:	e000      	b.n	80023d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80023d8:	7bfb      	ldrb	r3, [r7, #15]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10d      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023de:	4b4a      	ldr	r3, [pc, #296]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	430b      	orrs	r3, r1
 80023f4:	4944      	ldr	r1, [pc, #272]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d17d      	bne.n	80024fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002400:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a40      	ldr	r2, [pc, #256]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002406:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800240a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800240c:	f7fe fb88 	bl	8000b20 <HAL_GetTick>
 8002410:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002412:	e009      	b.n	8002428 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002414:	f7fe fb84 	bl	8000b20 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d902      	bls.n	8002428 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	73fb      	strb	r3, [r7, #15]
        break;
 8002426:	e005      	b.n	8002434 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002428:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ef      	bne.n	8002414 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d160      	bne.n	80024fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d111      	bne.n	8002464 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002440:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6892      	ldr	r2, [r2, #8]
 8002450:	0211      	lsls	r1, r2, #8
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	0912      	lsrs	r2, r2, #4
 8002458:	0452      	lsls	r2, r2, #17
 800245a:	430a      	orrs	r2, r1
 800245c:	492a      	ldr	r1, [pc, #168]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	610b      	str	r3, [r1, #16]
 8002462:	e027      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d112      	bne.n	8002490 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800246a:	4b27      	ldr	r3, [pc, #156]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002472:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6892      	ldr	r2, [r2, #8]
 800247a:	0211      	lsls	r1, r2, #8
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6912      	ldr	r2, [r2, #16]
 8002480:	0852      	lsrs	r2, r2, #1
 8002482:	3a01      	subs	r2, #1
 8002484:	0552      	lsls	r2, r2, #21
 8002486:	430a      	orrs	r2, r1
 8002488:	491f      	ldr	r1, [pc, #124]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	610b      	str	r3, [r1, #16]
 800248e:	e011      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002498:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	0211      	lsls	r1, r2, #8
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6952      	ldr	r2, [r2, #20]
 80024a6:	0852      	lsrs	r2, r2, #1
 80024a8:	3a01      	subs	r2, #1
 80024aa:	0652      	lsls	r2, r2, #25
 80024ac:	430a      	orrs	r2, r1
 80024ae:	4916      	ldr	r1, [pc, #88]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ba:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f7fe fb2e 	bl	8000b20 <HAL_GetTick>
 80024c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024c6:	e009      	b.n	80024dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024c8:	f7fe fb2a 	bl	8000b20 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d902      	bls.n	80024dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	73fb      	strb	r3, [r7, #15]
          break;
 80024da:	e005      	b.n	80024e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d106      	bne.n	80024fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	4904      	ldr	r1, [pc, #16]	@ (8002508 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000

0800250c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800251a:	4b6a      	ldr	r3, [pc, #424]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d018      	beq.n	8002558 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002526:	4b67      	ldr	r3, [pc, #412]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f003 0203 	and.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d10d      	bne.n	8002552 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
       ||
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800253e:	4b61      	ldr	r3, [pc, #388]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
       ||
 800254e:	429a      	cmp	r2, r3
 8002550:	d047      	beq.n	80025e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	e044      	b.n	80025e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d018      	beq.n	8002592 <RCCEx_PLLSAI2_Config+0x86>
 8002560:	2b03      	cmp	r3, #3
 8002562:	d825      	bhi.n	80025b0 <RCCEx_PLLSAI2_Config+0xa4>
 8002564:	2b01      	cmp	r3, #1
 8002566:	d002      	beq.n	800256e <RCCEx_PLLSAI2_Config+0x62>
 8002568:	2b02      	cmp	r3, #2
 800256a:	d009      	beq.n	8002580 <RCCEx_PLLSAI2_Config+0x74>
 800256c:	e020      	b.n	80025b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800256e:	4b55      	ldr	r3, [pc, #340]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11d      	bne.n	80025b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800257e:	e01a      	b.n	80025b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002580:	4b50      	ldr	r3, [pc, #320]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d116      	bne.n	80025ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002590:	e013      	b.n	80025ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002592:	4b4c      	ldr	r3, [pc, #304]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10f      	bne.n	80025be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800259e:	4b49      	ldr	r3, [pc, #292]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d109      	bne.n	80025be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ae:	e006      	b.n	80025be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
      break;
 80025b4:	e004      	b.n	80025c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025b6:	bf00      	nop
 80025b8:	e002      	b.n	80025c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025ba:	bf00      	nop
 80025bc:	e000      	b.n	80025c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025be:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025c6:	4b3f      	ldr	r3, [pc, #252]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6819      	ldr	r1, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	430b      	orrs	r3, r1
 80025dc:	4939      	ldr	r1, [pc, #228]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d167      	bne.n	80026b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80025e8:	4b36      	ldr	r3, [pc, #216]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a35      	ldr	r2, [pc, #212]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f4:	f7fe fa94 	bl	8000b20 <HAL_GetTick>
 80025f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025fa:	e009      	b.n	8002610 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025fc:	f7fe fa90 	bl	8000b20 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d902      	bls.n	8002610 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	73fb      	strb	r3, [r7, #15]
        break;
 800260e:	e005      	b.n	800261c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002610:	4b2c      	ldr	r3, [pc, #176]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ef      	bne.n	80025fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800261c:	7bfb      	ldrb	r3, [r7, #15]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d14a      	bne.n	80026b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d111      	bne.n	800264c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002628:	4b26      	ldr	r3, [pc, #152]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6892      	ldr	r2, [r2, #8]
 8002638:	0211      	lsls	r1, r2, #8
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68d2      	ldr	r2, [r2, #12]
 800263e:	0912      	lsrs	r2, r2, #4
 8002640:	0452      	lsls	r2, r2, #17
 8002642:	430a      	orrs	r2, r1
 8002644:	491f      	ldr	r1, [pc, #124]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002646:	4313      	orrs	r3, r2
 8002648:	614b      	str	r3, [r1, #20]
 800264a:	e011      	b.n	8002670 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800264c:	4b1d      	ldr	r3, [pc, #116]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002654:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	6892      	ldr	r2, [r2, #8]
 800265c:	0211      	lsls	r1, r2, #8
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	6912      	ldr	r2, [r2, #16]
 8002662:	0852      	lsrs	r2, r2, #1
 8002664:	3a01      	subs	r2, #1
 8002666:	0652      	lsls	r2, r2, #25
 8002668:	430a      	orrs	r2, r1
 800266a:	4916      	ldr	r1, [pc, #88]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266c:	4313      	orrs	r3, r2
 800266e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002670:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a13      	ldr	r2, [pc, #76]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7fe fa50 	bl	8000b20 <HAL_GetTick>
 8002680:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002682:	e009      	b.n	8002698 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002684:	f7fe fa4c 	bl	8000b20 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d902      	bls.n	8002698 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	73fb      	strb	r3, [r7, #15]
          break;
 8002696:	e005      	b.n	80026a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ef      	beq.n	8002684 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	4904      	ldr	r1, [pc, #16]	@ (80026c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40021000 	.word	0x40021000

080026c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e040      	b.n	800275c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe f8e0 	bl	80008b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2224      	movs	r2, #36	@ 0x24
 80026f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 0201 	bic.w	r2, r2, #1
 8002704:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 fae0 	bl	8002cd4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f825 	bl	8002764 <UART_SetConfig>
 800271a:	4603      	mov	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e01b      	b.n	800275c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002732:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002742:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fb5f 	bl	8002e18 <UART_CheckIdleState>
 800275a:	4603      	mov	r3, r0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002768:	b08a      	sub	sp, #40	@ 0x28
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	431a      	orrs	r2, r3
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	431a      	orrs	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	4313      	orrs	r3, r2
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4ba4      	ldr	r3, [pc, #656]	@ (8002a24 <UART_SetConfig+0x2c0>)
 8002794:	4013      	ands	r3, r2
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800279c:	430b      	orrs	r3, r1
 800279e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a99      	ldr	r2, [pc, #612]	@ (8002a28 <UART_SetConfig+0x2c4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d004      	beq.n	80027d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027cc:	4313      	orrs	r3, r2
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e0:	430a      	orrs	r2, r1
 80027e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a90      	ldr	r2, [pc, #576]	@ (8002a2c <UART_SetConfig+0x2c8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d126      	bne.n	800283c <UART_SetConfig+0xd8>
 80027ee:	4b90      	ldr	r3, [pc, #576]	@ (8002a30 <UART_SetConfig+0x2cc>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d81b      	bhi.n	8002834 <UART_SetConfig+0xd0>
 80027fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002804 <UART_SetConfig+0xa0>)
 80027fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002802:	bf00      	nop
 8002804:	08002815 	.word	0x08002815
 8002808:	08002825 	.word	0x08002825
 800280c:	0800281d 	.word	0x0800281d
 8002810:	0800282d 	.word	0x0800282d
 8002814:	2301      	movs	r3, #1
 8002816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800281a:	e116      	b.n	8002a4a <UART_SetConfig+0x2e6>
 800281c:	2302      	movs	r3, #2
 800281e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002822:	e112      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002824:	2304      	movs	r3, #4
 8002826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800282a:	e10e      	b.n	8002a4a <UART_SetConfig+0x2e6>
 800282c:	2308      	movs	r3, #8
 800282e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002832:	e10a      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002834:	2310      	movs	r3, #16
 8002836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800283a:	e106      	b.n	8002a4a <UART_SetConfig+0x2e6>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a7c      	ldr	r2, [pc, #496]	@ (8002a34 <UART_SetConfig+0x2d0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d138      	bne.n	80028b8 <UART_SetConfig+0x154>
 8002846:	4b7a      	ldr	r3, [pc, #488]	@ (8002a30 <UART_SetConfig+0x2cc>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284c:	f003 030c 	and.w	r3, r3, #12
 8002850:	2b0c      	cmp	r3, #12
 8002852:	d82d      	bhi.n	80028b0 <UART_SetConfig+0x14c>
 8002854:	a201      	add	r2, pc, #4	@ (adr r2, 800285c <UART_SetConfig+0xf8>)
 8002856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800285a:	bf00      	nop
 800285c:	08002891 	.word	0x08002891
 8002860:	080028b1 	.word	0x080028b1
 8002864:	080028b1 	.word	0x080028b1
 8002868:	080028b1 	.word	0x080028b1
 800286c:	080028a1 	.word	0x080028a1
 8002870:	080028b1 	.word	0x080028b1
 8002874:	080028b1 	.word	0x080028b1
 8002878:	080028b1 	.word	0x080028b1
 800287c:	08002899 	.word	0x08002899
 8002880:	080028b1 	.word	0x080028b1
 8002884:	080028b1 	.word	0x080028b1
 8002888:	080028b1 	.word	0x080028b1
 800288c:	080028a9 	.word	0x080028a9
 8002890:	2300      	movs	r3, #0
 8002892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002896:	e0d8      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002898:	2302      	movs	r3, #2
 800289a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800289e:	e0d4      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80028a0:	2304      	movs	r3, #4
 80028a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028a6:	e0d0      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80028a8:	2308      	movs	r3, #8
 80028aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ae:	e0cc      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80028b0:	2310      	movs	r3, #16
 80028b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028b6:	e0c8      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5e      	ldr	r2, [pc, #376]	@ (8002a38 <UART_SetConfig+0x2d4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d125      	bne.n	800290e <UART_SetConfig+0x1aa>
 80028c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a30 <UART_SetConfig+0x2cc>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80028cc:	2b30      	cmp	r3, #48	@ 0x30
 80028ce:	d016      	beq.n	80028fe <UART_SetConfig+0x19a>
 80028d0:	2b30      	cmp	r3, #48	@ 0x30
 80028d2:	d818      	bhi.n	8002906 <UART_SetConfig+0x1a2>
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d00a      	beq.n	80028ee <UART_SetConfig+0x18a>
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d814      	bhi.n	8002906 <UART_SetConfig+0x1a2>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d002      	beq.n	80028e6 <UART_SetConfig+0x182>
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d008      	beq.n	80028f6 <UART_SetConfig+0x192>
 80028e4:	e00f      	b.n	8002906 <UART_SetConfig+0x1a2>
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028ec:	e0ad      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80028ee:	2302      	movs	r3, #2
 80028f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028f4:	e0a9      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80028f6:	2304      	movs	r3, #4
 80028f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80028fc:	e0a5      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80028fe:	2308      	movs	r3, #8
 8002900:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002904:	e0a1      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002906:	2310      	movs	r3, #16
 8002908:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800290c:	e09d      	b.n	8002a4a <UART_SetConfig+0x2e6>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a4a      	ldr	r2, [pc, #296]	@ (8002a3c <UART_SetConfig+0x2d8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d125      	bne.n	8002964 <UART_SetConfig+0x200>
 8002918:	4b45      	ldr	r3, [pc, #276]	@ (8002a30 <UART_SetConfig+0x2cc>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002922:	2bc0      	cmp	r3, #192	@ 0xc0
 8002924:	d016      	beq.n	8002954 <UART_SetConfig+0x1f0>
 8002926:	2bc0      	cmp	r3, #192	@ 0xc0
 8002928:	d818      	bhi.n	800295c <UART_SetConfig+0x1f8>
 800292a:	2b80      	cmp	r3, #128	@ 0x80
 800292c:	d00a      	beq.n	8002944 <UART_SetConfig+0x1e0>
 800292e:	2b80      	cmp	r3, #128	@ 0x80
 8002930:	d814      	bhi.n	800295c <UART_SetConfig+0x1f8>
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <UART_SetConfig+0x1d8>
 8002936:	2b40      	cmp	r3, #64	@ 0x40
 8002938:	d008      	beq.n	800294c <UART_SetConfig+0x1e8>
 800293a:	e00f      	b.n	800295c <UART_SetConfig+0x1f8>
 800293c:	2300      	movs	r3, #0
 800293e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002942:	e082      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002944:	2302      	movs	r3, #2
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800294a:	e07e      	b.n	8002a4a <UART_SetConfig+0x2e6>
 800294c:	2304      	movs	r3, #4
 800294e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002952:	e07a      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002954:	2308      	movs	r3, #8
 8002956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800295a:	e076      	b.n	8002a4a <UART_SetConfig+0x2e6>
 800295c:	2310      	movs	r3, #16
 800295e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002962:	e072      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a35      	ldr	r2, [pc, #212]	@ (8002a40 <UART_SetConfig+0x2dc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d12a      	bne.n	80029c4 <UART_SetConfig+0x260>
 800296e:	4b30      	ldr	r3, [pc, #192]	@ (8002a30 <UART_SetConfig+0x2cc>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002974:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002978:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800297c:	d01a      	beq.n	80029b4 <UART_SetConfig+0x250>
 800297e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002982:	d81b      	bhi.n	80029bc <UART_SetConfig+0x258>
 8002984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002988:	d00c      	beq.n	80029a4 <UART_SetConfig+0x240>
 800298a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800298e:	d815      	bhi.n	80029bc <UART_SetConfig+0x258>
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <UART_SetConfig+0x238>
 8002994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002998:	d008      	beq.n	80029ac <UART_SetConfig+0x248>
 800299a:	e00f      	b.n	80029bc <UART_SetConfig+0x258>
 800299c:	2300      	movs	r3, #0
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029a2:	e052      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80029a4:	2302      	movs	r3, #2
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029aa:	e04e      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80029ac:	2304      	movs	r3, #4
 80029ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029b2:	e04a      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80029b4:	2308      	movs	r3, #8
 80029b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029ba:	e046      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80029bc:	2310      	movs	r3, #16
 80029be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80029c2:	e042      	b.n	8002a4a <UART_SetConfig+0x2e6>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a17      	ldr	r2, [pc, #92]	@ (8002a28 <UART_SetConfig+0x2c4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d13a      	bne.n	8002a44 <UART_SetConfig+0x2e0>
 80029ce:	4b18      	ldr	r3, [pc, #96]	@ (8002a30 <UART_SetConfig+0x2cc>)
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80029d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029dc:	d01a      	beq.n	8002a14 <UART_SetConfig+0x2b0>
 80029de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80029e2:	d81b      	bhi.n	8002a1c <UART_SetConfig+0x2b8>
 80029e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029e8:	d00c      	beq.n	8002a04 <UART_SetConfig+0x2a0>
 80029ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80029ee:	d815      	bhi.n	8002a1c <UART_SetConfig+0x2b8>
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <UART_SetConfig+0x298>
 80029f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029f8:	d008      	beq.n	8002a0c <UART_SetConfig+0x2a8>
 80029fa:	e00f      	b.n	8002a1c <UART_SetConfig+0x2b8>
 80029fc:	2300      	movs	r3, #0
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a02:	e022      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002a04:	2302      	movs	r3, #2
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a0a:	e01e      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a12:	e01a      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002a14:	2308      	movs	r3, #8
 8002a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a1a:	e016      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002a1c:	2310      	movs	r3, #16
 8002a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002a22:	e012      	b.n	8002a4a <UART_SetConfig+0x2e6>
 8002a24:	efff69f3 	.word	0xefff69f3
 8002a28:	40008000 	.word	0x40008000
 8002a2c:	40013800 	.word	0x40013800
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40004400 	.word	0x40004400
 8002a38:	40004800 	.word	0x40004800
 8002a3c:	40004c00 	.word	0x40004c00
 8002a40:	40005000 	.word	0x40005000
 8002a44:	2310      	movs	r3, #16
 8002a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a9f      	ldr	r2, [pc, #636]	@ (8002ccc <UART_SetConfig+0x568>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d17a      	bne.n	8002b4a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d824      	bhi.n	8002aa6 <UART_SetConfig+0x342>
 8002a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002a64 <UART_SetConfig+0x300>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002a89 	.word	0x08002a89
 8002a68:	08002aa7 	.word	0x08002aa7
 8002a6c:	08002a91 	.word	0x08002a91
 8002a70:	08002aa7 	.word	0x08002aa7
 8002a74:	08002a97 	.word	0x08002a97
 8002a78:	08002aa7 	.word	0x08002aa7
 8002a7c:	08002aa7 	.word	0x08002aa7
 8002a80:	08002aa7 	.word	0x08002aa7
 8002a84:	08002a9f 	.word	0x08002a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7ff f8d6 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8002a8c:	61f8      	str	r0, [r7, #28]
        break;
 8002a8e:	e010      	b.n	8002ab2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a90:	4b8f      	ldr	r3, [pc, #572]	@ (8002cd0 <UART_SetConfig+0x56c>)
 8002a92:	61fb      	str	r3, [r7, #28]
        break;
 8002a94:	e00d      	b.n	8002ab2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a96:	f7ff f837 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8002a9a:	61f8      	str	r0, [r7, #28]
        break;
 8002a9c:	e009      	b.n	8002ab2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002aa2:	61fb      	str	r3, [r7, #28]
        break;
 8002aa4:	e005      	b.n	8002ab2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002ab0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80fb 	beq.w	8002cb0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4413      	add	r3, r2
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d305      	bcc.n	8002ad6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d903      	bls.n	8002ade <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002adc:	e0e8      	b.n	8002cb0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	461c      	mov	r4, r3
 8002ae4:	4615      	mov	r5, r2
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	022b      	lsls	r3, r5, #8
 8002af0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002af4:	0222      	lsls	r2, r4, #8
 8002af6:	68f9      	ldr	r1, [r7, #12]
 8002af8:	6849      	ldr	r1, [r1, #4]
 8002afa:	0849      	lsrs	r1, r1, #1
 8002afc:	2000      	movs	r0, #0
 8002afe:	4688      	mov	r8, r1
 8002b00:	4681      	mov	r9, r0
 8002b02:	eb12 0a08 	adds.w	sl, r2, r8
 8002b06:	eb43 0b09 	adc.w	fp, r3, r9
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b18:	4650      	mov	r0, sl
 8002b1a:	4659      	mov	r1, fp
 8002b1c:	f7fd fb54 	bl	80001c8 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4613      	mov	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b2e:	d308      	bcc.n	8002b42 <UART_SetConfig+0x3de>
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b36:	d204      	bcs.n	8002b42 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	60da      	str	r2, [r3, #12]
 8002b40:	e0b6      	b.n	8002cb0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002b48:	e0b2      	b.n	8002cb0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	69db      	ldr	r3, [r3, #28]
 8002b4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b52:	d15e      	bne.n	8002c12 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002b54:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d828      	bhi.n	8002bae <UART_SetConfig+0x44a>
 8002b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b64 <UART_SetConfig+0x400>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002b89 	.word	0x08002b89
 8002b68:	08002b91 	.word	0x08002b91
 8002b6c:	08002b99 	.word	0x08002b99
 8002b70:	08002baf 	.word	0x08002baf
 8002b74:	08002b9f 	.word	0x08002b9f
 8002b78:	08002baf 	.word	0x08002baf
 8002b7c:	08002baf 	.word	0x08002baf
 8002b80:	08002baf 	.word	0x08002baf
 8002b84:	08002ba7 	.word	0x08002ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b88:	f7ff f856 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8002b8c:	61f8      	str	r0, [r7, #28]
        break;
 8002b8e:	e014      	b.n	8002bba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b90:	f7ff f868 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8002b94:	61f8      	str	r0, [r7, #28]
        break;
 8002b96:	e010      	b.n	8002bba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b98:	4b4d      	ldr	r3, [pc, #308]	@ (8002cd0 <UART_SetConfig+0x56c>)
 8002b9a:	61fb      	str	r3, [r7, #28]
        break;
 8002b9c:	e00d      	b.n	8002bba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b9e:	f7fe ffb3 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8002ba2:	61f8      	str	r0, [r7, #28]
        break;
 8002ba4:	e009      	b.n	8002bba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002baa:	61fb      	str	r3, [r7, #28]
        break;
 8002bac:	e005      	b.n	8002bba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002bb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d077      	beq.n	8002cb0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005a      	lsls	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	441a      	add	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d916      	bls.n	8002c0a <UART_SetConfig+0x4a6>
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be2:	d212      	bcs.n	8002c0a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f023 030f 	bic.w	r3, r3, #15
 8002bec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	085b      	lsrs	r3, r3, #1
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	8afb      	ldrh	r3, [r7, #22]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	8afa      	ldrh	r2, [r7, #22]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	e052      	b.n	8002cb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002c10:	e04e      	b.n	8002cb0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d827      	bhi.n	8002c6a <UART_SetConfig+0x506>
 8002c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <UART_SetConfig+0x4bc>)
 8002c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c20:	08002c45 	.word	0x08002c45
 8002c24:	08002c4d 	.word	0x08002c4d
 8002c28:	08002c55 	.word	0x08002c55
 8002c2c:	08002c6b 	.word	0x08002c6b
 8002c30:	08002c5b 	.word	0x08002c5b
 8002c34:	08002c6b 	.word	0x08002c6b
 8002c38:	08002c6b 	.word	0x08002c6b
 8002c3c:	08002c6b 	.word	0x08002c6b
 8002c40:	08002c63 	.word	0x08002c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c44:	f7fe fff8 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8002c48:	61f8      	str	r0, [r7, #28]
        break;
 8002c4a:	e014      	b.n	8002c76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c4c:	f7ff f80a 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 8002c50:	61f8      	str	r0, [r7, #28]
        break;
 8002c52:	e010      	b.n	8002c76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c54:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd0 <UART_SetConfig+0x56c>)
 8002c56:	61fb      	str	r3, [r7, #28]
        break;
 8002c58:	e00d      	b.n	8002c76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c5a:	f7fe ff55 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8002c5e:	61f8      	str	r0, [r7, #28]
        break;
 8002c60:	e009      	b.n	8002c76 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c66:	61fb      	str	r3, [r7, #28]
        break;
 8002c68:	e005      	b.n	8002c76 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002c74:	bf00      	nop
    }

    if (pclk != 0U)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d019      	beq.n	8002cb0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	085a      	lsrs	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	441a      	add	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2b0f      	cmp	r3, #15
 8002c94:	d909      	bls.n	8002caa <UART_SetConfig+0x546>
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c9c:	d205      	bcs.n	8002caa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e002      	b.n	8002cb0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002cbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3728      	adds	r7, #40	@ 0x28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cca:	bf00      	nop
 8002ccc:	40008000 	.word	0x40008000
 8002cd0:	00f42400 	.word	0x00f42400

08002cd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01a      	beq.n	8002dea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002dd2:	d10a      	bne.n	8002dea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b098      	sub	sp, #96	@ 0x60
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e28:	f7fd fe7a 	bl	8000b20 <HAL_GetTick>
 8002e2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d12e      	bne.n	8002e9a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e44:	2200      	movs	r2, #0
 8002e46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f88c 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d021      	beq.n	8002e9a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5e:	e853 3f00 	ldrex	r3, [r3]
 8002e62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	461a      	mov	r2, r3
 8002e72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e74:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e6      	bne.n	8002e56 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e062      	b.n	8002f60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d149      	bne.n	8002f3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ea8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f856 	bl	8002f68 <UART_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03c      	beq.n	8002f3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	623b      	str	r3, [r7, #32]
   return(result);
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ee0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e6      	bne.n	8002ec2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3308      	adds	r3, #8
 8002efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	e853 3f00 	ldrex	r3, [r3]
 8002f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0301 	bic.w	r3, r3, #1
 8002f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3308      	adds	r3, #8
 8002f12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f14:	61fa      	str	r2, [r7, #28]
 8002f16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	69b9      	ldr	r1, [r7, #24]
 8002f1a:	69fa      	ldr	r2, [r7, #28]
 8002f1c:	e841 2300 	strex	r3, r2, [r1]
 8002f20:	617b      	str	r3, [r7, #20]
   return(result);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1e5      	bne.n	8002ef4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e011      	b.n	8002f60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2220      	movs	r2, #32
 8002f40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3758      	adds	r7, #88	@ 0x58
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	603b      	str	r3, [r7, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f78:	e04f      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f80:	d04b      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f82:	f7fd fdcd 	bl	8000b20 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d302      	bcc.n	8002f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f92:	69bb      	ldr	r3, [r7, #24]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e04e      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d037      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b80      	cmp	r3, #128	@ 0x80
 8002fae:	d034      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb2>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b40      	cmp	r3, #64	@ 0x40
 8002fb4:	d031      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f003 0308 	and.w	r3, r3, #8
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d110      	bne.n	8002fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2208      	movs	r2, #8
 8002fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f838 	bl	8003042 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2208      	movs	r2, #8
 8002fd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e029      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff4:	d111      	bne.n	800301a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f81e 	bl	8003042 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4013      	ands	r3, r2
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	bf0c      	ite	eq
 800302a:	2301      	moveq	r3, #1
 800302c:	2300      	movne	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	461a      	mov	r2, r3
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	429a      	cmp	r2, r3
 8003036:	d0a0      	beq.n	8002f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003042:	b480      	push	{r7}
 8003044:	b095      	sub	sp, #84	@ 0x54
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003052:	e853 3f00 	ldrex	r3, [r3]
 8003056:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800305e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003068:	643b      	str	r3, [r7, #64]	@ 0x40
 800306a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800306e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003070:	e841 2300 	strex	r3, r2, [r1]
 8003074:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1e6      	bne.n	800304a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	3308      	adds	r3, #8
 8003082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003084:	6a3b      	ldr	r3, [r7, #32]
 8003086:	e853 3f00 	ldrex	r3, [r3]
 800308a:	61fb      	str	r3, [r7, #28]
   return(result);
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f023 0301 	bic.w	r3, r3, #1
 8003092:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3308      	adds	r3, #8
 800309a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800309c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800309e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030a4:	e841 2300 	strex	r3, r2, [r1]
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e5      	bne.n	800307c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d118      	bne.n	80030ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f023 0310 	bic.w	r3, r3, #16
 80030cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030d6:	61bb      	str	r3, [r7, #24]
 80030d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	6979      	ldr	r1, [r7, #20]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	613b      	str	r3, [r7, #16]
   return(result);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e6      	bne.n	80030b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2220      	movs	r2, #32
 80030ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80030fe:	bf00      	nop
 8003100:	3754      	adds	r7, #84	@ 0x54
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 800310a:	b580      	push	{r7, lr}
 800310c:	b082      	sub	sp, #8
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e03c      	b.n	8003196 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd fb5f 	bl	80007f4 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0201 	bic.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f908 	bl	8003364 <USART_SetConfig>
 8003154:	4603      	mov	r3, r0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d101      	bne.n	800315e <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e01b      	b.n	8003196 <HAL_USART_Init+0x8c>

  /* In Synchronous SPI mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800316c:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800317c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fa3e 	bl	8003610 <USART_CheckIdleState>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b08a      	sub	sp, #40	@ 0x28
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	603b      	str	r3, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	f040 8099 	bne.w	80032ee <HAL_USART_Transmit+0x150>
  {
    if ((pTxData == NULL) || (Size == 0U))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <HAL_USART_Transmit+0x2a>
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e091      	b.n	80032f0 <HAL_USART_Transmit+0x152>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_USART_Transmit+0x3c>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e08a      	b.n	80032f0 <HAL_USART_Transmit+0x152>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2212      	movs	r2, #18
 80031ec:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031f0:	f7fd fc96 	bl	8000b20 <HAL_GetTick>
 80031f4:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	88fa      	ldrh	r2, [r7, #6]
 80031fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    husart->TxXferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	88fa      	ldrh	r2, [r7, #6]
 8003200:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320a:	d108      	bne.n	800321e <HAL_USART_Transmit+0x80>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 8003214:	2300      	movs	r3, #0
 8003216:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	e003      	b.n	8003226 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8003226:	e02a      	b.n	800327e <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2200      	movs	r2, #0
 8003230:	2180      	movs	r1, #128	@ 0x80
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f860 	bl	80032f8 <USART_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e056      	b.n	80032f0 <HAL_USART_Transmit+0x152>
      }
      if (ptxdata8bits == NULL)
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	881a      	ldrh	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003254:	b292      	uxth	r2, r2
 8003256:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata16bits++;
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	3302      	adds	r3, #2
 800325c:	61bb      	str	r3, [r7, #24]
 800325e:	e007      	b.n	8003270 <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	781a      	ldrb	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	851a      	strh	r2, [r3, #40]	@ 0x28
        ptxdata8bits++;
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3301      	adds	r3, #1
 800326e:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (husart->TxXferCount > 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1cf      	bne.n	8003228 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2200      	movs	r2, #0
 8003290:	2140      	movs	r1, #64	@ 0x40
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f830 	bl	80032f8 <USART_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e026      	b.n	80032f0 <HAL_USART_Transmit+0x152>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2240      	movs	r2, #64	@ 0x40
 80032a8:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2208      	movs	r2, #8
 80032b0:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	8b1b      	ldrh	r3, [r3, #24]
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	b292      	uxth	r2, r2
 80032c4:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	8b1b      	ldrh	r3, [r3, #24]
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0210 	orr.w	r2, r2, #16
 80032d6:	b292      	uxth	r2, r2
 80032d8:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e000      	b.n	80032f0 <HAL_USART_Transmit+0x152>
  }
  else
  {
    return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
  }
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3720      	adds	r7, #32
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8003308:	e018      	b.n	800333c <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d014      	beq.n	800333c <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fd fc05 	bl	8000b20 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <USART_WaitOnFlagUntilTimeout+0x30>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

        return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e00f      	b.n	800335c <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69da      	ldr	r2, [r3, #28]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	4013      	ands	r3, r2
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	429a      	cmp	r2, r3
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	79fb      	ldrb	r3, [r7, #7]
 8003356:	429a      	cmp	r2, r3
 8003358:	d0d7      	beq.n	800330a <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}

08003364 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003370:	2300      	movs	r3, #0
 8003372:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003388:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	4b9a      	ldr	r3, [pc, #616]	@ (80035fc <USART_SetConfig+0x298>)
 8003392:	4013      	ands	r3, r2
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	6979      	ldr	r1, [r7, #20]
 800339a:	430b      	orrs	r3, r1
 800339c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in USART Synchronous SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 800339e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80033a2:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a87      	ldr	r2, [pc, #540]	@ (8003600 <USART_SetConfig+0x29c>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d121      	bne.n	800342a <USART_SetConfig+0xc6>
 80033e6:	4b87      	ldr	r3, [pc, #540]	@ (8003604 <USART_SetConfig+0x2a0>)
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d817      	bhi.n	8003424 <USART_SetConfig+0xc0>
 80033f4:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <USART_SetConfig+0x98>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003419 	.word	0x08003419
 8003404:	08003413 	.word	0x08003413
 8003408:	0800341f 	.word	0x0800341f
 800340c:	2301      	movs	r3, #1
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e06b      	b.n	80034ea <USART_SetConfig+0x186>
 8003412:	2302      	movs	r3, #2
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e068      	b.n	80034ea <USART_SetConfig+0x186>
 8003418:	2304      	movs	r3, #4
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e065      	b.n	80034ea <USART_SetConfig+0x186>
 800341e:	2308      	movs	r3, #8
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e062      	b.n	80034ea <USART_SetConfig+0x186>
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e05f      	b.n	80034ea <USART_SetConfig+0x186>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a76      	ldr	r2, [pc, #472]	@ (8003608 <USART_SetConfig+0x2a4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d132      	bne.n	800349a <USART_SetConfig+0x136>
 8003434:	4b73      	ldr	r3, [pc, #460]	@ (8003604 <USART_SetConfig+0x2a0>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b0c      	cmp	r3, #12
 8003440:	d828      	bhi.n	8003494 <USART_SetConfig+0x130>
 8003442:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <USART_SetConfig+0xe4>)
 8003444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003448:	0800347d 	.word	0x0800347d
 800344c:	08003495 	.word	0x08003495
 8003450:	08003495 	.word	0x08003495
 8003454:	08003495 	.word	0x08003495
 8003458:	08003489 	.word	0x08003489
 800345c:	08003495 	.word	0x08003495
 8003460:	08003495 	.word	0x08003495
 8003464:	08003495 	.word	0x08003495
 8003468:	08003483 	.word	0x08003483
 800346c:	08003495 	.word	0x08003495
 8003470:	08003495 	.word	0x08003495
 8003474:	08003495 	.word	0x08003495
 8003478:	0800348f 	.word	0x0800348f
 800347c:	2300      	movs	r3, #0
 800347e:	77fb      	strb	r3, [r7, #31]
 8003480:	e033      	b.n	80034ea <USART_SetConfig+0x186>
 8003482:	2302      	movs	r3, #2
 8003484:	77fb      	strb	r3, [r7, #31]
 8003486:	e030      	b.n	80034ea <USART_SetConfig+0x186>
 8003488:	2304      	movs	r3, #4
 800348a:	77fb      	strb	r3, [r7, #31]
 800348c:	e02d      	b.n	80034ea <USART_SetConfig+0x186>
 800348e:	2308      	movs	r3, #8
 8003490:	77fb      	strb	r3, [r7, #31]
 8003492:	e02a      	b.n	80034ea <USART_SetConfig+0x186>
 8003494:	2310      	movs	r3, #16
 8003496:	77fb      	strb	r3, [r7, #31]
 8003498:	e027      	b.n	80034ea <USART_SetConfig+0x186>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a5b      	ldr	r2, [pc, #364]	@ (800360c <USART_SetConfig+0x2a8>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d120      	bne.n	80034e6 <USART_SetConfig+0x182>
 80034a4:	4b57      	ldr	r3, [pc, #348]	@ (8003604 <USART_SetConfig+0x2a0>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034ae:	2b30      	cmp	r3, #48	@ 0x30
 80034b0:	d013      	beq.n	80034da <USART_SetConfig+0x176>
 80034b2:	2b30      	cmp	r3, #48	@ 0x30
 80034b4:	d814      	bhi.n	80034e0 <USART_SetConfig+0x17c>
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	d009      	beq.n	80034ce <USART_SetConfig+0x16a>
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d810      	bhi.n	80034e0 <USART_SetConfig+0x17c>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <USART_SetConfig+0x164>
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d006      	beq.n	80034d4 <USART_SetConfig+0x170>
 80034c6:	e00b      	b.n	80034e0 <USART_SetConfig+0x17c>
 80034c8:	2300      	movs	r3, #0
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e00d      	b.n	80034ea <USART_SetConfig+0x186>
 80034ce:	2302      	movs	r3, #2
 80034d0:	77fb      	strb	r3, [r7, #31]
 80034d2:	e00a      	b.n	80034ea <USART_SetConfig+0x186>
 80034d4:	2304      	movs	r3, #4
 80034d6:	77fb      	strb	r3, [r7, #31]
 80034d8:	e007      	b.n	80034ea <USART_SetConfig+0x186>
 80034da:	2308      	movs	r3, #8
 80034dc:	77fb      	strb	r3, [r7, #31]
 80034de:	e004      	b.n	80034ea <USART_SetConfig+0x186>
 80034e0:	2310      	movs	r3, #16
 80034e2:	77fb      	strb	r3, [r7, #31]
 80034e4:	e001      	b.n	80034ea <USART_SetConfig+0x186>
 80034e6:	2310      	movs	r3, #16
 80034e8:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d85a      	bhi.n	80035a6 <USART_SetConfig+0x242>
 80034f0:	a201      	add	r2, pc, #4	@ (adr r2, 80034f8 <USART_SetConfig+0x194>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800351d 	.word	0x0800351d
 80034fc:	0800353b 	.word	0x0800353b
 8003500:	08003559 	.word	0x08003559
 8003504:	080035a7 	.word	0x080035a7
 8003508:	08003573 	.word	0x08003573
 800350c:	080035a7 	.word	0x080035a7
 8003510:	080035a7 	.word	0x080035a7
 8003514:	080035a7 	.word	0x080035a7
 8003518:	08003591 	.word	0x08003591
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 800351c:	f7fe fb8c 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 8003520:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	005a      	lsls	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	441a      	add	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	fbb2 f3f3 	udiv	r3, r2, r3
 8003536:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003538:	e038      	b.n	80035ac <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 800353a:	f7fe fb93 	bl	8001c64 <HAL_RCC_GetPCLK2Freq>
 800353e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	005a      	lsls	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	085b      	lsrs	r3, r3, #1
 800354a:	441a      	add	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003556:	e029      	b.n	80035ac <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	085b      	lsrs	r3, r3, #1
 800355e:	f103 73f4 	add.w	r3, r3, #31981568	@ 0x1e80000
 8003562:	f503 4390 	add.w	r3, r3, #18432	@ 0x4800
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6852      	ldr	r2, [r2, #4]
 800356a:	fbb3 f3f2 	udiv	r3, r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8003570:	e01c      	b.n	80035ac <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8003572:	f7fe fac9 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8003576:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	005a      	lsls	r2, r3, #1
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	085b      	lsrs	r3, r3, #1
 8003582:	441a      	add	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	fbb2 f3f3 	udiv	r3, r2, r3
 800358c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 800358e:	e00d      	b.n	80035ac <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 80035a4:	e002      	b.n	80035ac <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	77bb      	strb	r3, [r7, #30]
      break;
 80035aa:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b0f      	cmp	r3, #15
 80035b0:	d916      	bls.n	80035e0 <USART_SetConfig+0x27c>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b8:	d212      	bcs.n	80035e0 <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	f023 030f 	bic.w	r3, r3, #15
 80035c2:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	085b      	lsrs	r3, r3, #1
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	89fb      	ldrh	r3, [r7, #14]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	89fa      	ldrh	r2, [r7, #14]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	e001      	b.n	80035e4 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	639a      	str	r2, [r3, #56]	@ 0x38
  husart->TxISR   = NULL;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	63da      	str	r2, [r3, #60]	@ 0x3c

  return ret;
 80035f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	efff69f3 	.word	0xefff69f3
 8003600:	40013800 	.word	0x40013800
 8003604:	40021000 	.word	0x40021000
 8003608:	40004400 	.word	0x40004400
 800360c:	40004800 	.word	0x40004800

08003610 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800361e:	f7fd fa7f 	bl	8000b20 <HAL_GetTick>
 8003622:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b08      	cmp	r3, #8
 8003630:	d10e      	bne.n	8003650 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003632:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff fe59 	bl	80032f8 <USART_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e01e      	b.n	800368e <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d10e      	bne.n	800367c <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 800365e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fe43 	bl	80032f8 <USART_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e008      	b.n	800368e <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <memset>:
 8003696:	4402      	add	r2, r0
 8003698:	4603      	mov	r3, r0
 800369a:	4293      	cmp	r3, r2
 800369c:	d100      	bne.n	80036a0 <memset+0xa>
 800369e:	4770      	bx	lr
 80036a0:	f803 1b01 	strb.w	r1, [r3], #1
 80036a4:	e7f9      	b.n	800369a <memset+0x4>
	...

080036a8 <__libc_init_array>:
 80036a8:	b570      	push	{r4, r5, r6, lr}
 80036aa:	4d0d      	ldr	r5, [pc, #52]	@ (80036e0 <__libc_init_array+0x38>)
 80036ac:	4c0d      	ldr	r4, [pc, #52]	@ (80036e4 <__libc_init_array+0x3c>)
 80036ae:	1b64      	subs	r4, r4, r5
 80036b0:	10a4      	asrs	r4, r4, #2
 80036b2:	2600      	movs	r6, #0
 80036b4:	42a6      	cmp	r6, r4
 80036b6:	d109      	bne.n	80036cc <__libc_init_array+0x24>
 80036b8:	4d0b      	ldr	r5, [pc, #44]	@ (80036e8 <__libc_init_array+0x40>)
 80036ba:	4c0c      	ldr	r4, [pc, #48]	@ (80036ec <__libc_init_array+0x44>)
 80036bc:	f000 f818 	bl	80036f0 <_init>
 80036c0:	1b64      	subs	r4, r4, r5
 80036c2:	10a4      	asrs	r4, r4, #2
 80036c4:	2600      	movs	r6, #0
 80036c6:	42a6      	cmp	r6, r4
 80036c8:	d105      	bne.n	80036d6 <__libc_init_array+0x2e>
 80036ca:	bd70      	pop	{r4, r5, r6, pc}
 80036cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036d0:	4798      	blx	r3
 80036d2:	3601      	adds	r6, #1
 80036d4:	e7ee      	b.n	80036b4 <__libc_init_array+0xc>
 80036d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036da:	4798      	blx	r3
 80036dc:	3601      	adds	r6, #1
 80036de:	e7f2      	b.n	80036c6 <__libc_init_array+0x1e>
 80036e0:	08003758 	.word	0x08003758
 80036e4:	08003758 	.word	0x08003758
 80036e8:	08003758 	.word	0x08003758
 80036ec:	0800375c 	.word	0x0800375c

080036f0 <_init>:
 80036f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036f2:	bf00      	nop
 80036f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036f6:	bc08      	pop	{r3}
 80036f8:	469e      	mov	lr, r3
 80036fa:	4770      	bx	lr

080036fc <_fini>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	bf00      	nop
 8003700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003702:	bc08      	pop	{r3}
 8003704:	469e      	mov	lr, r3
 8003706:	4770      	bx	lr
