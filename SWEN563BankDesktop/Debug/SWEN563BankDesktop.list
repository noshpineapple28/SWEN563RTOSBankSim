
SWEN563BankDesktop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dfc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007f8c  08007f8c  00008f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008084  08008084  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008084  08008084  00009084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800808c  0800808c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800808c  0800808c  0000908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008090  08008090  00009090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008094  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005ef0  20000060  080080f4  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005f50  080080f4  0000af50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd34  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004114  00000000  00000000  00027dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001908  00000000  00000000  0002bed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001360  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029106  00000000  00000000  0002eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfe2  00000000  00000000  00057c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdf70  00000000  00000000  00074c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172b98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e08  00000000  00000000  00172bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001799e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f74 	.word	0x08007f74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08007f74 	.word	0x08007f74

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <puts>:
 *
 * @param str	a pointer to a string to print
 *
 * @return		the number of characters printed
 */
int puts (const char* str) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	int ret = sprintf (BUFFER, "%s\r\n", str);
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	4908      	ldr	r1, [pc, #32]	@ (800058c <puts+0x2c>)
 800056c:	4808      	ldr	r0, [pc, #32]	@ (8000590 <puts+0x30>)
 800056e:	f006 ffeb 	bl	8007548 <siprintf>
 8000572:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, (unsigned char *) BUFFER, ret, 100);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	b29a      	uxth	r2, r3
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	4905      	ldr	r1, [pc, #20]	@ (8000590 <puts+0x30>)
 800057c:	4805      	ldr	r0, [pc, #20]	@ (8000594 <puts+0x34>)
 800057e:	f002 feab 	bl	80032d8 <HAL_UART_Transmit>
	return ret;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	08007f8c 	.word	0x08007f8c
 8000590:	20000104 	.word	0x20000104
 8000594:	2000007c 	.word	0x2000007c

08000598 <printf>:
 * @param format	a pointer to a string to print, along with format chars
 * @param ...		data values to insert into format char positions
 *
 * @return		the number of characters printed
 */
int printf (const char* format, ...) {
 8000598:	b40f      	push	{r0, r1, r2, r3}
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
	// formats the string
	va_list aptr;
	va_start(aptr, format);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	603b      	str	r3, [r7, #0]
	int ret = vsprintf(BUFFER, format, aptr);
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	6939      	ldr	r1, [r7, #16]
 80005aa:	4809      	ldr	r0, [pc, #36]	@ (80005d0 <printf+0x38>)
 80005ac:	f007 f802 	bl	80075b4 <vsiprintf>
 80005b0:	6078      	str	r0, [r7, #4]
	va_end(aptr);

	// writes to output
	HAL_UART_Transmit(&huart2, (unsigned char *) BUFFER, ret, 100);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	4905      	ldr	r1, [pc, #20]	@ (80005d0 <printf+0x38>)
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <printf+0x3c>)
 80005bc:	f002 fe8c 	bl	80032d8 <HAL_UART_Transmit>

	// return string length
	return(ret);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005cc:	b004      	add	sp, #16
 80005ce:	4770      	bx	lr
 80005d0:	20000104 	.word	0x20000104
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <MX_USART2_UART_Init+0x5c>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 800061c:	f002 fe0e 	bl	800323c <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 fa34 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000007c 	.word	0x2000007c
 8000634:	40004400 	.word	0x40004400

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fc0c 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f848 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 f8c2 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000648:	f7ff ffc6 	bl	80005d8 <MX_USART2_UART_Init>
  MX_RNG_Init();
 800064c:	f000 f8aa 	bl	80007a4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000650:	f003 ff54 	bl	80044fc <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  CustomerQueue = xQueueCreate(100, sizeof(uint32_t));
 8000654:	2200      	movs	r2, #0
 8000656:	2104      	movs	r1, #4
 8000658:	2064      	movs	r0, #100	@ 0x64
 800065a:	f004 f9fa 	bl	8004a52 <xQueueGenericCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <main+0x7c>)
 8000662:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  CustomerMutex = xSemaphoreCreateMutex();
 8000664:	2001      	movs	r0, #1
 8000666:	f004 fa6c 	bl	8004b42 <xQueueCreateMutex>
 800066a:	4603      	mov	r3, r0
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <main+0x80>)
 800066e:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  attr.stack_size = 1000;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <main+0x84>)
 8000672:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000676:	615a      	str	r2, [r3, #20]
  osThreadNew(TellerTask, (void *) 0, &attr);
 8000678:	4a10      	ldr	r2, [pc, #64]	@ (80006bc <main+0x84>)
 800067a:	2100      	movs	r1, #0
 800067c:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <main+0x88>)
 800067e:	f003 ff87 	bl	8004590 <osThreadNew>
  osThreadNew(TellerTask, (void *) 1, &attr);
 8000682:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <main+0x84>)
 8000684:	2101      	movs	r1, #1
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <main+0x88>)
 8000688:	f003 ff82 	bl	8004590 <osThreadNew>
  osThreadNew(TellerTask, (void *) 2, &attr);
 800068c:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <main+0x84>)
 800068e:	2102      	movs	r1, #2
 8000690:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <main+0x88>)
 8000692:	f003 ff7d 	bl	8004590 <osThreadNew>
  osThreadNew(QueueTask, "Queue", &attr);
 8000696:	4a09      	ldr	r2, [pc, #36]	@ (80006bc <main+0x84>)
 8000698:	490a      	ldr	r1, [pc, #40]	@ (80006c4 <main+0x8c>)
 800069a:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <main+0x90>)
 800069c:	f003 ff78 	bl	8004590 <osThreadNew>
  osThreadNew(DisplayTask, "Display", &attr);
 80006a0:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <main+0x84>)
 80006a2:	490a      	ldr	r1, [pc, #40]	@ (80006cc <main+0x94>)
 80006a4:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <main+0x98>)
 80006a6:	f003 ff73 	bl	8004590 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006aa:	f003 ff4b 	bl	8004544 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <main+0x76>
 80006b2:	bf00      	nop
 80006b4:	20000178 	.word	0x20000178
 80006b8:	2000017c 	.word	0x2000017c
 80006bc:	20000184 	.word	0x20000184
 80006c0:	080008b1 	.word	0x080008b1
 80006c4:	08007fa4 	.word	0x08007fa4
 80006c8:	08000965 	.word	0x08000965
 80006cc:	08007fac 	.word	0x08007fac
 80006d0:	080009c9 	.word	0x080009c9

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	@ 0x58
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2244      	movs	r2, #68	@ 0x44
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f006 ff70 	bl	80075c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006fa:	f000 ff2f 	bl	800155c <HAL_PWREx_ControlVoltageScaling>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000704:	f000 f9c5 	bl	8000a92 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000708:	f000 ff0a 	bl	8001520 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <SystemClock_Config+0xcc>)
 800070e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000712:	4a23      	ldr	r2, [pc, #140]	@ (80007a0 <SystemClock_Config+0xcc>)
 8000714:	f023 0318 	bic.w	r3, r3, #24
 8000718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800071c:	2316      	movs	r3, #22
 800071e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000728:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2310      	movs	r3, #16
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000736:	2360      	movs	r3, #96	@ 0x60
 8000738:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073e:	2302      	movs	r3, #2
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000746:	230a      	movs	r3, #10
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4618      	mov	r0, r3
 800075c:	f000 ff54 	bl	8001608 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 f994 	bl	8000a92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2303      	movs	r3, #3
 8000770:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	2104      	movs	r1, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fb1c 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800078e:	f000 f980 	bl	8000a92 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000792:	f002 f855 	bl	8002840 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000796:	bf00      	nop
 8000798:	3758      	adds	r7, #88	@ 0x58
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_RNG_Init+0x20>)
 80007aa:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <MX_RNG_Init+0x24>)
 80007ac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_RNG_Init+0x20>)
 80007b0:	f002 fa28 	bl	8002c04 <HAL_RNG_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80007ba:	f000 f96a 	bl	8000a92 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000168 	.word	0x20000168
 80007c8:	50060800 	.word	0x50060800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000890 <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a24      	ldr	r2, [pc, #144]	@ (8000890 <MX_GPIO_Init+0xc4>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a1e      	ldr	r2, [pc, #120]	@ (8000890 <MX_GPIO_Init+0xc4>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_GPIO_Init+0xc4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_GPIO_Init+0xc4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a18      	ldr	r2, [pc, #96]	@ (8000890 <MX_GPIO_Init+0xc4>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_GPIO_Init+0xc4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084a:	f000 fe51 	bl	80014f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000854:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	480b      	ldr	r0, [pc, #44]	@ (8000894 <MX_GPIO_Init+0xc8>)
 8000866:	f000 fc99 	bl	800119c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086a:	2320      	movs	r3, #32
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f000 fc8a 	bl	800119c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	@ 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000
 8000894:	48000800 	.word	0x48000800

08000898 <generate_random_number>:

/* USER CODE BEGIN 4 */

uint32_t generate_random_number()
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	return RNG->DR;
 800089c:	4b03      	ldr	r3, [pc, #12]	@ (80008ac <generate_random_number+0x14>)
 800089e:	689b      	ldr	r3, [r3, #8]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	50060800 	.word	0x50060800

080008b0 <TellerTask>:

void TellerTask (void *params)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	uint8_t teller_id = (intptr_t) params;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	75fb      	strb	r3, [r7, #23]
	uint32_t customer = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
	uint32_t rnd;

	while (1)
	{
		xSemaphoreTake(CustomerMutex, portMAX_DELAY);
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <TellerTask+0xa0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f04f 31ff 	mov.w	r1, #4294967295
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 fbd5 	bl	8005078 <xQueueSemaphoreTake>
		// take customer but, if none wait a minute
		if (xQueueReceive(CustomerQueue, &customer, portMAX_DELAY) == pdTRUE)
 80008ce:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <TellerTask+0xa4>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f107 010c 	add.w	r1, r7, #12
 80008d6:	f04f 32ff 	mov.w	r2, #4294967295
 80008da:	4618      	mov	r0, r3
 80008dc:	f004 faea 	bl	8004eb4 <xQueueReceive>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d128      	bne.n	8000938 <TellerTask+0x88>
		{
			rnd = generate_random_number() % 16; // 30 secs to 8 mins, 30 sec intervals
 80008e6:	f7ff ffd7 	bl	8000898 <generate_random_number>
 80008ea:	4603      	mov	r3, r0
 80008ec:	f003 030f 	and.w	r3, r3, #15
 80008f0:	613b      	str	r3, [r7, #16]
			xSemaphoreGive(CustomerMutex);
 80008f2:	4b17      	ldr	r3, [pc, #92]	@ (8000950 <TellerTask+0xa0>)
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	f004 f93a 	bl	8004b74 <xQueueGenericSend>
			queue_count--;
 8000900:	4b15      	ldr	r3, [pc, #84]	@ (8000958 <TellerTask+0xa8>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	3b01      	subs	r3, #1
 8000906:	b29a      	uxth	r2, r3
 8000908:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <TellerTask+0xa8>)
 800090a:	801a      	strh	r2, [r3, #0]
			teller_states[teller_id] = 1;
 800090c:	7dfb      	ldrb	r3, [r7, #23]
 800090e:	4a13      	ldr	r2, [pc, #76]	@ (800095c <TellerTask+0xac>)
 8000910:	2101      	movs	r1, #1
 8000912:	54d1      	strb	r1, [r2, r3]
			// 30 sec intervals
			vTaskDelay(pdMS_TO_TICKS((SIM_MINUTE_TO_MILIS / 2) * (rnd + 1)));
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	3301      	adds	r3, #1
 8000918:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <TellerTask+0xb0>)
 8000922:	fba2 2303 	umull	r2, r3, r2, r3
 8000926:	099b      	lsrs	r3, r3, #6
 8000928:	4618      	mov	r0, r3
 800092a:	f004 fff9 	bl	8005920 <vTaskDelay>
			teller_states[teller_id] = 0;
 800092e:	7dfb      	ldrb	r3, [r7, #23]
 8000930:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <TellerTask+0xac>)
 8000932:	2100      	movs	r1, #0
 8000934:	54d1      	strb	r1, [r2, r3]
 8000936:	e7c3      	b.n	80008c0 <TellerTask+0x10>
		}
		else
		{
			xSemaphoreGive(CustomerMutex);
 8000938:	4b05      	ldr	r3, [pc, #20]	@ (8000950 <TellerTask+0xa0>)
 800093a:	6818      	ldr	r0, [r3, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	f004 f917 	bl	8004b74 <xQueueGenericSend>
			vTaskDelay(pdMS_TO_TICKS(SIM_MINUTE_TO_MILIS));
 8000946:	2064      	movs	r0, #100	@ 0x64
 8000948:	f004 ffea 	bl	8005920 <vTaskDelay>
		xSemaphoreTake(CustomerMutex, portMAX_DELAY);
 800094c:	e7b8      	b.n	80008c0 <TellerTask+0x10>
 800094e:	bf00      	nop
 8000950:	2000017c 	.word	0x2000017c
 8000954:	20000178 	.word	0x20000178
 8000958:	20000180 	.word	0x20000180
 800095c:	200001a8 	.word	0x200001a8
 8000960:	10624dd3 	.word	0x10624dd3

08000964 <QueueTask>:
		}
	}
}

void QueueTask (void *params)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	uint32_t rnd;

	for (;;)
	{
		// determine how long to wait to add next customer
		rnd = generate_random_number() % 4;
 800096c:	f7ff ff94 	bl	8000898 <generate_random_number>
 8000970:	4603      	mov	r3, r0
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	60fb      	str	r3, [r7, #12]
		xDelay = pdMS_TO_TICKS(SIM_MINUTE_TO_MILIS  * (rnd + 1));
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3301      	adds	r3, #1
 800097c:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <QueueTask+0x54>)
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	4a0e      	ldr	r2, [pc, #56]	@ (80009bc <QueueTask+0x58>)
 8000984:	fba2 2303 	umull	r2, r3, r2, r3
 8000988:	099b      	lsrs	r3, r3, #6
 800098a:	60bb      	str	r3, [r7, #8]
//		xDelay = pdMS_TO_TICKS(1000);

		// attempt to add customer
		if (xQueueSend(CustomerQueue, (void *) 1, portMAX_DELAY) == pdPASS)
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <QueueTask+0x5c>)
 800098e:	6818      	ldr	r0, [r3, #0]
 8000990:	2300      	movs	r3, #0
 8000992:	f04f 32ff 	mov.w	r2, #4294967295
 8000996:	2101      	movs	r1, #1
 8000998:	f004 f8ec 	bl	8004b74 <xQueueGenericSend>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d105      	bne.n	80009ae <QueueTask+0x4a>
		{
			queue_count++;
 80009a2:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <QueueTask+0x60>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <QueueTask+0x60>)
 80009ac:	801a      	strh	r2, [r3, #0]
		}
		vTaskDelay(xDelay);
 80009ae:	68b8      	ldr	r0, [r7, #8]
 80009b0:	f004 ffb6 	bl	8005920 <vTaskDelay>
		rnd = generate_random_number() % 4;
 80009b4:	e7da      	b.n	800096c <QueueTask+0x8>
 80009b6:	bf00      	nop
 80009b8:	000186a0 	.word	0x000186a0
 80009bc:	10624dd3 	.word	0x10624dd3
 80009c0:	20000178 	.word	0x20000178
 80009c4:	20000180 	.word	0x20000180

080009c8 <DisplayTask>:
	}
}

void DisplayTask (void *params)
{
 80009c8:	b5b0      	push	{r4, r5, r7, lr}
 80009ca:	b088      	sub	sp, #32
 80009cc:	af04      	add	r7, sp, #16
 80009ce:	6078      	str	r0, [r7, #4]
	uint32_t minutes;
	uint8_t hrs;
	uint8_t mins;

	printf("\r\n");
 80009d0:	4821      	ldr	r0, [pc, #132]	@ (8000a58 <DisplayTask+0x90>)
 80009d2:	f7ff fdc5 	bl	8000560 <puts>
	while (1)
	{
		minutes = xTaskGetTickCount() / pdMS_TO_TICKS(100);
 80009d6:	f005 f8f5 	bl	8005bc4 <xTaskGetTickCount>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a1f      	ldr	r2, [pc, #124]	@ (8000a5c <DisplayTask+0x94>)
 80009de:	fba2 2303 	umull	r2, r3, r2, r3
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	60fb      	str	r3, [r7, #12]
		mins = minutes % 60;
 80009e6:	68f9      	ldr	r1, [r7, #12]
 80009e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <DisplayTask+0x98>)
 80009ea:	fba3 2301 	umull	r2, r3, r3, r1
 80009ee:	095a      	lsrs	r2, r3, #5
 80009f0:	4613      	mov	r3, r2
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	1a9b      	subs	r3, r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	1aca      	subs	r2, r1, r3
 80009fa:	4613      	mov	r3, r2
 80009fc:	72fb      	strb	r3, [r7, #11]
		hrs = (((minutes / 60) + 8) % 12) + 1;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	4a17      	ldr	r2, [pc, #92]	@ (8000a60 <DisplayTask+0x98>)
 8000a02:	fba2 2303 	umull	r2, r3, r2, r3
 8000a06:	095b      	lsrs	r3, r3, #5
 8000a08:	f103 0108 	add.w	r1, r3, #8
 8000a0c:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <DisplayTask+0x9c>)
 8000a0e:	fba3 2301 	umull	r2, r3, r3, r1
 8000a12:	08da      	lsrs	r2, r3, #3
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	1aca      	subs	r2, r1, r3
 8000a1e:	b2d3      	uxtb	r3, r2
 8000a20:	3301      	adds	r3, #1
 8000a22:	72bb      	strb	r3, [r7, #10]

		printf("TIME: %02d:%02d\tIN QUEUE[%02d]\tTELLER STATUS? %d %d %d\r", hrs, mins, queue_count, teller_states[0], teller_states[1], teller_states[2]);
 8000a24:	7ab9      	ldrb	r1, [r7, #10]
 8000a26:	7afa      	ldrb	r2, [r7, #11]
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <DisplayTask+0xa0>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	461d      	mov	r5, r3
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <DisplayTask+0xa4>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	4618      	mov	r0, r3
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <DisplayTask+0xa4>)
 8000a36:	785b      	ldrb	r3, [r3, #1]
 8000a38:	461c      	mov	r4, r3
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <DisplayTask+0xa4>)
 8000a3c:	789b      	ldrb	r3, [r3, #2]
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	9401      	str	r4, [sp, #4]
 8000a42:	9000      	str	r0, [sp, #0]
 8000a44:	462b      	mov	r3, r5
 8000a46:	480a      	ldr	r0, [pc, #40]	@ (8000a70 <DisplayTask+0xa8>)
 8000a48:	f7ff fda6 	bl	8000598 <printf>
		vTaskDelay(pdMS_TO_TICKS(SIM_MINUTE_TO_MILIS));
 8000a4c:	2064      	movs	r0, #100	@ 0x64
 8000a4e:	f004 ff67 	bl	8005920 <vTaskDelay>
		minutes = xTaskGetTickCount() / pdMS_TO_TICKS(100);
 8000a52:	bf00      	nop
 8000a54:	e7bf      	b.n	80009d6 <DisplayTask+0xe>
 8000a56:	bf00      	nop
 8000a58:	08007fb4 	.word	0x08007fb4
 8000a5c:	51eb851f 	.word	0x51eb851f
 8000a60:	88888889 	.word	0x88888889
 8000a64:	aaaaaaab 	.word	0xaaaaaaab
 8000a68:	20000180 	.word	0x20000180
 8000a6c:	200001a8 	.word	0x200001a8
 8000a70:	08007fb8 	.word	0x08007fb8

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 fa07 	bl	8000e98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a96:	b672      	cpsid	i
}
 8000a98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9a:	bf00      	nop
 8000a9c:	e7fd      	b.n	8000a9a <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b11      	ldr	r3, [pc, #68]	@ (8000aec <HAL_MspInit+0x4c>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aaa:	4a10      	ldr	r2, [pc, #64]	@ (8000aec <HAL_MspInit+0x4c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aca:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <HAL_MspInit+0x4c>)
 8000acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	210f      	movs	r1, #15
 8000ada:	f06f 0001 	mvn.w	r0, #1
 8000ade:	f000 fab3 	bl	8001048 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0a6      	sub	sp, #152	@ 0x98
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	f107 0310 	add.w	r3, r7, #16
 8000afc:	2288      	movs	r2, #136	@ 0x88
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f006 fd61 	bl	80075c8 <memset>
  if(hrng->Instance==RNG)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <HAL_RNG_MspInit+0x64>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d11c      	bne.n	8000b4a <HAL_RNG_MspInit+0x5a>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000b10:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000b14:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8000b16:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 8000b1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fba2 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_RNG_MspInit+0x42>
    {
      Error_Handler();
 8000b2e:	f7ff ffb0 	bl	8000a92 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b32:	4b09      	ldr	r3, [pc, #36]	@ (8000b58 <HAL_RNG_MspInit+0x68>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b36:	4a08      	ldr	r2, [pc, #32]	@ (8000b58 <HAL_RNG_MspInit+0x68>)
 8000b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3e:	4b06      	ldr	r3, [pc, #24]	@ (8000b58 <HAL_RNG_MspInit+0x68>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3798      	adds	r7, #152	@ 0x98
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	50060800 	.word	0x50060800
 8000b58:	40021000 	.word	0x40021000

08000b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0ac      	sub	sp, #176	@ 0xb0
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b64:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
 8000b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	2288      	movs	r2, #136	@ 0x88
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f006 fd23 	bl	80075c8 <memset>
  if(huart->Instance==USART2)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a25      	ldr	r2, [pc, #148]	@ (8000c1c <HAL_UART_MspInit+0xc0>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d143      	bne.n	8000c14 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fb67 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba4:	f7ff ff75 	bl	8000a92 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c20 <HAL_UART_MspInit+0xc4>)
 8000baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bac:	4a1c      	ldr	r2, [pc, #112]	@ (8000c20 <HAL_UART_MspInit+0xc4>)
 8000bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c20 <HAL_UART_MspInit+0xc4>)
 8000bb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b17      	ldr	r3, [pc, #92]	@ (8000c20 <HAL_UART_MspInit+0xc4>)
 8000bc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc4:	4a16      	ldr	r2, [pc, #88]	@ (8000c20 <HAL_UART_MspInit+0xc4>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bcc:	4b14      	ldr	r3, [pc, #80]	@ (8000c20 <HAL_UART_MspInit+0xc4>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c00:	f000 facc 	bl	800119c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2105      	movs	r1, #5
 8000c08:	2026      	movs	r0, #38	@ 0x26
 8000c0a:	f000 fa1d 	bl	8001048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c0e:	2026      	movs	r0, #38	@ 0x26
 8000c10:	f000 fa36 	bl	8001080 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c14:	bf00      	nop
 8000c16:	37b0      	adds	r7, #176	@ 0xb0
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40004400 	.word	0x40004400
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08e      	sub	sp, #56	@ 0x38
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000c32:	4b34      	ldr	r3, [pc, #208]	@ (8000d04 <HAL_InitTick+0xe0>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c36:	4a33      	ldr	r2, [pc, #204]	@ (8000d04 <HAL_InitTick+0xe0>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c3e:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <HAL_InitTick+0xe0>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c4a:	f107 0210 	add.w	r2, r7, #16
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fa77 	bl	8002148 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c5a:	6a3b      	ldr	r3, [r7, #32]
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d103      	bne.n	8000c6c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c64:	f001 fa44 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8000c68:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c6a:	e004      	b.n	8000c76 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c6c:	f001 fa40 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8000c70:	4603      	mov	r3, r0
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c78:	4a23      	ldr	r2, [pc, #140]	@ (8000d08 <HAL_InitTick+0xe4>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	0c9b      	lsrs	r3, r3, #18
 8000c80:	3b01      	subs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000c84:	4b21      	ldr	r3, [pc, #132]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000c86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000c8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c92:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000c94:	4a1d      	ldr	r2, [pc, #116]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c98:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000cac:	4817      	ldr	r0, [pc, #92]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000cae:	f002 f800 	bl	8002cb2 <HAL_TIM_Base_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d11b      	bne.n	8000cf8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000cc0:	4812      	ldr	r0, [pc, #72]	@ (8000d0c <HAL_InitTick+0xe8>)
 8000cc2:	f002 f857 	bl	8002d74 <HAL_TIM_Base_Start_IT>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ccc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d111      	bne.n	8000cf8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cd4:	201c      	movs	r0, #28
 8000cd6:	f000 f9d3 	bl	8001080 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b0f      	cmp	r3, #15
 8000cde:	d808      	bhi.n	8000cf2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	201c      	movs	r0, #28
 8000ce6:	f000 f9af 	bl	8001048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cea:	4a09      	ldr	r2, [pc, #36]	@ (8000d10 <HAL_InitTick+0xec>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	e002      	b.n	8000cf8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3738      	adds	r7, #56	@ 0x38
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	200001ac 	.word	0x200001ac
 8000d10:	20000004 	.word	0x20000004

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d50:	4802      	ldr	r0, [pc, #8]	@ (8000d5c <TIM2_IRQHandler+0x10>)
 8000d52:	f002 f87f 	bl	8002e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200001ac 	.word	0x200001ac

08000d60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <USART2_IRQHandler+0x10>)
 8000d66:	f002 fb41 	bl	80033ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000007c 	.word	0x2000007c

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	@ (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	@ (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f006 fc6e 	bl	8007684 <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	@ (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20018000 	.word	0x20018000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	200001f8 	.word	0x200001f8
 8000ddc:	20005f50 	.word	0x20005f50

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	@ (8000e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	@ (8000e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	@ (8000e50 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f006 fc2d 	bl	8007690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e36:	f7ff fbff 	bl	8000638 <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e48:	08008094 	.word	0x08008094
  ldr r2, =_sbss
 8000e4c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e50:	20005f50 	.word	0x20005f50

08000e54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC1_2_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <HAL_Init+0x3c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <HAL_Init+0x3c>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6e:	2003      	movs	r0, #3
 8000e70:	f000 f8df 	bl	8001032 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e74:	200f      	movs	r0, #15
 8000e76:	f7ff fed5 	bl	8000c24 <HAL_InitTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e80:	2301      	movs	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	e001      	b.n	8000e8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e86:	f7ff fe0b 	bl	8000aa0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_IncTick+0x24>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	4a04      	ldr	r2, [pc, #16]	@ (8000ebc <HAL_IncTick+0x24>)
 8000eaa:	6013      	str	r3, [r2, #0]
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	200001fc 	.word	0x200001fc

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	200001fc 	.word	0x200001fc

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	@ (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	6039      	str	r1, [r7, #0]
 8000f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	db0a      	blt.n	8000fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	b2da      	uxtb	r2, r3
 8000f90:	490c      	ldr	r1, [pc, #48]	@ (8000fc4 <__NVIC_SetPriority+0x4c>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	0112      	lsls	r2, r2, #4
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa0:	e00a      	b.n	8000fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <__NVIC_SetPriority+0x50>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	3b04      	subs	r3, #4
 8000fb0:	0112      	lsls	r2, r2, #4
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	761a      	strb	r2, [r3, #24]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000e100 	.word	0xe000e100
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2b04      	cmp	r3, #4
 8000fe8:	bf28      	it	cs
 8000fea:	2304      	movcs	r3, #4
 8000fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d902      	bls.n	8000ffc <NVIC_EncodePriority+0x30>
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3b03      	subs	r3, #3
 8000ffa:	e000      	b.n	8000ffe <NVIC_EncodePriority+0x32>
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43da      	mvns	r2, r3
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	401a      	ands	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	fa01 f303 	lsl.w	r3, r1, r3
 800101e:	43d9      	mvns	r1, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	4313      	orrs	r3, r2
         );
}
 8001026:	4618      	mov	r0, r3
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ff4c 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
 8001054:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800105a:	f7ff ff61 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 800105e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	68b9      	ldr	r1, [r7, #8]
 8001064:	6978      	ldr	r0, [r7, #20]
 8001066:	f7ff ffb1 	bl	8000fcc <NVIC_EncodePriority>
 800106a:	4602      	mov	r2, r0
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff80 	bl	8000f78 <__NVIC_SetPriority>
}
 8001078:	bf00      	nop
 800107a:	3718      	adds	r7, #24
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff ff54 	bl	8000f3c <__NVIC_EnableIRQ>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d008      	beq.n	80010c6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2204      	movs	r2, #4
 80010b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e022      	b.n	800110c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 020e 	bic.w	r2, r2, #14
 80010d4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0201 	bic.w	r2, r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f003 021c 	and.w	r2, r3, #28
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	2101      	movs	r1, #1
 80010f4:	fa01 f202 	lsl.w	r2, r1, r2
 80010f8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d005      	beq.n	800113c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2204      	movs	r2, #4
 8001134:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e029      	b.n	8001190 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 020e 	bic.w	r2, r2, #14
 800114a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001160:	f003 021c 	and.w	r2, r3, #28
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001168:	2101      	movs	r1, #1
 800116a:	fa01 f202 	lsl.w	r2, r1, r2
 800116e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	4798      	blx	r3
    }
  }
  return status;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a6:	2300      	movs	r3, #0
 80011a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011aa:	e17f      	b.n	80014ac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2101      	movs	r1, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8171 	beq.w	80014a6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d005      	beq.n	80011dc <HAL_GPIO_Init+0x40>
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d130      	bne.n	800123e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001212:	2201      	movs	r2, #1
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 0201 	and.w	r2, r3, #1
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4313      	orrs	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 0303 	and.w	r3, r3, #3
 8001246:	2b03      	cmp	r3, #3
 8001248:	d118      	bne.n	800127c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001250:	2201      	movs	r2, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4013      	ands	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	08db      	lsrs	r3, r3, #3
 8001266:	f003 0201 	and.w	r2, r3, #1
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b03      	cmp	r3, #3
 8001286:	d017      	beq.n	80012b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d123      	bne.n	800130c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	08da      	lsrs	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3208      	adds	r2, #8
 80012cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	220f      	movs	r2, #15
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	691a      	ldr	r2, [r3, #16]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	08da      	lsrs	r2, r3, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3208      	adds	r2, #8
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80ac 	beq.w	80014a6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b5f      	ldr	r3, [pc, #380]	@ (80014cc <HAL_GPIO_Init+0x330>)
 8001350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001352:	4a5e      	ldr	r2, [pc, #376]	@ (80014cc <HAL_GPIO_Init+0x330>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6613      	str	r3, [r2, #96]	@ 0x60
 800135a:	4b5c      	ldr	r3, [pc, #368]	@ (80014cc <HAL_GPIO_Init+0x330>)
 800135c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001366:	4a5a      	ldr	r2, [pc, #360]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001390:	d025      	beq.n	80013de <HAL_GPIO_Init+0x242>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a4f      	ldr	r2, [pc, #316]	@ (80014d4 <HAL_GPIO_Init+0x338>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01f      	beq.n	80013da <HAL_GPIO_Init+0x23e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a4e      	ldr	r2, [pc, #312]	@ (80014d8 <HAL_GPIO_Init+0x33c>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d019      	beq.n	80013d6 <HAL_GPIO_Init+0x23a>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4d      	ldr	r2, [pc, #308]	@ (80014dc <HAL_GPIO_Init+0x340>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d013      	beq.n	80013d2 <HAL_GPIO_Init+0x236>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	@ (80014e0 <HAL_GPIO_Init+0x344>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d00d      	beq.n	80013ce <HAL_GPIO_Init+0x232>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4b      	ldr	r2, [pc, #300]	@ (80014e4 <HAL_GPIO_Init+0x348>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d007      	beq.n	80013ca <HAL_GPIO_Init+0x22e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4a      	ldr	r2, [pc, #296]	@ (80014e8 <HAL_GPIO_Init+0x34c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_GPIO_Init+0x22a>
 80013c2:	2306      	movs	r3, #6
 80013c4:	e00c      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013c6:	2307      	movs	r3, #7
 80013c8:	e00a      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e008      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013ce:	2304      	movs	r3, #4
 80013d0:	e006      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013d2:	2303      	movs	r3, #3
 80013d4:	e004      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <HAL_GPIO_Init+0x244>
 80013de:	2300      	movs	r3, #0
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	f002 0203 	and.w	r2, r2, #3
 80013e6:	0092      	lsls	r2, r2, #2
 80013e8:	4093      	lsls	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013f0:	4937      	ldr	r1, [pc, #220]	@ (80014d0 <HAL_GPIO_Init+0x334>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	089b      	lsrs	r3, r3, #2
 80013f6:	3302      	adds	r3, #2
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013fe:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <HAL_GPIO_Init+0x350>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001422:	4a32      	ldr	r2, [pc, #200]	@ (80014ec <HAL_GPIO_Init+0x350>)
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001428:	4b30      	ldr	r3, [pc, #192]	@ (80014ec <HAL_GPIO_Init+0x350>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800144c:	4a27      	ldr	r2, [pc, #156]	@ (80014ec <HAL_GPIO_Init+0x350>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <HAL_GPIO_Init+0x350>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001476:	4a1d      	ldr	r2, [pc, #116]	@ (80014ec <HAL_GPIO_Init+0x350>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800147c:	4b1b      	ldr	r3, [pc, #108]	@ (80014ec <HAL_GPIO_Init+0x350>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014a0:	4a12      	ldr	r2, [pc, #72]	@ (80014ec <HAL_GPIO_Init+0x350>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	3301      	adds	r3, #1
 80014aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa22 f303 	lsr.w	r3, r2, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f47f ae78 	bne.w	80011ac <HAL_GPIO_Init+0x10>
  }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	371c      	adds	r7, #28
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	40010000 	.word	0x40010000
 80014d4:	48000400 	.word	0x48000400
 80014d8:	48000800 	.word	0x48000800
 80014dc:	48000c00 	.word	0x48000c00
 80014e0:	48001000 	.word	0x48001000
 80014e4:	48001400 	.word	0x48001400
 80014e8:	48001800 	.word	0x48001800
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
 80014fc:	4613      	mov	r3, r2
 80014fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001500:	787b      	ldrb	r3, [r7, #1]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001506:	887a      	ldrh	r2, [r7, #2]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800150c:	e002      	b.n	8001514 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800150e:	887a      	ldrh	r2, [r7, #2]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001524:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800152a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40007000 	.word	0x40007000

08001540 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001544:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <HAL_PWREx_GetVoltageRange+0x18>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	40007000 	.word	0x40007000

0800155c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800156a:	d130      	bne.n	80015ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800156c:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001578:	d038      	beq.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001582:	4a1e      	ldr	r2, [pc, #120]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001588:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800158a:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2232      	movs	r2, #50	@ 0x32
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	0c9b      	lsrs	r3, r3, #18
 800159c:	3301      	adds	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a0:	e002      	b.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3b01      	subs	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b4:	d102      	bne.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f2      	bne.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015c8:	d110      	bne.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e00f      	b.n	80015ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015da:	d007      	beq.n	80015ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015dc:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015e4:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40007000 	.word	0x40007000
 8001600:	20000000 	.word	0x20000000
 8001604:	431bde83 	.word	0x431bde83

08001608 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e3ca      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161a:	4b97      	ldr	r3, [pc, #604]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001624:	4b94      	ldr	r3, [pc, #592]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80e4 	beq.w	8001804 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_RCC_OscConfig+0x4a>
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	2b0c      	cmp	r3, #12
 8001646:	f040 808b 	bne.w	8001760 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	2b01      	cmp	r3, #1
 800164e:	f040 8087 	bne.w	8001760 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001652:	4b89      	ldr	r3, [pc, #548]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d005      	beq.n	800166a <HAL_RCC_OscConfig+0x62>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e3a2      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1a      	ldr	r2, [r3, #32]
 800166e:	4b82      	ldr	r3, [pc, #520]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d004      	beq.n	8001684 <HAL_RCC_OscConfig+0x7c>
 800167a:	4b7f      	ldr	r3, [pc, #508]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001682:	e005      	b.n	8001690 <HAL_RCC_OscConfig+0x88>
 8001684:	4b7c      	ldr	r3, [pc, #496]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001686:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001690:	4293      	cmp	r3, r2
 8001692:	d223      	bcs.n	80016dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4618      	mov	r0, r3
 800169a:	f000 fd87 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e383      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a8:	4b73      	ldr	r3, [pc, #460]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a72      	ldr	r2, [pc, #456]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016ae:	f043 0308 	orr.w	r3, r3, #8
 80016b2:	6013      	str	r3, [r2, #0]
 80016b4:	4b70      	ldr	r3, [pc, #448]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	496d      	ldr	r1, [pc, #436]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c6:	4b6c      	ldr	r3, [pc, #432]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	4968      	ldr	r1, [pc, #416]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
 80016da:	e025      	b.n	8001728 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016dc:	4b66      	ldr	r3, [pc, #408]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a65      	ldr	r2, [pc, #404]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4960      	ldr	r1, [pc, #384]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	495b      	ldr	r1, [pc, #364]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d109      	bne.n	8001728 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 fd47 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e343      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001728:	f000 fc4a 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800172c:	4602      	mov	r2, r0
 800172e:	4b52      	ldr	r3, [pc, #328]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	4950      	ldr	r1, [pc, #320]	@ (800187c <HAL_RCC_OscConfig+0x274>)
 800173a:	5ccb      	ldrb	r3, [r1, r3]
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	4a4e      	ldr	r2, [pc, #312]	@ (8001880 <HAL_RCC_OscConfig+0x278>)
 8001746:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001748:	4b4e      	ldr	r3, [pc, #312]	@ (8001884 <HAL_RCC_OscConfig+0x27c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fa69 	bl	8000c24 <HAL_InitTick>
 8001752:	4603      	mov	r3, r0
 8001754:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d052      	beq.n	8001802 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	e327      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d032      	beq.n	80017ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001768:	4b43      	ldr	r3, [pc, #268]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a42      	ldr	r2, [pc, #264]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001774:	f7ff fba4 	bl	8000ec0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800177c:	f7ff fba0 	bl	8000ec0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e310      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800178e:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800179a:	4b37      	ldr	r3, [pc, #220]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a36      	ldr	r2, [pc, #216]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b34      	ldr	r3, [pc, #208]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	4931      	ldr	r1, [pc, #196]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	021b      	lsls	r3, r3, #8
 80017c6:	492c      	ldr	r1, [pc, #176]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e01a      	b.n	8001804 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a29      	ldr	r2, [pc, #164]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017da:	f7ff fb71 	bl	8000ec0 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e2:	f7ff fb6d 	bl	8000ec0 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e2dd      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017f4:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x1da>
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001802:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	2b00      	cmp	r3, #0
 800180e:	d074      	beq.n	80018fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b08      	cmp	r3, #8
 8001814:	d005      	beq.n	8001822 <HAL_RCC_OscConfig+0x21a>
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	2b0c      	cmp	r3, #12
 800181a:	d10e      	bne.n	800183a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b03      	cmp	r3, #3
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d064      	beq.n	80018f8 <HAL_RCC_OscConfig+0x2f0>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d160      	bne.n	80018f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e2ba      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x24a>
 8001844:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0b      	ldr	r2, [pc, #44]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e026      	b.n	80018a0 <HAL_RCC_OscConfig+0x298>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800185a:	d115      	bne.n	8001888 <HAL_RCC_OscConfig+0x280>
 800185c:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 8001862:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a02      	ldr	r2, [pc, #8]	@ (8001878 <HAL_RCC_OscConfig+0x270>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x298>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	08008008 	.word	0x08008008
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004
 8001888:	4ba0      	ldr	r3, [pc, #640]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a9f      	ldr	r2, [pc, #636]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800188e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	4b9d      	ldr	r3, [pc, #628]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a9c      	ldr	r2, [pc, #624]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800189a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800189e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fb0a 	bl	8000ec0 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fb06 	bl	8000ec0 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e276      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018c2:	4b92      	ldr	r3, [pc, #584]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x2a8>
 80018ce:	e014      	b.n	80018fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff faf6 	bl	8000ec0 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff faf2 	bl	8000ec0 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	@ 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e262      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ea:	4b88      	ldr	r3, [pc, #544]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x2d0>
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d060      	beq.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d005      	beq.n	8001918 <HAL_RCC_OscConfig+0x310>
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	d119      	bne.n	8001946 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d116      	bne.n	8001946 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001918:	4b7c      	ldr	r3, [pc, #496]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_OscConfig+0x328>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e23f      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b76      	ldr	r3, [pc, #472]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	4973      	ldr	r1, [pc, #460]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001944:	e040      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d023      	beq.n	8001996 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194e:	4b6f      	ldr	r3, [pc, #444]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6e      	ldr	r2, [pc, #440]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195a:	f7ff fab1 	bl	8000ec0 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff faad 	bl	8000ec0 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e21d      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001974:	4b65      	ldr	r3, [pc, #404]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001980:	4b62      	ldr	r3, [pc, #392]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	061b      	lsls	r3, r3, #24
 800198e:	495f      	ldr	r1, [pc, #380]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001990:	4313      	orrs	r3, r2
 8001992:	604b      	str	r3, [r1, #4]
 8001994:	e018      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001996:	4b5d      	ldr	r3, [pc, #372]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a5c      	ldr	r2, [pc, #368]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 800199c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a2:	f7ff fa8d 	bl	8000ec0 <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019aa:	f7ff fa89 	bl	8000ec0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e1f9      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019bc:	4b53      	ldr	r3, [pc, #332]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f0      	bne.n	80019aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d03c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d01c      	beq.n	8001a16 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019dc:	4b4b      	ldr	r3, [pc, #300]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e2:	4a4a      	ldr	r2, [pc, #296]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ec:	f7ff fa68 	bl	8000ec0 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f4:	f7ff fa64 	bl	8000ec0 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e1d4      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a06:	4b41      	ldr	r3, [pc, #260]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ef      	beq.n	80019f4 <HAL_RCC_OscConfig+0x3ec>
 8001a14:	e01b      	b.n	8001a4e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1c:	4a3b      	ldr	r2, [pc, #236]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa4b 	bl	8000ec0 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2e:	f7ff fa47 	bl	8000ec0 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e1b7      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a40:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ef      	bne.n	8001a2e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80a6 	beq.w	8001ba8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10d      	bne.n	8001a88 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6c:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	4a26      	ldr	r2, [pc, #152]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a78:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a84:	2301      	movs	r3, #1
 8001a86:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a88:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d118      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a94:	4b1e      	ldr	r3, [pc, #120]	@ (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001a9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fa0e 	bl	8000ec0 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa8:	f7ff fa0a 	bl	8000ec0 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e17a      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_RCC_OscConfig+0x508>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0f0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x4d8>
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ade:	e029      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d115      	bne.n	8001b14 <HAL_RCC_OscConfig+0x50c>
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aee:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afe:	4a03      	ldr	r2, [pc, #12]	@ (8001b0c <HAL_RCC_OscConfig+0x504>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b08:	e014      	b.n	8001b34 <HAL_RCC_OscConfig+0x52c>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40007000 	.word	0x40007000
 8001b14:	4b9c      	ldr	r3, [pc, #624]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b1a:	4a9b      	ldr	r2, [pc, #620]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b24:	4b98      	ldr	r3, [pc, #608]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2a:	4a97      	ldr	r2, [pc, #604]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b2c:	f023 0304 	bic.w	r3, r3, #4
 8001b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d016      	beq.n	8001b6a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f9c0 	bl	8000ec0 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f9bc 	bl	8000ec0 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e12a      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0ed      	beq.n	8001b44 <HAL_RCC_OscConfig+0x53c>
 8001b68:	e015      	b.n	8001b96 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6a:	f7ff f9a9 	bl	8000ec0 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7ff f9a5 	bl	8000ec0 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e113      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b88:	4b7f      	ldr	r3, [pc, #508]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ed      	bne.n	8001b72 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b96:	7ffb      	ldrb	r3, [r7, #31]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d105      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9c:	4b7a      	ldr	r3, [pc, #488]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001b9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba0:	4a79      	ldr	r2, [pc, #484]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80fe 	beq.w	8001dae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	f040 80d0 	bne.w	8001d5c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bbc:	4b72      	ldr	r3, [pc, #456]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	f003 0203 	and.w	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d130      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d127      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d11f      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001bfc:	2a07      	cmp	r2, #7
 8001bfe:	bf14      	ite	ne
 8001c00:	2201      	movne	r2, #1
 8001c02:	2200      	moveq	r2, #0
 8001c04:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d113      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	3b01      	subs	r3, #1
 8001c18:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d109      	bne.n	8001c32 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d06e      	beq.n	8001d10 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	d069      	beq.n	8001d0c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c38:	4b53      	ldr	r3, [pc, #332]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c44:	4b50      	ldr	r3, [pc, #320]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0ad      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c54:	4b4c      	ldr	r3, [pc, #304]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a4b      	ldr	r2, [pc, #300]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c5e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c60:	f7ff f92e 	bl	8000ec0 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c68:	f7ff f92a 	bl	8000ec0 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e09a      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7a:	4b43      	ldr	r3, [pc, #268]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c86:	4b40      	ldr	r3, [pc, #256]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	4b40      	ldr	r3, [pc, #256]	@ (8001d8c <HAL_RCC_OscConfig+0x784>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001c96:	3a01      	subs	r2, #1
 8001c98:	0112      	lsls	r2, r2, #4
 8001c9a:	4311      	orrs	r1, r2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ca0:	0212      	lsls	r2, r2, #8
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ca8:	0852      	lsrs	r2, r2, #1
 8001caa:	3a01      	subs	r2, #1
 8001cac:	0552      	lsls	r2, r2, #21
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cb4:	0852      	lsrs	r2, r2, #1
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	0652      	lsls	r2, r2, #25
 8001cba:	4311      	orrs	r1, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cc0:	0912      	lsrs	r2, r2, #4
 8001cc2:	0452      	lsls	r2, r2, #17
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	4930      	ldr	r1, [pc, #192]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ce4:	f7ff f8ec 	bl	8000ec0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f8e8 	bl	8000ec0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e058      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0a:	e050      	b.n	8001dae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e04f      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d148      	bne.n	8001dae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a19      	ldr	r2, [pc, #100]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4a16      	ldr	r2, [pc, #88]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d34:	f7ff f8c4 	bl	8000ec0 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f8c0 	bl	8000ec0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e030      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x734>
 8001d5a:	e028      	b.n	8001dae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d023      	beq.n	8001daa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d62:	4b09      	ldr	r3, [pc, #36]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a08      	ldr	r2, [pc, #32]	@ (8001d88 <HAL_RCC_OscConfig+0x780>)
 8001d68:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f8a7 	bl	8000ec0 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d74:	e00c      	b.n	8001d90 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff f8a3 	bl	8000ec0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d905      	bls.n	8001d90 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e013      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_OscConfig+0x7b0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ec      	bne.n	8001d76 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_RCC_OscConfig+0x7b0>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4905      	ldr	r1, [pc, #20]	@ (8001db8 <HAL_RCC_OscConfig+0x7b0>)
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_RCC_OscConfig+0x7b4>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
 8001da8:	e001      	b.n	8001dae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	feeefffc 	.word	0xfeeefffc

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0e7      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b75      	ldr	r3, [pc, #468]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d910      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b72      	ldr	r3, [pc, #456]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0207 	bic.w	r2, r3, #7
 8001dea:	4970      	ldr	r1, [pc, #448]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b6e      	ldr	r3, [pc, #440]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0cf      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b66      	ldr	r3, [pc, #408]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d908      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b63      	ldr	r3, [pc, #396]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4960      	ldr	r1, [pc, #384]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d04c      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	4b5a      	ldr	r3, [pc, #360]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d121      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0a6      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	4b54      	ldr	r3, [pc, #336]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e09a      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e76:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e08e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e86:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e086      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b46      	ldr	r3, [pc, #280]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4943      	ldr	r1, [pc, #268]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea8:	f7ff f80a 	bl	8000ec0 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff f806 	bl	8000ec0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e06e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d208      	bcs.n	8001f06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	492b      	ldr	r1, [pc, #172]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4b29      	ldr	r3, [pc, #164]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d210      	bcs.n	8001f36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f14:	4b25      	ldr	r3, [pc, #148]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	4923      	ldr	r1, [pc, #140]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f24:	4b21      	ldr	r3, [pc, #132]	@ (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e036      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4918      	ldr	r1, [pc, #96]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f60:	4b13      	ldr	r3, [pc, #76]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4910      	ldr	r1, [pc, #64]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f74:	f000 f824 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	490b      	ldr	r1, [pc, #44]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	4a09      	ldr	r2, [pc, #36]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f94:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_RCC_ClockConfig+0x1fc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fe43 	bl	8000c24 <HAL_InitTick>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08008008 	.word	0x08008008
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d121      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d11e      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ff4:	4b34      	ldr	r3, [pc, #208]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002000:	4b31      	ldr	r3, [pc, #196]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e005      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002010:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800201c:	4a2b      	ldr	r2, [pc, #172]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002038:	4b25      	ldr	r3, [pc, #148]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e004      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d101      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002044:	4b23      	ldr	r3, [pc, #140]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002046:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d134      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b1e      	ldr	r3, [pc, #120]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0xa6>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d003      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xac>
 8002064:	e005      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002068:	617b      	str	r3, [r7, #20]
      break;
 800206a:	e005      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800206c:	4b19      	ldr	r3, [pc, #100]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800206e:	617b      	str	r3, [r7, #20]
      break;
 8002070:	e002      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	617b      	str	r3, [r7, #20]
      break;
 8002076:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	3301      	adds	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	fb03 f202 	mul.w	r2, r3, r2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0e5b      	lsrs	r3, r3, #25
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	3301      	adds	r3, #1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020b8:	69bb      	ldr	r3, [r7, #24]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	@ 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08008020 	.word	0x08008020
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	@ (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4904      	ldr	r1, [pc, #16]	@ (8002118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	08008018 	.word	0x08008018

0800211c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002120:	f7ff ffda 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0adb      	lsrs	r3, r3, #11
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	@ (8002144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	08008018 	.word	0x08008018

08002148 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	220f      	movs	r2, #15
 8002156:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0203 	and.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002164:	4b0f      	ldr	r3, [pc, #60]	@ (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800217c:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <HAL_RCC_GetClockConfig+0x60>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0207 	and.w	r2, r3, #7
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	601a      	str	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40022000 	.word	0x40022000

080021ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff f9bc 	bl	8001540 <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
 80021ca:	e014      	b.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b25      	ldr	r3, [pc, #148]	@ (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021d8:	4b22      	ldr	r3, [pc, #136]	@ (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff f9ac 	bl	8001540 <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021fc:	d10b      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	@ 0x80
 8002202:	d919      	bls.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2ba0      	cmp	r3, #160	@ 0xa0
 8002208:	d902      	bls.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220a:	2302      	movs	r3, #2
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e013      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002210:	2301      	movs	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e010      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	@ 0x80
 800221a:	d902      	bls.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800221c:	2303      	movs	r3, #3
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e00a      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b80      	cmp	r3, #128	@ 0x80
 8002226:	d102      	bne.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002228:	2302      	movs	r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e004      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b70      	cmp	r3, #112	@ 0x70
 8002232:	d101      	bne.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 0207 	bic.w	r2, r3, #7
 8002240:	4909      	ldr	r1, [pc, #36]	@ (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40022000 	.word	0x40022000

0800226c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002274:	2300      	movs	r3, #0
 8002276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002278:	2300      	movs	r3, #0
 800227a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002284:	2b00      	cmp	r3, #0
 8002286:	d041      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800228c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002290:	d02a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002292:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002296:	d824      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002298:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800229c:	d008      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800229e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022a2:	d81e      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022ac:	d010      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ae:	e018      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022b0:	4b86      	ldr	r3, [pc, #536]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a85      	ldr	r2, [pc, #532]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022bc:	e015      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 facb 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ce:	e00c      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3320      	adds	r3, #32
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fbb6 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e0:	e003      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	74fb      	strb	r3, [r7, #19]
      break;
 80022e6:	e000      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f0:	4b76      	ldr	r3, [pc, #472]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022fe:	4973      	ldr	r1, [pc, #460]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002306:	e001      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d041      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800231c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002320:	d02a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002322:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002326:	d824      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002328:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800232c:	d008      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800232e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002332:	d81e      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800233c:	d010      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800233e:	e018      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002340:	4b62      	ldr	r3, [pc, #392]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a61      	ldr	r2, [pc, #388]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800234c:	e015      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fa83 	bl	8002860 <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800235e:	e00c      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3320      	adds	r3, #32
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fb6e 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002370:	e003      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	74fb      	strb	r3, [r7, #19]
      break;
 8002376:	e000      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002380:	4b52      	ldr	r3, [pc, #328]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002386:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800238e:	494f      	ldr	r1, [pc, #316]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002396:	e001      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a0 	beq.w	80024ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ae:	4b47      	ldr	r3, [pc, #284]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	4b41      	ldr	r3, [pc, #260]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c8:	4a40      	ldr	r2, [pc, #256]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80023d0:	4b3e      	ldr	r3, [pc, #248]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e0:	4b3b      	ldr	r3, [pc, #236]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3a      	ldr	r2, [pc, #232]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fd68 	bl	8000ec0 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f2:	e009      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f4:	f7fe fd64 	bl	8000ec0 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d902      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	74fb      	strb	r3, [r7, #19]
        break;
 8002406:	e005      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002408:	4b31      	ldr	r3, [pc, #196]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ef      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d15c      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800241a:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002420:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002424:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01f      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	429a      	cmp	r2, r3
 8002436:	d019      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002438:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002444:	4b21      	ldr	r3, [pc, #132]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800244a:	4a20      	ldr	r2, [pc, #128]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002454:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245a:	4a1c      	ldr	r2, [pc, #112]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002464:	4a19      	ldr	r2, [pc, #100]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fd23 	bl	8000ec0 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247c:	e00b      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fd1f 	bl	8000ec0 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	@ 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d902      	bls.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	74fb      	strb	r3, [r7, #19]
            break;
 8002494:	e006      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002496:	4b0d      	ldr	r3, [pc, #52]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ec      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ba:	4904      	ldr	r1, [pc, #16]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024c2:	e009      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
 80024c8:	e006      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d8:	7c7b      	ldrb	r3, [r7, #17]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b9e      	ldr	r3, [pc, #632]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e2:	4a9d      	ldr	r2, [pc, #628]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f6:	4b98      	ldr	r3, [pc, #608]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024fc:	f023 0203 	bic.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002504:	4994      	ldr	r1, [pc, #592]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002518:	4b8f      	ldr	r3, [pc, #572]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251e:	f023 020c 	bic.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002526:	498c      	ldr	r1, [pc, #560]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800253a:	4b87      	ldr	r3, [pc, #540]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002540:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	4983      	ldr	r1, [pc, #524]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800255c:	4b7e      	ldr	r3, [pc, #504]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002562:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256a:	497b      	ldr	r1, [pc, #492]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800257e:	4b76      	ldr	r3, [pc, #472]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002584:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258c:	4972      	ldr	r1, [pc, #456]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	496a      	ldr	r1, [pc, #424]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025c2:	4b65      	ldr	r3, [pc, #404]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d0:	4961      	ldr	r1, [pc, #388]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f2:	4959      	ldr	r1, [pc, #356]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002606:	4b54      	ldr	r3, [pc, #336]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002614:	4950      	ldr	r1, [pc, #320]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002628:	4b4b      	ldr	r3, [pc, #300]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	4948      	ldr	r1, [pc, #288]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800264a:	4b43      	ldr	r3, [pc, #268]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002650:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	493f      	ldr	r1, [pc, #252]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d028      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800266c:	4b3a      	ldr	r3, [pc, #232]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800267a:	4937      	ldr	r1, [pc, #220]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800268a:	d106      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b32      	ldr	r3, [pc, #200]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a31      	ldr	r2, [pc, #196]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
 8002698:	e011      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800269e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026a2:	d10c      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	2101      	movs	r1, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8d8 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d028      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ca:	4b23      	ldr	r3, [pc, #140]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	491f      	ldr	r1, [pc, #124]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026f4:	60d3      	str	r3, [r2, #12]
 80026f6:	e011      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f8a9 	bl	8002860 <RCCEx_PLLSAI1_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02b      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800272e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002736:	4908      	ldr	r1, [pc, #32]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002742:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002746:	d109      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002748:	4b03      	ldr	r3, [pc, #12]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a02      	ldr	r2, [pc, #8]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002752:	60d3      	str	r3, [r2, #12]
 8002754:	e014      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002760:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002764:	d10c      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f877 	bl	8002860 <RCCEx_PLLSAI1_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02f      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800278c:	4b2b      	ldr	r3, [pc, #172]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002792:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800279a:	4928      	ldr	r1, [pc, #160]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	2102      	movs	r1, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f854 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d014      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	74bb      	strb	r3, [r7, #18]
 80027c6:	e011      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3320      	adds	r3, #32
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f935 	bl	8002a48 <RCCEx_PLLSAI2_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027f8:	4b10      	ldr	r3, [pc, #64]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002806:	490d      	ldr	r1, [pc, #52]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800281a:	4b08      	ldr	r3, [pc, #32]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002820:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800282a:	4904      	ldr	r1, [pc, #16]	@ (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002832:	7cbb      	ldrb	r3, [r7, #18]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a04      	ldr	r2, [pc, #16]	@ (800285c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000

08002860 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800286e:	4b75      	ldr	r3, [pc, #468]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d018      	beq.n	80028ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800287a:	4b72      	ldr	r3, [pc, #456]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0203 	and.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d10d      	bne.n	80028a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
       ||
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002892:	4b6c      	ldr	r3, [pc, #432]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
       ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d047      	beq.n	8002936 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e044      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d018      	beq.n	80028e6 <RCCEx_PLLSAI1_Config+0x86>
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d825      	bhi.n	8002904 <RCCEx_PLLSAI1_Config+0xa4>
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d002      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0x62>
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d009      	beq.n	80028d4 <RCCEx_PLLSAI1_Config+0x74>
 80028c0:	e020      	b.n	8002904 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028c2:	4b60      	ldr	r3, [pc, #384]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11d      	bne.n	800290a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d2:	e01a      	b.n	800290a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028d4:	4b5b      	ldr	r3, [pc, #364]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d116      	bne.n	800290e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e013      	b.n	800290e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028e6:	4b57      	ldr	r3, [pc, #348]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10f      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028f2:	4b54      	ldr	r3, [pc, #336]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002902:	e006      	b.n	8002912 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e004      	b.n	8002914 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800290a:	bf00      	nop
 800290c:	e002      	b.n	8002914 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002912:	bf00      	nop
    }

    if(status == HAL_OK)
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10d      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800291a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6819      	ldr	r1, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	430b      	orrs	r3, r1
 8002930:	4944      	ldr	r1, [pc, #272]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002936:	7bfb      	ldrb	r3, [r7, #15]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d17d      	bne.n	8002a38 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800293c:	4b41      	ldr	r3, [pc, #260]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a40      	ldr	r2, [pc, #256]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002948:	f7fe faba 	bl	8000ec0 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800294e:	e009      	b.n	8002964 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002950:	f7fe fab6 	bl	8000ec0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d902      	bls.n	8002964 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	73fb      	strb	r3, [r7, #15]
        break;
 8002962:	e005      	b.n	8002970 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002964:	4b37      	ldr	r3, [pc, #220]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1ef      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002970:	7bfb      	ldrb	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d160      	bne.n	8002a38 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d111      	bne.n	80029a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297c:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6892      	ldr	r2, [r2, #8]
 800298c:	0211      	lsls	r1, r2, #8
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68d2      	ldr	r2, [r2, #12]
 8002992:	0912      	lsrs	r2, r2, #4
 8002994:	0452      	lsls	r2, r2, #17
 8002996:	430a      	orrs	r2, r1
 8002998:	492a      	ldr	r1, [pc, #168]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	610b      	str	r3, [r1, #16]
 800299e:	e027      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d112      	bne.n	80029cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a6:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80029ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	0211      	lsls	r1, r2, #8
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6912      	ldr	r2, [r2, #16]
 80029bc:	0852      	lsrs	r2, r2, #1
 80029be:	3a01      	subs	r2, #1
 80029c0:	0552      	lsls	r2, r2, #21
 80029c2:	430a      	orrs	r2, r1
 80029c4:	491f      	ldr	r1, [pc, #124]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	610b      	str	r3, [r1, #16]
 80029ca:	e011      	b.n	80029f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80029d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6892      	ldr	r2, [r2, #8]
 80029dc:	0211      	lsls	r1, r2, #8
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6952      	ldr	r2, [r2, #20]
 80029e2:	0852      	lsrs	r2, r2, #1
 80029e4:	3a01      	subs	r2, #1
 80029e6:	0652      	lsls	r2, r2, #25
 80029e8:	430a      	orrs	r2, r1
 80029ea:	4916      	ldr	r1, [pc, #88]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029f0:	4b14      	ldr	r3, [pc, #80]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a13      	ldr	r2, [pc, #76]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029fc:	f7fe fa60 	bl	8000ec0 <HAL_GetTick>
 8002a00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a02:	e009      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a04:	f7fe fa5c 	bl	8000ec0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	73fb      	strb	r3, [r7, #15]
          break;
 8002a16:	e005      	b.n	8002a24 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ef      	beq.n	8002a04 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a24:	7bfb      	ldrb	r3, [r7, #15]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a2a:	4b06      	ldr	r3, [pc, #24]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	4904      	ldr	r1, [pc, #16]	@ (8002a44 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40021000 	.word	0x40021000

08002a48 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a56:	4b6a      	ldr	r3, [pc, #424]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a62:	4b67      	ldr	r3, [pc, #412]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0203 	and.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d10d      	bne.n	8002a8e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
       ||
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a7a:	4b61      	ldr	r3, [pc, #388]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
       ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d047      	beq.n	8002b1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73fb      	strb	r3, [r7, #15]
 8002a92:	e044      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	d018      	beq.n	8002ace <RCCEx_PLLSAI2_Config+0x86>
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d825      	bhi.n	8002aec <RCCEx_PLLSAI2_Config+0xa4>
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d002      	beq.n	8002aaa <RCCEx_PLLSAI2_Config+0x62>
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d009      	beq.n	8002abc <RCCEx_PLLSAI2_Config+0x74>
 8002aa8:	e020      	b.n	8002aec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002aaa:	4b55      	ldr	r3, [pc, #340]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11d      	bne.n	8002af2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aba:	e01a      	b.n	8002af2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002abc:	4b50      	ldr	r3, [pc, #320]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d116      	bne.n	8002af6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002acc:	e013      	b.n	8002af6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ace:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ada:	4b49      	ldr	r3, [pc, #292]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aea:	e006      	b.n	8002afa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
      break;
 8002af0:	e004      	b.n	8002afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002af2:	bf00      	nop
 8002af4:	e002      	b.n	8002afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002af6:	bf00      	nop
 8002af8:	e000      	b.n	8002afc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10d      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b02:	4b3f      	ldr	r3, [pc, #252]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	430b      	orrs	r3, r1
 8002b18:	4939      	ldr	r1, [pc, #228]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d167      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b24:	4b36      	ldr	r3, [pc, #216]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a35      	ldr	r2, [pc, #212]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b30:	f7fe f9c6 	bl	8000ec0 <HAL_GetTick>
 8002b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b36:	e009      	b.n	8002b4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b38:	f7fe f9c2 	bl	8000ec0 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d902      	bls.n	8002b4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	73fb      	strb	r3, [r7, #15]
        break;
 8002b4a:	e005      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1ef      	bne.n	8002b38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d14a      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d111      	bne.n	8002b88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b64:	4b26      	ldr	r3, [pc, #152]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6892      	ldr	r2, [r2, #8]
 8002b74:	0211      	lsls	r1, r2, #8
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68d2      	ldr	r2, [r2, #12]
 8002b7a:	0912      	lsrs	r2, r2, #4
 8002b7c:	0452      	lsls	r2, r2, #17
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	491f      	ldr	r1, [pc, #124]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	614b      	str	r3, [r1, #20]
 8002b86:	e011      	b.n	8002bac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b88:	4b1d      	ldr	r3, [pc, #116]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	6892      	ldr	r2, [r2, #8]
 8002b98:	0211      	lsls	r1, r2, #8
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6912      	ldr	r2, [r2, #16]
 8002b9e:	0852      	lsrs	r2, r2, #1
 8002ba0:	3a01      	subs	r2, #1
 8002ba2:	0652      	lsls	r2, r2, #25
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	4916      	ldr	r1, [pc, #88]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb8:	f7fe f982 	bl	8000ec0 <HAL_GetTick>
 8002bbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bbe:	e009      	b.n	8002bd4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bc0:	f7fe f97e 	bl	8000ec0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d902      	bls.n	8002bd4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	73fb      	strb	r3, [r7, #15]
          break;
 8002bd2:	e005      	b.n	8002be0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d0ef      	beq.n	8002bc0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002be6:	4b06      	ldr	r3, [pc, #24]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4904      	ldr	r1, [pc, #16]	@ (8002c00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000

08002c04 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e049      	b.n	8002caa <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	795b      	ldrb	r3, [r3, #5]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d105      	bne.n	8002c2c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fd ff62 	bl	8000af0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0204 	orr.w	r2, r2, #4
 8002c40:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c4c:	2b40      	cmp	r3, #64	@ 0x40
 8002c4e:	d104      	bne.n	8002c5a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2204      	movs	r2, #4
 8002c54:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e027      	b.n	8002caa <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002c5a:	f7fe f931 	bl	8000ec0 <HAL_GetTick>
 8002c5e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8002c60:	e015      	b.n	8002c8e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002c62:	f7fe f92d 	bl	8000ec0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d90e      	bls.n	8002c8e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d007      	beq.n	8002c8e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2204      	movs	r2, #4
 8002c82:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e00d      	b.n	8002caa <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d1e2      	bne.n	8002c62 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e049      	b.n	8002d58 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f841 	bl	8002d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	f000 f9df 	bl	80030b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d001      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e04f      	b.n	8002e2c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <HAL_TIM_Base_Start_IT+0xc4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01d      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x76>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db6:	d018      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x76>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1f      	ldr	r2, [pc, #124]	@ (8002e3c <HAL_TIM_Base_Start_IT+0xc8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d013      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x76>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8002e40 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d00e      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x76>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	@ (8002e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d009      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x76>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a1b      	ldr	r2, [pc, #108]	@ (8002e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d004      	beq.n	8002dea <HAL_TIM_Base_Start_IT+0x76>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a19      	ldr	r2, [pc, #100]	@ (8002e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d115      	bne.n	8002e16 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d015      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0xb4>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e02:	d011      	beq.n	8002e28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	e008      	b.n	8002e28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	e000      	b.n	8002e2a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e28:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	40012c00 	.word	0x40012c00
 8002e3c:	40000400 	.word	0x40000400
 8002e40:	40000800 	.word	0x40000800
 8002e44:	40000c00 	.word	0x40000c00
 8002e48:	40013400 	.word	0x40013400
 8002e4c:	40014000 	.word	0x40014000
 8002e50:	00010007 	.word	0x00010007

08002e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d020      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01b      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0202 	mvn.w	r2, #2
 8002e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f8e9 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8db 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f8ec 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0204 	mvn.w	r2, #4
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f8c3 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8b5 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f8c6 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d020      	beq.n	8002f50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0208 	mvn.w	r2, #8
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f89d 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f88f 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f8a0 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d020      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0310 	and.w	r3, r3, #16
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0210 	mvn.w	r2, #16
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2208      	movs	r2, #8
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f877 	bl	8003076 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f869 	bl	8003062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f87a 	bl	800308a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d007      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0201 	mvn.w	r2, #1
 8002fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd fd5a 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d104      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00c      	beq.n	8002fee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f913 	bl	8003214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00c      	beq.n	8003012 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800300a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f90b 	bl	8003228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00c      	beq.n	8003036 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003022:	2b00      	cmp	r3, #0
 8003024:	d007      	beq.n	8003036 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800302e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f834 	bl	800309e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00c      	beq.n	800305a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d007      	beq.n	800305a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f06f 0220 	mvn.w	r2, #32
 8003052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f8d3 	bl	8003200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003062:	b480      	push	{r7}
 8003064:	b083      	sub	sp, #12
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr

0800309e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a46      	ldr	r2, [pc, #280]	@ (80031e0 <TIM_Base_SetConfig+0x12c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d2:	d00f      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a43      	ldr	r2, [pc, #268]	@ (80031e4 <TIM_Base_SetConfig+0x130>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d00b      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a42      	ldr	r2, [pc, #264]	@ (80031e8 <TIM_Base_SetConfig+0x134>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d007      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a41      	ldr	r2, [pc, #260]	@ (80031ec <TIM_Base_SetConfig+0x138>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0x40>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a40      	ldr	r2, [pc, #256]	@ (80031f0 <TIM_Base_SetConfig+0x13c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d108      	bne.n	8003106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a35      	ldr	r2, [pc, #212]	@ (80031e0 <TIM_Base_SetConfig+0x12c>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01f      	beq.n	800314e <TIM_Base_SetConfig+0x9a>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003114:	d01b      	beq.n	800314e <TIM_Base_SetConfig+0x9a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a32      	ldr	r2, [pc, #200]	@ (80031e4 <TIM_Base_SetConfig+0x130>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d017      	beq.n	800314e <TIM_Base_SetConfig+0x9a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a31      	ldr	r2, [pc, #196]	@ (80031e8 <TIM_Base_SetConfig+0x134>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <TIM_Base_SetConfig+0x9a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a30      	ldr	r2, [pc, #192]	@ (80031ec <TIM_Base_SetConfig+0x138>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00f      	beq.n	800314e <TIM_Base_SetConfig+0x9a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a2f      	ldr	r2, [pc, #188]	@ (80031f0 <TIM_Base_SetConfig+0x13c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00b      	beq.n	800314e <TIM_Base_SetConfig+0x9a>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a2e      	ldr	r2, [pc, #184]	@ (80031f4 <TIM_Base_SetConfig+0x140>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <TIM_Base_SetConfig+0x9a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a2d      	ldr	r2, [pc, #180]	@ (80031f8 <TIM_Base_SetConfig+0x144>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <TIM_Base_SetConfig+0x9a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a2c      	ldr	r2, [pc, #176]	@ (80031fc <TIM_Base_SetConfig+0x148>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d108      	bne.n	8003160 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a16      	ldr	r2, [pc, #88]	@ (80031e0 <TIM_Base_SetConfig+0x12c>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00f      	beq.n	80031ac <TIM_Base_SetConfig+0xf8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a18      	ldr	r2, [pc, #96]	@ (80031f0 <TIM_Base_SetConfig+0x13c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00b      	beq.n	80031ac <TIM_Base_SetConfig+0xf8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a17      	ldr	r2, [pc, #92]	@ (80031f4 <TIM_Base_SetConfig+0x140>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <TIM_Base_SetConfig+0xf8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a16      	ldr	r2, [pc, #88]	@ (80031f8 <TIM_Base_SetConfig+0x144>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d003      	beq.n	80031ac <TIM_Base_SetConfig+0xf8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a15      	ldr	r2, [pc, #84]	@ (80031fc <TIM_Base_SetConfig+0x148>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d103      	bne.n	80031b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d105      	bne.n	80031d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f023 0201 	bic.w	r2, r3, #1
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	611a      	str	r2, [r3, #16]
  }
}
 80031d2:	bf00      	nop
 80031d4:	3714      	adds	r7, #20
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400
 80031e8:	40000800 	.word	0x40000800
 80031ec:	40000c00 	.word	0x40000c00
 80031f0:	40013400 	.word	0x40013400
 80031f4:	40014000 	.word	0x40014000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800

08003200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e040      	b.n	80032d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d106      	bne.n	8003264 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7fd fc7c 	bl	8000b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2224      	movs	r2, #36	@ 0x24
 8003268:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d002      	beq.n	8003288 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 fe90 	bl	8003fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fbd5 	bl	8003a38 <UART_SetConfig>
 800328e:	4603      	mov	r3, r0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d101      	bne.n	8003298 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e01b      	b.n	80032d0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80032a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80032b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 ff0f 	bl	80040ec <UART_CheckIdleState>
 80032ce:	4603      	mov	r3, r0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08a      	sub	sp, #40	@ 0x28
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	4613      	mov	r3, r2
 80032e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d177      	bne.n	80033e0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d002      	beq.n	80032fc <HAL_UART_Transmit+0x24>
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e070      	b.n	80033e2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2200      	movs	r2, #0
 8003304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2221      	movs	r2, #33	@ 0x21
 800330c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330e:	f7fd fdd7 	bl	8000ec0 <HAL_GetTick>
 8003312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800332c:	d108      	bne.n	8003340 <HAL_UART_Transmit+0x68>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d104      	bne.n	8003340 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003336:	2300      	movs	r3, #0
 8003338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	e003      	b.n	8003348 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003344:	2300      	movs	r3, #0
 8003346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003348:	e02f      	b.n	80033aa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2200      	movs	r2, #0
 8003352:	2180      	movs	r1, #128	@ 0x80
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 ff71 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e03b      	b.n	80033e2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	881a      	ldrh	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800337c:	b292      	uxth	r2, r2
 800337e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	3302      	adds	r3, #2
 8003384:	61bb      	str	r3, [r7, #24]
 8003386:	e007      	b.n	8003398 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	781a      	ldrb	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3301      	adds	r3, #1
 8003396:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1c9      	bne.n	800334a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	2140      	movs	r1, #64	@ 0x40
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 ff3b 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e005      	b.n	80033e2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2220      	movs	r2, #32
 80033da:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e000      	b.n	80033e2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b0ba      	sub	sp, #232	@ 0xe8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003412:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003416:	f640 030f 	movw	r3, #2063	@ 0x80f
 800341a:	4013      	ands	r3, r2
 800341c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003424:	2b00      	cmp	r3, #0
 8003426:	d115      	bne.n	8003454 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342c:	f003 0320 	and.w	r3, r3, #32
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00f      	beq.n	8003454 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003438:	f003 0320 	and.w	r3, r3, #32
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 82ca 	beq.w	80039de <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
      }
      return;
 8003452:	e2c4      	b.n	80039de <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8117 	beq.w	800368c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800345e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003462:	f003 0301 	and.w	r3, r3, #1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800346a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800346e:	4b85      	ldr	r3, [pc, #532]	@ (8003684 <HAL_UART_IRQHandler+0x298>)
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 810a 	beq.w	800368c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b00      	cmp	r3, #0
 8003482:	d011      	beq.n	80034a8 <HAL_UART_IRQHandler+0xbc>
 8003484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00b      	beq.n	80034a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2201      	movs	r2, #1
 8003496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d011      	beq.n	80034d8 <HAL_UART_IRQHandler+0xec>
 80034b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d00b      	beq.n	80034d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2202      	movs	r2, #2
 80034c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034ce:	f043 0204 	orr.w	r2, r3, #4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034dc:	f003 0304 	and.w	r3, r3, #4
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d011      	beq.n	8003508 <HAL_UART_IRQHandler+0x11c>
 80034e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2204      	movs	r2, #4
 80034f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034fe:	f043 0202 	orr.w	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d017      	beq.n	8003544 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003518:	f003 0320 	and.w	r3, r3, #32
 800351c:	2b00      	cmp	r3, #0
 800351e:	d105      	bne.n	800352c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003524:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00b      	beq.n	8003544 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2208      	movs	r2, #8
 8003532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800353a:	f043 0208 	orr.w	r2, r3, #8
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <HAL_UART_IRQHandler+0x18a>
 8003550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003554:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00c      	beq.n	8003576 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8230 	beq.w	80039e2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00d      	beq.n	80035aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800358e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003592:	f003 0320 	and.w	r3, r3, #32
 8003596:	2b00      	cmp	r3, #0
 8003598:	d007      	beq.n	80035aa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035be:	2b40      	cmp	r3, #64	@ 0x40
 80035c0:	d005      	beq.n	80035ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d04f      	beq.n	800366e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fea1 	bl	8004316 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b40      	cmp	r3, #64	@ 0x40
 80035e0:	d141      	bne.n	8003666 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	3308      	adds	r3, #8
 80035e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80035f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80035fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003600:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3308      	adds	r3, #8
 800360a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800360e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003612:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800361a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1d9      	bne.n	80035e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003632:	2b00      	cmp	r3, #0
 8003634:	d013      	beq.n	800365e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363a:	4a13      	ldr	r2, [pc, #76]	@ (8003688 <HAL_UART_IRQHandler+0x29c>)
 800363c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd fd68 	bl	8001118 <HAL_DMA_Abort_IT>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d017      	beq.n	800367e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003658:	4610      	mov	r0, r2
 800365a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	e00f      	b.n	800367e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9d4 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	e00b      	b.n	800367e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9d0 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366c:	e007      	b.n	800367e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f9cc 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800367c:	e1b1      	b.n	80039e2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367e:	bf00      	nop
    return;
 8003680:	e1af      	b.n	80039e2 <HAL_UART_IRQHandler+0x5f6>
 8003682:	bf00      	nop
 8003684:	04000120 	.word	0x04000120
 8003688:	080043df 	.word	0x080043df

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	2b01      	cmp	r3, #1
 8003692:	f040 816a 	bne.w	800396a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b00      	cmp	r3, #0
 80036a0:	f000 8163 	beq.w	800396a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f000 815c 	beq.w	800396a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2210      	movs	r2, #16
 80036b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b40      	cmp	r3, #64	@ 0x40
 80036c6:	f040 80d4 	bne.w	8003872 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 80ad 	beq.w	800383a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80036e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036ea:	429a      	cmp	r2, r3
 80036ec:	f080 80a5 	bcs.w	800383a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80036f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0320 	and.w	r3, r3, #32
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 8086 	bne.w	8003818 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003720:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003728:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003736:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800373a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003742:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800374e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1da      	bne.n	800370c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3308      	adds	r3, #8
 800375c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003766:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3308      	adds	r3, #8
 8003776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800377a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800377e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003782:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800378c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e1      	bne.n	8003756 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	3308      	adds	r3, #8
 8003798:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80037a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3308      	adds	r3, #8
 80037b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80037b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80037b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80037bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80037c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e3      	bne.n	8003792 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e0:	e853 3f00 	ldrex	r3, [r3]
 80037e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80037e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e8:	f023 0310 	bic.w	r3, r3, #16
 80037ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80037fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003800:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003802:	e841 2300 	strex	r3, r2, [r1]
 8003806:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1e4      	bne.n	80037d8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fc42 	bl	800109c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800382a:	b29b      	uxth	r3, r3
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	b29b      	uxth	r3, r3
 8003830:	4619      	mov	r1, r3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8f4 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003838:	e0d5      	b.n	80039e6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003840:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003844:	429a      	cmp	r2, r3
 8003846:	f040 80ce 	bne.w	80039e6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b20      	cmp	r3, #32
 8003858:	f040 80c5 	bne.w	80039e6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003868:	4619      	mov	r1, r3
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f8d8 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
      return;
 8003870:	e0b9      	b.n	80039e6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800387e:	b29b      	uxth	r3, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800388c:	b29b      	uxth	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	f000 80ab 	beq.w	80039ea <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003894:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80a6 	beq.w	80039ea <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a6:	e853 3f00 	ldrex	r3, [r3]
 80038aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038c8:	e841 2300 	strex	r3, r2, [r1]
 80038cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1e4      	bne.n	800389e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	623b      	str	r3, [r7, #32]
   return(result);
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3308      	adds	r3, #8
 80038f4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038f8:	633a      	str	r2, [r7, #48]	@ 0x30
 80038fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003900:	e841 2300 	strex	r3, r2, [r1]
 8003904:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1e3      	bne.n	80038d4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2220      	movs	r2, #32
 8003910:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	60fb      	str	r3, [r7, #12]
   return(result);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f023 0310 	bic.w	r3, r3, #16
 8003934:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	69b9      	ldr	r1, [r7, #24]
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	e841 2300 	strex	r3, r2, [r1]
 800394e:	617b      	str	r3, [r7, #20]
   return(result);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1e4      	bne.n	8003920 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2202      	movs	r2, #2
 800395a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800395c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003960:	4619      	mov	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f85c 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003968:	e03f      	b.n	80039ea <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800396a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00e      	beq.n	8003994 <HAL_UART_IRQHandler+0x5a8>
 8003976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800397a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800398a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 fd66 	bl	800445e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003992:	e02d      	b.n	80039f0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01c      	beq.n	80039ee <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
    }
    return;
 80039bc:	e017      	b.n	80039ee <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d012      	beq.n	80039f0 <HAL_UART_IRQHandler+0x604>
 80039ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00c      	beq.n	80039f0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fd17 	bl	800440a <UART_EndTransmit_IT>
    return;
 80039dc:	e008      	b.n	80039f0 <HAL_UART_IRQHandler+0x604>
      return;
 80039de:	bf00      	nop
 80039e0:	e006      	b.n	80039f0 <HAL_UART_IRQHandler+0x604>
    return;
 80039e2:	bf00      	nop
 80039e4:	e004      	b.n	80039f0 <HAL_UART_IRQHandler+0x604>
      return;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <HAL_UART_IRQHandler+0x604>
      return;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_UART_IRQHandler+0x604>
    return;
 80039ee:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80039f0:	37e8      	adds	r7, #232	@ 0xe8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop

080039f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b08a      	sub	sp, #40	@ 0x28
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	431a      	orrs	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4ba4      	ldr	r3, [pc, #656]	@ (8003cf8 <UART_SetConfig+0x2c0>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	6812      	ldr	r2, [r2, #0]
 8003a6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a70:	430b      	orrs	r3, r1
 8003a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a99      	ldr	r2, [pc, #612]	@ (8003cfc <UART_SetConfig+0x2c4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a90      	ldr	r2, [pc, #576]	@ (8003d00 <UART_SetConfig+0x2c8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d126      	bne.n	8003b10 <UART_SetConfig+0xd8>
 8003ac2:	4b90      	ldr	r3, [pc, #576]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b03      	cmp	r3, #3
 8003ace:	d81b      	bhi.n	8003b08 <UART_SetConfig+0xd0>
 8003ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad8 <UART_SetConfig+0xa0>)
 8003ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad6:	bf00      	nop
 8003ad8:	08003ae9 	.word	0x08003ae9
 8003adc:	08003af9 	.word	0x08003af9
 8003ae0:	08003af1 	.word	0x08003af1
 8003ae4:	08003b01 	.word	0x08003b01
 8003ae8:	2301      	movs	r3, #1
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e116      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af6:	e112      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003af8:	2304      	movs	r3, #4
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afe:	e10e      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b00:	2308      	movs	r3, #8
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e10a      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0e:	e106      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a7c      	ldr	r2, [pc, #496]	@ (8003d08 <UART_SetConfig+0x2d0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d138      	bne.n	8003b8c <UART_SetConfig+0x154>
 8003b1a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	d82d      	bhi.n	8003b84 <UART_SetConfig+0x14c>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <UART_SetConfig+0xf8>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003b65 	.word	0x08003b65
 8003b34:	08003b85 	.word	0x08003b85
 8003b38:	08003b85 	.word	0x08003b85
 8003b3c:	08003b85 	.word	0x08003b85
 8003b40:	08003b75 	.word	0x08003b75
 8003b44:	08003b85 	.word	0x08003b85
 8003b48:	08003b85 	.word	0x08003b85
 8003b4c:	08003b85 	.word	0x08003b85
 8003b50:	08003b6d 	.word	0x08003b6d
 8003b54:	08003b85 	.word	0x08003b85
 8003b58:	08003b85 	.word	0x08003b85
 8003b5c:	08003b85 	.word	0x08003b85
 8003b60:	08003b7d 	.word	0x08003b7d
 8003b64:	2300      	movs	r3, #0
 8003b66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b6a:	e0d8      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b72:	e0d4      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b74:	2304      	movs	r3, #4
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b7a:	e0d0      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b82:	e0cc      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b84:	2310      	movs	r3, #16
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b8a:	e0c8      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a5e      	ldr	r2, [pc, #376]	@ (8003d0c <UART_SetConfig+0x2d4>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d125      	bne.n	8003be2 <UART_SetConfig+0x1aa>
 8003b96:	4b5b      	ldr	r3, [pc, #364]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003ba0:	2b30      	cmp	r3, #48	@ 0x30
 8003ba2:	d016      	beq.n	8003bd2 <UART_SetConfig+0x19a>
 8003ba4:	2b30      	cmp	r3, #48	@ 0x30
 8003ba6:	d818      	bhi.n	8003bda <UART_SetConfig+0x1a2>
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d00a      	beq.n	8003bc2 <UART_SetConfig+0x18a>
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d814      	bhi.n	8003bda <UART_SetConfig+0x1a2>
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d002      	beq.n	8003bba <UART_SetConfig+0x182>
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d008      	beq.n	8003bca <UART_SetConfig+0x192>
 8003bb8:	e00f      	b.n	8003bda <UART_SetConfig+0x1a2>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc0:	e0ad      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bc8:	e0a9      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003bca:	2304      	movs	r3, #4
 8003bcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd0:	e0a5      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003bd8:	e0a1      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003bda:	2310      	movs	r3, #16
 8003bdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003be0:	e09d      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a4a      	ldr	r2, [pc, #296]	@ (8003d10 <UART_SetConfig+0x2d8>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d125      	bne.n	8003c38 <UART_SetConfig+0x200>
 8003bec:	4b45      	ldr	r3, [pc, #276]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003bf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bf8:	d016      	beq.n	8003c28 <UART_SetConfig+0x1f0>
 8003bfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8003bfc:	d818      	bhi.n	8003c30 <UART_SetConfig+0x1f8>
 8003bfe:	2b80      	cmp	r3, #128	@ 0x80
 8003c00:	d00a      	beq.n	8003c18 <UART_SetConfig+0x1e0>
 8003c02:	2b80      	cmp	r3, #128	@ 0x80
 8003c04:	d814      	bhi.n	8003c30 <UART_SetConfig+0x1f8>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d002      	beq.n	8003c10 <UART_SetConfig+0x1d8>
 8003c0a:	2b40      	cmp	r3, #64	@ 0x40
 8003c0c:	d008      	beq.n	8003c20 <UART_SetConfig+0x1e8>
 8003c0e:	e00f      	b.n	8003c30 <UART_SetConfig+0x1f8>
 8003c10:	2300      	movs	r3, #0
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c16:	e082      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c1e:	e07e      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c20:	2304      	movs	r3, #4
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c26:	e07a      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c28:	2308      	movs	r3, #8
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c2e:	e076      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c30:	2310      	movs	r3, #16
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c36:	e072      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a35      	ldr	r2, [pc, #212]	@ (8003d14 <UART_SetConfig+0x2dc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d12a      	bne.n	8003c98 <UART_SetConfig+0x260>
 8003c42:	4b30      	ldr	r3, [pc, #192]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c50:	d01a      	beq.n	8003c88 <UART_SetConfig+0x250>
 8003c52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c56:	d81b      	bhi.n	8003c90 <UART_SetConfig+0x258>
 8003c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c5c:	d00c      	beq.n	8003c78 <UART_SetConfig+0x240>
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c62:	d815      	bhi.n	8003c90 <UART_SetConfig+0x258>
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d003      	beq.n	8003c70 <UART_SetConfig+0x238>
 8003c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c6c:	d008      	beq.n	8003c80 <UART_SetConfig+0x248>
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x258>
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c76:	e052      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c7e:	e04e      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c80:	2304      	movs	r3, #4
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c86:	e04a      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c8e:	e046      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c90:	2310      	movs	r3, #16
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003c96:	e042      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <UART_SetConfig+0x2c4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d13a      	bne.n	8003d18 <UART_SetConfig+0x2e0>
 8003ca2:	4b18      	ldr	r3, [pc, #96]	@ (8003d04 <UART_SetConfig+0x2cc>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003cac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cb0:	d01a      	beq.n	8003ce8 <UART_SetConfig+0x2b0>
 8003cb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003cb6:	d81b      	bhi.n	8003cf0 <UART_SetConfig+0x2b8>
 8003cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cbc:	d00c      	beq.n	8003cd8 <UART_SetConfig+0x2a0>
 8003cbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cc2:	d815      	bhi.n	8003cf0 <UART_SetConfig+0x2b8>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <UART_SetConfig+0x298>
 8003cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ccc:	d008      	beq.n	8003ce0 <UART_SetConfig+0x2a8>
 8003cce:	e00f      	b.n	8003cf0 <UART_SetConfig+0x2b8>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cd6:	e022      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cde:	e01e      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce6:	e01a      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cee:	e016      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf6:	e012      	b.n	8003d1e <UART_SetConfig+0x2e6>
 8003cf8:	efff69f3 	.word	0xefff69f3
 8003cfc:	40008000 	.word	0x40008000
 8003d00:	40013800 	.word	0x40013800
 8003d04:	40021000 	.word	0x40021000
 8003d08:	40004400 	.word	0x40004400
 8003d0c:	40004800 	.word	0x40004800
 8003d10:	40004c00 	.word	0x40004c00
 8003d14:	40005000 	.word	0x40005000
 8003d18:	2310      	movs	r3, #16
 8003d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a9f      	ldr	r2, [pc, #636]	@ (8003fa0 <UART_SetConfig+0x568>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d17a      	bne.n	8003e1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d824      	bhi.n	8003d7a <UART_SetConfig+0x342>
 8003d30:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <UART_SetConfig+0x300>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d5d 	.word	0x08003d5d
 8003d3c:	08003d7b 	.word	0x08003d7b
 8003d40:	08003d65 	.word	0x08003d65
 8003d44:	08003d7b 	.word	0x08003d7b
 8003d48:	08003d6b 	.word	0x08003d6b
 8003d4c:	08003d7b 	.word	0x08003d7b
 8003d50:	08003d7b 	.word	0x08003d7b
 8003d54:	08003d7b 	.word	0x08003d7b
 8003d58:	08003d73 	.word	0x08003d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f7fe f9c8 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003d60:	61f8      	str	r0, [r7, #28]
        break;
 8003d62:	e010      	b.n	8003d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d64:	4b8f      	ldr	r3, [pc, #572]	@ (8003fa4 <UART_SetConfig+0x56c>)
 8003d66:	61fb      	str	r3, [r7, #28]
        break;
 8003d68:	e00d      	b.n	8003d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d6a:	f7fe f929 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8003d6e:	61f8      	str	r0, [r7, #28]
        break;
 8003d70:	e009      	b.n	8003d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d76:	61fb      	str	r3, [r7, #28]
        break;
 8003d78:	e005      	b.n	8003d86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80fb 	beq.w	8003f84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	4413      	add	r3, r2
 8003d98:	69fa      	ldr	r2, [r7, #28]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d305      	bcc.n	8003daa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d903      	bls.n	8003db2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003db0:	e0e8      	b.n	8003f84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	2200      	movs	r2, #0
 8003db6:	461c      	mov	r4, r3
 8003db8:	4615      	mov	r5, r2
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	022b      	lsls	r3, r5, #8
 8003dc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003dc8:	0222      	lsls	r2, r4, #8
 8003dca:	68f9      	ldr	r1, [r7, #12]
 8003dcc:	6849      	ldr	r1, [r1, #4]
 8003dce:	0849      	lsrs	r1, r1, #1
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	4688      	mov	r8, r1
 8003dd4:	4681      	mov	r9, r0
 8003dd6:	eb12 0a08 	adds.w	sl, r2, r8
 8003dda:	eb43 0b09 	adc.w	fp, r3, r9
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	603b      	str	r3, [r7, #0]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dec:	4650      	mov	r0, sl
 8003dee:	4659      	mov	r1, fp
 8003df0:	f7fc fa3e 	bl	8000270 <__aeabi_uldivmod>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4613      	mov	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e02:	d308      	bcc.n	8003e16 <UART_SetConfig+0x3de>
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e0a:	d204      	bcs.n	8003e16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e0b6      	b.n	8003f84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003e1c:	e0b2      	b.n	8003f84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e26:	d15e      	bne.n	8003ee6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003e28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d828      	bhi.n	8003e82 <UART_SetConfig+0x44a>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <UART_SetConfig+0x400>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e65 	.word	0x08003e65
 8003e40:	08003e6d 	.word	0x08003e6d
 8003e44:	08003e83 	.word	0x08003e83
 8003e48:	08003e73 	.word	0x08003e73
 8003e4c:	08003e83 	.word	0x08003e83
 8003e50:	08003e83 	.word	0x08003e83
 8003e54:	08003e83 	.word	0x08003e83
 8003e58:	08003e7b 	.word	0x08003e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e5c:	f7fe f948 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003e60:	61f8      	str	r0, [r7, #28]
        break;
 8003e62:	e014      	b.n	8003e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7fe f95a 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 8003e68:	61f8      	str	r0, [r7, #28]
        break;
 8003e6a:	e010      	b.n	8003e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8003fa4 <UART_SetConfig+0x56c>)
 8003e6e:	61fb      	str	r3, [r7, #28]
        break;
 8003e70:	e00d      	b.n	8003e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e72:	f7fe f8a5 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8003e76:	61f8      	str	r0, [r7, #28]
        break;
 8003e78:	e009      	b.n	8003e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e7e:	61fb      	str	r3, [r7, #28]
        break;
 8003e80:	e005      	b.n	8003e8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d077      	beq.n	8003f84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	005a      	lsls	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b0f      	cmp	r3, #15
 8003eae:	d916      	bls.n	8003ede <UART_SetConfig+0x4a6>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb6:	d212      	bcs.n	8003ede <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	f023 030f 	bic.w	r3, r3, #15
 8003ec0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	8afb      	ldrh	r3, [r7, #22]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	8afa      	ldrh	r2, [r7, #22]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	e052      	b.n	8003f84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ee4:	e04e      	b.n	8003f84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d827      	bhi.n	8003f3e <UART_SetConfig+0x506>
 8003eee:	a201      	add	r2, pc, #4	@ (adr r2, 8003ef4 <UART_SetConfig+0x4bc>)
 8003ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef4:	08003f19 	.word	0x08003f19
 8003ef8:	08003f21 	.word	0x08003f21
 8003efc:	08003f29 	.word	0x08003f29
 8003f00:	08003f3f 	.word	0x08003f3f
 8003f04:	08003f2f 	.word	0x08003f2f
 8003f08:	08003f3f 	.word	0x08003f3f
 8003f0c:	08003f3f 	.word	0x08003f3f
 8003f10:	08003f3f 	.word	0x08003f3f
 8003f14:	08003f37 	.word	0x08003f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f18:	f7fe f8ea 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8003f1c:	61f8      	str	r0, [r7, #28]
        break;
 8003f1e:	e014      	b.n	8003f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f20:	f7fe f8fc 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 8003f24:	61f8      	str	r0, [r7, #28]
        break;
 8003f26:	e010      	b.n	8003f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f28:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa4 <UART_SetConfig+0x56c>)
 8003f2a:	61fb      	str	r3, [r7, #28]
        break;
 8003f2c:	e00d      	b.n	8003f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f2e:	f7fe f847 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8003f32:	61f8      	str	r0, [r7, #28]
        break;
 8003f34:	e009      	b.n	8003f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f3a:	61fb      	str	r3, [r7, #28]
        break;
 8003f3c:	e005      	b.n	8003f4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f48:	bf00      	nop
    }

    if (pclk != 0U)
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d019      	beq.n	8003f84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	085a      	lsrs	r2, r3, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b0f      	cmp	r3, #15
 8003f68:	d909      	bls.n	8003f7e <UART_SetConfig+0x546>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f70:	d205      	bcs.n	8003f7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	60da      	str	r2, [r3, #12]
 8003f7c:	e002      	b.n	8003f84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003f90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	@ 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40008000 	.word	0x40008000
 8003fa4:	00f42400 	.word	0x00f42400

08003fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	f003 0304 	and.w	r3, r3, #4
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	f003 0320 	and.w	r3, r3, #32
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01a      	beq.n	80040be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a6:	d10a      	bne.n	80040be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	605a      	str	r2, [r3, #4]
  }
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b098      	sub	sp, #96	@ 0x60
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040fc:	f7fc fee0 	bl	8000ec0 <HAL_GetTick>
 8004100:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b08      	cmp	r3, #8
 800410e:	d12e      	bne.n	800416e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004110:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004118:	2200      	movs	r2, #0
 800411a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f88c 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d021      	beq.n	800416e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800413e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004148:	647b      	str	r3, [r7, #68]	@ 0x44
 800414a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800414e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e6      	bne.n	800412a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2220      	movs	r2, #32
 8004160:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e062      	b.n	8004234 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b04      	cmp	r3, #4
 800417a:	d149      	bne.n	8004210 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004184:	2200      	movs	r2, #0
 8004186:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f856 	bl	800423c <UART_WaitOnFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03c      	beq.n	8004210 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	623b      	str	r3, [r7, #32]
   return(result);
 80041a4:	6a3b      	ldr	r3, [r7, #32]
 80041a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	461a      	mov	r2, r3
 80041b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80041b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e6      	bne.n	8004196 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3308      	adds	r3, #8
 80041ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041e8:	61fa      	str	r2, [r7, #28]
 80041ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	69b9      	ldr	r1, [r7, #24]
 80041ee:	69fa      	ldr	r2, [r7, #28]
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	617b      	str	r3, [r7, #20]
   return(result);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e011      	b.n	8004234 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2220      	movs	r2, #32
 800421a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3758      	adds	r7, #88	@ 0x58
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	4613      	mov	r3, r2
 800424a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424c:	e04f      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004254:	d04b      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004256:	f7fc fe33 	bl	8000ec0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	429a      	cmp	r2, r3
 8004264:	d302      	bcc.n	800426c <UART_WaitOnFlagUntilTimeout+0x30>
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e04e      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	d037      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2b80      	cmp	r3, #128	@ 0x80
 8004282:	d034      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b40      	cmp	r3, #64	@ 0x40
 8004288:	d031      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b08      	cmp	r3, #8
 8004296:	d110      	bne.n	80042ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2208      	movs	r2, #8
 800429e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f838 	bl	8004316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2208      	movs	r2, #8
 80042aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e029      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042c8:	d111      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80042d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f81e 	bl	8004316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e00f      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	69da      	ldr	r2, [r3, #28]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d0a0      	beq.n	800424e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004316:	b480      	push	{r7}
 8004318:	b095      	sub	sp, #84	@ 0x54
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800433c:	643b      	str	r3, [r7, #64]	@ 0x40
 800433e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004342:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e6      	bne.n	800431e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004370:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004372:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004388:	2b01      	cmp	r3, #1
 800438a:	d118      	bne.n	80043be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	60bb      	str	r3, [r7, #8]
   return(result);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	f023 0310 	bic.w	r3, r3, #16
 80043a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043aa:	61bb      	str	r3, [r7, #24]
 80043ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6979      	ldr	r1, [r7, #20]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	613b      	str	r3, [r7, #16]
   return(result);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e6      	bne.n	800438c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80043d2:	bf00      	nop
 80043d4:	3754      	adds	r7, #84	@ 0x54
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7ff fb05 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b088      	sub	sp, #32
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004426:	61fb      	str	r3, [r7, #28]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	613b      	str	r3, [r7, #16]
   return(result);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e6      	bne.n	8004412 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2220      	movs	r2, #32
 8004448:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7ff fad1 	bl	80039f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004456:	bf00      	nop
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
	...

08004474 <__NVIC_SetPriority>:
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004484:	2b00      	cmp	r3, #0
 8004486:	db0a      	blt.n	800449e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	b2da      	uxtb	r2, r3
 800448c:	490c      	ldr	r1, [pc, #48]	@ (80044c0 <__NVIC_SetPriority+0x4c>)
 800448e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004492:	0112      	lsls	r2, r2, #4
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	440b      	add	r3, r1
 8004498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800449c:	e00a      	b.n	80044b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	4908      	ldr	r1, [pc, #32]	@ (80044c4 <__NVIC_SetPriority+0x50>)
 80044a4:	79fb      	ldrb	r3, [r7, #7]
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	3b04      	subs	r3, #4
 80044ac:	0112      	lsls	r2, r2, #4
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	440b      	add	r3, r1
 80044b2:	761a      	strb	r2, [r3, #24]
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000e100 	.word	0xe000e100
 80044c4:	e000ed00 	.word	0xe000ed00

080044c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044cc:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <SysTick_Handler+0x1c>)
 80044ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044d0:	f001 fec0 	bl	8006254 <xTaskGetSchedulerState>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d001      	beq.n	80044de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044da:	f002 fdb5 	bl	8007048 <xPortSysTickHandler>
  }
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	e000e010 	.word	0xe000e010

080044e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044ec:	2100      	movs	r1, #0
 80044ee:	f06f 0004 	mvn.w	r0, #4
 80044f2:	f7ff ffbf 	bl	8004474 <__NVIC_SetPriority>
#endif
}
 80044f6:	bf00      	nop
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004502:	f3ef 8305 	mrs	r3, IPSR
 8004506:	603b      	str	r3, [r7, #0]
  return(result);
 8004508:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800450e:	f06f 0305 	mvn.w	r3, #5
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	e00c      	b.n	8004530 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004516:	4b0a      	ldr	r3, [pc, #40]	@ (8004540 <osKernelInitialize+0x44>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d105      	bne.n	800452a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800451e:	4b08      	ldr	r3, [pc, #32]	@ (8004540 <osKernelInitialize+0x44>)
 8004520:	2201      	movs	r2, #1
 8004522:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004524:	2300      	movs	r3, #0
 8004526:	607b      	str	r3, [r7, #4]
 8004528:	e002      	b.n	8004530 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800452a:	f04f 33ff 	mov.w	r3, #4294967295
 800452e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004530:	687b      	ldr	r3, [r7, #4]
}
 8004532:	4618      	mov	r0, r3
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	20000200 	.word	0x20000200

08004544 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800454a:	f3ef 8305 	mrs	r3, IPSR
 800454e:	603b      	str	r3, [r7, #0]
  return(result);
 8004550:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004556:	f06f 0305 	mvn.w	r3, #5
 800455a:	607b      	str	r3, [r7, #4]
 800455c:	e010      	b.n	8004580 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800455e:	4b0b      	ldr	r3, [pc, #44]	@ (800458c <osKernelStart+0x48>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d109      	bne.n	800457a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004566:	f7ff ffbf 	bl	80044e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800456a:	4b08      	ldr	r3, [pc, #32]	@ (800458c <osKernelStart+0x48>)
 800456c:	2202      	movs	r2, #2
 800456e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004570:	f001 fa0c 	bl	800598c <vTaskStartScheduler>
      stat = osOK;
 8004574:	2300      	movs	r3, #0
 8004576:	607b      	str	r3, [r7, #4]
 8004578:	e002      	b.n	8004580 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295
 800457e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004580:	687b      	ldr	r3, [r7, #4]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20000200 	.word	0x20000200

08004590 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004590:	b580      	push	{r7, lr}
 8004592:	b08e      	sub	sp, #56	@ 0x38
 8004594:	af04      	add	r7, sp, #16
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800459c:	2300      	movs	r3, #0
 800459e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a0:	f3ef 8305 	mrs	r3, IPSR
 80045a4:	617b      	str	r3, [r7, #20]
  return(result);
 80045a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d17e      	bne.n	80046aa <osThreadNew+0x11a>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d07b      	beq.n	80046aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80045b6:	2318      	movs	r3, #24
 80045b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80045be:	f04f 33ff 	mov.w	r3, #4294967295
 80045c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d045      	beq.n	8004656 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d002      	beq.n	80045d8 <osThreadNew+0x48>
        name = attr->name;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d002      	beq.n	80045e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <osThreadNew+0x6e>
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	2b38      	cmp	r3, #56	@ 0x38
 80045f0:	d805      	bhi.n	80045fe <osThreadNew+0x6e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <osThreadNew+0x72>
        return (NULL);
 80045fe:	2300      	movs	r3, #0
 8004600:	e054      	b.n	80046ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	089b      	lsrs	r3, r3, #2
 8004610:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00e      	beq.n	8004638 <osThreadNew+0xa8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2ba7      	cmp	r3, #167	@ 0xa7
 8004620:	d90a      	bls.n	8004638 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004626:	2b00      	cmp	r3, #0
 8004628:	d006      	beq.n	8004638 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <osThreadNew+0xa8>
        mem = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e010      	b.n	800465a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10c      	bne.n	800465a <osThreadNew+0xca>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d108      	bne.n	800465a <osThreadNew+0xca>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <osThreadNew+0xca>
          mem = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
 8004654:	e001      	b.n	800465a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d110      	bne.n	8004682 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004668:	9202      	str	r2, [sp, #8]
 800466a:	9301      	str	r3, [sp, #4]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6a3a      	ldr	r2, [r7, #32]
 8004674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 ff94 	bl	80055a4 <xTaskCreateStatic>
 800467c:	4603      	mov	r3, r0
 800467e:	613b      	str	r3, [r7, #16]
 8004680:	e013      	b.n	80046aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d110      	bne.n	80046aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	b29a      	uxth	r2, r3
 800468c:	f107 0310 	add.w	r3, r7, #16
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 ffe2 	bl	8005664 <xTaskCreate>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d001      	beq.n	80046aa <osThreadNew+0x11a>
            hTask = NULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80046aa:	693b      	ldr	r3, [r7, #16]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3728      	adds	r7, #40	@ 0x28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a07      	ldr	r2, [pc, #28]	@ (80046e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80046c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4a06      	ldr	r2, [pc, #24]	@ (80046e4 <vApplicationGetIdleTaskMemory+0x30>)
 80046ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2280      	movs	r2, #128	@ 0x80
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000204 	.word	0x20000204
 80046e4:	200002ac 	.word	0x200002ac

080046e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a07      	ldr	r2, [pc, #28]	@ (8004714 <vApplicationGetTimerTaskMemory+0x2c>)
 80046f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a06      	ldr	r2, [pc, #24]	@ (8004718 <vApplicationGetTimerTaskMemory+0x30>)
 80046fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004706:	601a      	str	r2, [r3, #0]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	200004ac 	.word	0x200004ac
 8004718:	20000554 	.word	0x20000554

0800471c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f103 0208 	add.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f103 0208 	add.w	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 0208 	add.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d103      	bne.n	80047de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e00c      	b.n	80047f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3308      	adds	r3, #8
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e002      	b.n	80047ec <vListInsert+0x2e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d2f6      	bcs.n	80047e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6892      	ldr	r2, [r2, #8]
 8004846:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	d103      	bne.n	8004864 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1e5a      	subs	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048b0:	f002 fb3a 	bl	8006f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048bc:	68f9      	ldr	r1, [r7, #12]
 80048be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	441a      	add	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e0:	3b01      	subs	r3, #1
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048e6:	fb01 f303 	mul.w	r3, r1, r3
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	22ff      	movs	r2, #255	@ 0xff
 80048f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	22ff      	movs	r2, #255	@ 0xff
 80048fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d114      	bne.n	8004930 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01a      	beq.n	8004944 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3310      	adds	r3, #16
 8004912:	4618      	mov	r0, r3
 8004914:	f001 fad8 	bl	8005ec8 <xTaskRemoveFromEventList>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d012      	beq.n	8004944 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <xQueueGenericReset+0xd0>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	e009      	b.n	8004944 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3310      	adds	r3, #16
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff fef1 	bl	800471c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	3324      	adds	r3, #36	@ 0x24
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff feec 	bl	800471c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004944:	f002 fb22 	bl	8006f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004948:	2301      	movs	r3, #1
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	e000ed04 	.word	0xe000ed04

08004958 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004958:	b580      	push	{r7, lr}
 800495a:	b08e      	sub	sp, #56	@ 0x38
 800495c:	af02      	add	r7, sp, #8
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800497e:	bf00      	nop
 8004980:	bf00      	nop
 8004982:	e7fd      	b.n	8004980 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <xQueueGenericCreateStatic+0x56>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <xQueueGenericCreateStatic+0x5a>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <xQueueGenericCreateStatic+0x5c>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	623b      	str	r3, [r7, #32]
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <xQueueGenericCreateStatic+0x84>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <xQueueGenericCreateStatic+0x88>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <xQueueGenericCreateStatic+0x8a>
 80049e0:	2300      	movs	r3, #0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10b      	bne.n	80049fe <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	61fb      	str	r3, [r7, #28]
}
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	e7fd      	b.n	80049fa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049fe:	2350      	movs	r3, #80	@ 0x50
 8004a00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b50      	cmp	r3, #80	@ 0x50
 8004a06:	d00b      	beq.n	8004a20 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	61bb      	str	r3, [r7, #24]
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a20:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00d      	beq.n	8004a48 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a34:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f840 	bl	8004ac8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3730      	adds	r7, #48	@ 0x30
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b08a      	sub	sp, #40	@ 0x28
 8004a56:	af02      	add	r7, sp, #8
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	613b      	str	r3, [r7, #16]
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	3350      	adds	r3, #80	@ 0x50
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f002 fb6d 	bl	800716c <pvPortMalloc>
 8004a92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d011      	beq.n	8004abe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	3350      	adds	r3, #80	@ 0x50
 8004aa2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004aac:	79fa      	ldrb	r2, [r7, #7]
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f805 	bl	8004ac8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004abe:	69bb      	ldr	r3, [r7, #24]
	}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3720      	adds	r7, #32
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d103      	bne.n	8004ae4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004af6:	2101      	movs	r1, #1
 8004af8:	69b8      	ldr	r0, [r7, #24]
 8004afa:	f7ff fec3 	bl	8004884 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00e      	beq.n	8004b3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2200      	movs	r2, #0
 8004b32:	2100      	movs	r1, #0
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f81d 	bl	8004b74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b086      	sub	sp, #24
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	4603      	mov	r3, r0
 8004b4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	461a      	mov	r2, r3
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	6978      	ldr	r0, [r7, #20]
 8004b5c:	f7ff ff79 	bl	8004a52 <xQueueGenericCreate>
 8004b60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff ffd3 	bl	8004b0e <prvInitialiseMutex>

		return xNewQueue;
 8004b68:	68fb      	ldr	r3, [r7, #12]
	}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b08e      	sub	sp, #56	@ 0x38
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b82:	2300      	movs	r3, #0
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <xQueueGenericSend+0x34>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <xQueueGenericSend+0x42>
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <xQueueGenericSend+0x46>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueGenericSend+0x48>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <xQueueGenericSend+0x64>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d103      	bne.n	8004be6 <xQueueGenericSend+0x72>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d101      	bne.n	8004bea <xQueueGenericSend+0x76>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <xQueueGenericSend+0x78>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d10b      	bne.n	8004c08 <xQueueGenericSend+0x94>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	623b      	str	r3, [r7, #32]
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	e7fd      	b.n	8004c04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c08:	f001 fb24 	bl	8006254 <xTaskGetSchedulerState>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d102      	bne.n	8004c18 <xQueueGenericSend+0xa4>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <xQueueGenericSend+0xa8>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <xQueueGenericSend+0xaa>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10b      	bne.n	8004c3a <xQueueGenericSend+0xc6>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	61fb      	str	r3, [r7, #28]
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop
 8004c38:	e7fd      	b.n	8004c36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c3a:	f002 f975 	bl	8006f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d302      	bcc.n	8004c50 <xQueueGenericSend+0xdc>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d129      	bne.n	8004ca4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	68b9      	ldr	r1, [r7, #8]
 8004c54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c56:	f000 fb37 	bl	80052c8 <prvCopyDataToQueue>
 8004c5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d010      	beq.n	8004c86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	3324      	adds	r3, #36	@ 0x24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f001 f92d 	bl	8005ec8 <xTaskRemoveFromEventList>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c74:	4b3f      	ldr	r3, [pc, #252]	@ (8004d74 <xQueueGenericSend+0x200>)
 8004c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	e00a      	b.n	8004c9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d007      	beq.n	8004c9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c8c:	4b39      	ldr	r3, [pc, #228]	@ (8004d74 <xQueueGenericSend+0x200>)
 8004c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c9c:	f002 f976 	bl	8006f8c <vPortExitCritical>
				return pdPASS;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e063      	b.n	8004d6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004caa:	f002 f96f 	bl	8006f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e05c      	b.n	8004d6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d106      	bne.n	8004cc6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cb8:	f107 0314 	add.w	r3, r7, #20
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 f967 	bl	8005f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cc6:	f002 f961 	bl	8006f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cca:	f000 fecf 	bl	8005a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cce:	f002 f92b 	bl	8006f28 <vPortEnterCritical>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004cd8:	b25b      	sxtb	r3, r3
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d103      	bne.n	8004ce8 <xQueueGenericSend+0x174>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cee:	b25b      	sxtb	r3, r3
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d103      	bne.n	8004cfe <xQueueGenericSend+0x18a>
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cfe:	f002 f945 	bl	8006f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d02:	1d3a      	adds	r2, r7, #4
 8004d04:	f107 0314 	add.w	r3, r7, #20
 8004d08:	4611      	mov	r1, r2
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f001 f956 	bl	8005fbc <xTaskCheckForTimeOut>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d124      	bne.n	8004d60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004d16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d18:	f000 fbce 	bl	80054b8 <prvIsQueueFull>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d018      	beq.n	8004d54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	3310      	adds	r3, #16
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 f87a 	bl	8005e24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d32:	f000 fb59 	bl	80053e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d36:	f000 fea7 	bl	8005a88 <xTaskResumeAll>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f47f af7c 	bne.w	8004c3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d42:	4b0c      	ldr	r3, [pc, #48]	@ (8004d74 <xQueueGenericSend+0x200>)
 8004d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	e772      	b.n	8004c3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d56:	f000 fb47 	bl	80053e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d5a:	f000 fe95 	bl	8005a88 <xTaskResumeAll>
 8004d5e:	e76c      	b.n	8004c3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d62:	f000 fb41 	bl	80053e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d66:	f000 fe8f 	bl	8005a88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3738      	adds	r7, #56	@ 0x38
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	e000ed04 	.word	0xe000ed04

08004d78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b090      	sub	sp, #64	@ 0x40
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <xQueueGenericSendFromISR+0x3e>
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <xQueueGenericSendFromISR+0x42>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <xQueueGenericSendFromISR+0x44>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d103      	bne.n	8004de6 <xQueueGenericSendFromISR+0x6e>
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <xQueueGenericSendFromISR+0x72>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <xQueueGenericSendFromISR+0x74>
 8004dea:	2300      	movs	r3, #0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10b      	bne.n	8004e08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	623b      	str	r3, [r7, #32]
}
 8004e02:	bf00      	nop
 8004e04:	bf00      	nop
 8004e06:	e7fd      	b.n	8004e04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e08:	f002 f96e 	bl	80070e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004e0c:	f3ef 8211 	mrs	r2, BASEPRI
 8004e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	61fa      	str	r2, [r7, #28]
 8004e22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004e24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d302      	bcc.n	8004e3a <xQueueGenericSendFromISR+0xc2>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d12f      	bne.n	8004e9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e50:	f000 fa3a 	bl	80052c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d112      	bne.n	8004e84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d016      	beq.n	8004e94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	3324      	adds	r3, #36	@ 0x24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f001 f82c 	bl	8005ec8 <xTaskRemoveFromEventList>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00e      	beq.n	8004e94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	e007      	b.n	8004e94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e88:	3301      	adds	r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	b25a      	sxtb	r2, r3
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004e94:	2301      	movs	r3, #1
 8004e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004e98:	e001      	b.n	8004e9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ea8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3740      	adds	r7, #64	@ 0x40
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08c      	sub	sp, #48	@ 0x30
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <xQueueReceive+0x32>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	623b      	str	r3, [r7, #32]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d103      	bne.n	8004ef4 <xQueueReceive+0x40>
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <xQueueReceive+0x44>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <xQueueReceive+0x46>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10b      	bne.n	8004f16 <xQueueReceive+0x62>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	61fb      	str	r3, [r7, #28]
}
 8004f10:	bf00      	nop
 8004f12:	bf00      	nop
 8004f14:	e7fd      	b.n	8004f12 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f16:	f001 f99d 	bl	8006254 <xTaskGetSchedulerState>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d102      	bne.n	8004f26 <xQueueReceive+0x72>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <xQueueReceive+0x76>
 8004f26:	2301      	movs	r3, #1
 8004f28:	e000      	b.n	8004f2c <xQueueReceive+0x78>
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d10b      	bne.n	8004f48 <xQueueReceive+0x94>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	61bb      	str	r3, [r7, #24]
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f48:	f001 ffee 	bl	8006f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d01f      	beq.n	8004f98 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f5c:	f000 fa1e 	bl	800539c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f62:	1e5a      	subs	r2, r3, #1
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00f      	beq.n	8004f90 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f72:	3310      	adds	r3, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 ffa7 	bl	8005ec8 <xTaskRemoveFromEventList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f80:	4b3c      	ldr	r3, [pc, #240]	@ (8005074 <xQueueReceive+0x1c0>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f90:	f001 fffc 	bl	8006f8c <vPortExitCritical>
				return pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e069      	b.n	800506c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d103      	bne.n	8004fa6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f9e:	f001 fff5 	bl	8006f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	e062      	b.n	800506c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fac:	f107 0310 	add.w	r3, r7, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 ffed 	bl	8005f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fba:	f001 ffe7 	bl	8006f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fbe:	f000 fd55 	bl	8005a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fc2:	f001 ffb1 	bl	8006f28 <vPortEnterCritical>
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fcc:	b25b      	sxtb	r3, r3
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d103      	bne.n	8004fdc <xQueueReceive+0x128>
 8004fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fe2:	b25b      	sxtb	r3, r3
 8004fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe8:	d103      	bne.n	8004ff2 <xQueueReceive+0x13e>
 8004fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ff2:	f001 ffcb 	bl	8006f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ff6:	1d3a      	adds	r2, r7, #4
 8004ff8:	f107 0310 	add.w	r3, r7, #16
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 ffdc 	bl	8005fbc <xTaskCheckForTimeOut>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d123      	bne.n	8005052 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800500a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800500c:	f000 fa3e 	bl	800548c <prvIsQueueEmpty>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d017      	beq.n	8005046 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005018:	3324      	adds	r3, #36	@ 0x24
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4611      	mov	r1, r2
 800501e:	4618      	mov	r0, r3
 8005020:	f000 ff00 	bl	8005e24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005026:	f000 f9df 	bl	80053e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800502a:	f000 fd2d 	bl	8005a88 <xTaskResumeAll>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d189      	bne.n	8004f48 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005034:	4b0f      	ldr	r3, [pc, #60]	@ (8005074 <xQueueReceive+0x1c0>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	e780      	b.n	8004f48 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005048:	f000 f9ce 	bl	80053e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800504c:	f000 fd1c 	bl	8005a88 <xTaskResumeAll>
 8005050:	e77a      	b.n	8004f48 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005054:	f000 f9c8 	bl	80053e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005058:	f000 fd16 	bl	8005a88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800505c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800505e:	f000 fa15 	bl	800548c <prvIsQueueEmpty>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	f43f af6f 	beq.w	8004f48 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800506a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800506c:	4618      	mov	r0, r3
 800506e:	3730      	adds	r7, #48	@ 0x30
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	e000ed04 	.word	0xe000ed04

08005078 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08e      	sub	sp, #56	@ 0x38
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800508a:	2300      	movs	r3, #0
 800508c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800508e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	623b      	str	r3, [r7, #32]
}
 80050a6:	bf00      	nop
 80050a8:	bf00      	nop
 80050aa:	e7fd      	b.n	80050a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80050ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80050b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	f3bf 8f4f 	dsb	sy
 80050c4:	61fb      	str	r3, [r7, #28]
}
 80050c6:	bf00      	nop
 80050c8:	bf00      	nop
 80050ca:	e7fd      	b.n	80050c8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80050cc:	f001 f8c2 	bl	8006254 <xTaskGetSchedulerState>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <xQueueSemaphoreTake+0x64>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <xQueueSemaphoreTake+0x68>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <xQueueSemaphoreTake+0x6a>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <xQueueSemaphoreTake+0x86>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	61bb      	str	r3, [r7, #24]
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	e7fd      	b.n	80050fa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050fe:	f001 ff13 	bl	8006f28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d024      	beq.n	8005158 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d104      	bne.n	8005128 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800511e:	f001 fa13 	bl	8006548 <pvTaskIncrementMutexHeldCount>
 8005122:	4602      	mov	r2, r0
 8005124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005126:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00f      	beq.n	8005150 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005132:	3310      	adds	r3, #16
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fec7 	bl	8005ec8 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d007      	beq.n	8005150 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005140:	4b54      	ldr	r3, [pc, #336]	@ (8005294 <xQueueSemaphoreTake+0x21c>)
 8005142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005150:	f001 ff1c 	bl	8006f8c <vPortExitCritical>
				return pdPASS;
 8005154:	2301      	movs	r3, #1
 8005156:	e098      	b.n	800528a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d112      	bne.n	8005184 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00b      	beq.n	800517c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
 8005174:	617b      	str	r3, [r7, #20]
}
 8005176:	bf00      	nop
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800517c:	f001 ff06 	bl	8006f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005180:	2300      	movs	r3, #0
 8005182:	e082      	b.n	800528a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800518a:	f107 030c 	add.w	r3, r7, #12
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fefe 	bl	8005f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005194:	2301      	movs	r3, #1
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005198:	f001 fef8 	bl	8006f8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800519c:	f000 fc66 	bl	8005a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051a0:	f001 fec2 	bl	8006f28 <vPortEnterCritical>
 80051a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051aa:	b25b      	sxtb	r3, r3
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d103      	bne.n	80051ba <xQueueSemaphoreTake+0x142>
 80051b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d103      	bne.n	80051d0 <xQueueSemaphoreTake+0x158>
 80051c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051d0:	f001 fedc 	bl	8006f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051d4:	463a      	mov	r2, r7
 80051d6:	f107 030c 	add.w	r3, r7, #12
 80051da:	4611      	mov	r1, r2
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 feed 	bl	8005fbc <xTaskCheckForTimeOut>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d132      	bne.n	800524e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80051ea:	f000 f94f 	bl	800548c <prvIsQueueEmpty>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d026      	beq.n	8005242 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d109      	bne.n	8005210 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80051fc:	f001 fe94 	bl	8006f28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f001 f843 	bl	8006290 <xTaskPriorityInherit>
 800520a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800520c:	f001 febe 	bl	8006f8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005212:	3324      	adds	r3, #36	@ 0x24
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	4611      	mov	r1, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fe03 	bl	8005e24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800521e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005220:	f000 f8e2 	bl	80053e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005224:	f000 fc30 	bl	8005a88 <xTaskResumeAll>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	f47f af67 	bne.w	80050fe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005230:	4b18      	ldr	r3, [pc, #96]	@ (8005294 <xQueueSemaphoreTake+0x21c>)
 8005232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	e75d      	b.n	80050fe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005242:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005244:	f000 f8d0 	bl	80053e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005248:	f000 fc1e 	bl	8005a88 <xTaskResumeAll>
 800524c:	e757      	b.n	80050fe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800524e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005250:	f000 f8ca 	bl	80053e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005254:	f000 fc18 	bl	8005a88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005258:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800525a:	f000 f917 	bl	800548c <prvIsQueueEmpty>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	f43f af4c 	beq.w	80050fe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00d      	beq.n	8005288 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800526c:	f001 fe5c 	bl	8006f28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005270:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005272:	f000 f811 	bl	8005298 <prvGetDisinheritPriorityAfterTimeout>
 8005276:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800527e:	4618      	mov	r0, r3
 8005280:	f001 f8de 	bl	8006440 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005284:	f001 fe82 	bl	8006f8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005288:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800528a:	4618      	mov	r0, r3
 800528c:	3738      	adds	r7, #56	@ 0x38
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d006      	beq.n	80052b6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	e001      	b.n	80052ba <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80052ba:	68fb      	ldr	r3, [r7, #12]
	}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10d      	bne.n	8005302 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d14d      	bne.n	800538a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f001 f834 	bl	8006360 <xTaskPriorityDisinherit>
 80052f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	e043      	b.n	800538a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d119      	bne.n	800533c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6858      	ldr	r0, [r3, #4]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005310:	461a      	mov	r2, r3
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	f002 f9e2 	bl	80076dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685a      	ldr	r2, [r3, #4]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005320:	441a      	add	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	429a      	cmp	r2, r3
 8005330:	d32b      	bcc.n	800538a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	605a      	str	r2, [r3, #4]
 800533a:	e026      	b.n	800538a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	68d8      	ldr	r0, [r3, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	461a      	mov	r2, r3
 8005346:	68b9      	ldr	r1, [r7, #8]
 8005348:	f002 f9c8 	bl	80076dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005354:	425b      	negs	r3, r3
 8005356:	441a      	add	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d207      	bcs.n	8005378 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	425b      	negs	r3, r3
 8005372:	441a      	add	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d105      	bne.n	800538a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	3b01      	subs	r3, #1
 8005388:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005392:	697b      	ldr	r3, [r7, #20]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d018      	beq.n	80053e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	441a      	add	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d303      	bcc.n	80053d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68d9      	ldr	r1, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d8:	461a      	mov	r2, r3
 80053da:	6838      	ldr	r0, [r7, #0]
 80053dc:	f002 f97e 	bl	80076dc <memcpy>
	}
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053f0:	f001 fd9a 	bl	8006f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053fc:	e011      	b.n	8005422 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005402:	2b00      	cmp	r3, #0
 8005404:	d012      	beq.n	800542c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	3324      	adds	r3, #36	@ 0x24
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fd5c 	bl	8005ec8 <xTaskRemoveFromEventList>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005416:	f000 fe35 	bl	8006084 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	3b01      	subs	r3, #1
 800541e:	b2db      	uxtb	r3, r3
 8005420:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005426:	2b00      	cmp	r3, #0
 8005428:	dce9      	bgt.n	80053fe <prvUnlockQueue+0x16>
 800542a:	e000      	b.n	800542e <prvUnlockQueue+0x46>
					break;
 800542c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	22ff      	movs	r2, #255	@ 0xff
 8005432:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005436:	f001 fda9 	bl	8006f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800543a:	f001 fd75 	bl	8006f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005444:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005446:	e011      	b.n	800546c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d012      	beq.n	8005476 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	3310      	adds	r3, #16
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fd37 	bl	8005ec8 <xTaskRemoveFromEventList>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005460:	f000 fe10 	bl	8006084 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	3b01      	subs	r3, #1
 8005468:	b2db      	uxtb	r3, r3
 800546a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800546c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005470:	2b00      	cmp	r3, #0
 8005472:	dce9      	bgt.n	8005448 <prvUnlockQueue+0x60>
 8005474:	e000      	b.n	8005478 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005476:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	22ff      	movs	r2, #255	@ 0xff
 800547c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005480:	f001 fd84 	bl	8006f8c <vPortExitCritical>
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005494:	f001 fd48 	bl	8006f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549c:	2b00      	cmp	r3, #0
 800549e:	d102      	bne.n	80054a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054a0:	2301      	movs	r3, #1
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	e001      	b.n	80054aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054aa:	f001 fd6f 	bl	8006f8c <vPortExitCritical>

	return xReturn;
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3710      	adds	r7, #16
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054c0:	f001 fd32 	bl	8006f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d102      	bne.n	80054d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054d0:	2301      	movs	r3, #1
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e001      	b.n	80054da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054da:	f001 fd57 	bl	8006f8c <vPortExitCritical>

	return xReturn;
 80054de:	68fb      	ldr	r3, [r7, #12]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
 80054f6:	e014      	b.n	8005522 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80054f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005538 <vQueueAddToRegistry+0x50>)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10b      	bne.n	800551c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005504:	490c      	ldr	r1, [pc, #48]	@ (8005538 <vQueueAddToRegistry+0x50>)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800550e:	4a0a      	ldr	r2, [pc, #40]	@ (8005538 <vQueueAddToRegistry+0x50>)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800551a:	e006      	b.n	800552a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b07      	cmp	r3, #7
 8005526:	d9e7      	bls.n	80054f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005528:	bf00      	nop
 800552a:	bf00      	nop
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000954 	.word	0x20000954

0800553c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800554c:	f001 fcec 	bl	8006f28 <vPortEnterCritical>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005556:	b25b      	sxtb	r3, r3
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d103      	bne.n	8005566 <vQueueWaitForMessageRestricted+0x2a>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800556c:	b25b      	sxtb	r3, r3
 800556e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005572:	d103      	bne.n	800557c <vQueueWaitForMessageRestricted+0x40>
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800557c:	f001 fd06 	bl	8006f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	3324      	adds	r3, #36	@ 0x24
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68b9      	ldr	r1, [r7, #8]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fc6d 	bl	8005e70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005596:	6978      	ldr	r0, [r7, #20]
 8005598:	f7ff ff26 	bl	80053e8 <prvUnlockQueue>
	}
 800559c:	bf00      	nop
 800559e:	3718      	adds	r7, #24
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	@ 0x38
 80055a8:	af04      	add	r7, sp, #16
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	623b      	str	r3, [r7, #32]
}
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	e7fd      	b.n	80055cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80055d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055da:	f383 8811 	msr	BASEPRI, r3
 80055de:	f3bf 8f6f 	isb	sy
 80055e2:	f3bf 8f4f 	dsb	sy
 80055e6:	61fb      	str	r3, [r7, #28]
}
 80055e8:	bf00      	nop
 80055ea:	bf00      	nop
 80055ec:	e7fd      	b.n	80055ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80055ee:	23a8      	movs	r3, #168	@ 0xa8
 80055f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	2ba8      	cmp	r3, #168	@ 0xa8
 80055f6:	d00b      	beq.n	8005610 <xTaskCreateStatic+0x6c>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	61bb      	str	r3, [r7, #24]
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005610:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01e      	beq.n	8005656 <xTaskCreateStatic+0xb2>
 8005618:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561a:	2b00      	cmp	r3, #0
 800561c:	d01b      	beq.n	8005656 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005626:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	2202      	movs	r2, #2
 800562c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005630:	2300      	movs	r3, #0
 8005632:	9303      	str	r3, [sp, #12]
 8005634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005636:	9302      	str	r3, [sp, #8]
 8005638:	f107 0314 	add.w	r3, r7, #20
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 f851 	bl	80056f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800564e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005650:	f000 f8f6 	bl	8005840 <prvAddNewTaskToReadyList>
 8005654:	e001      	b.n	800565a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800565a:	697b      	ldr	r3, [r7, #20]
	}
 800565c:	4618      	mov	r0, r3
 800565e:	3728      	adds	r7, #40	@ 0x28
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08c      	sub	sp, #48	@ 0x30
 8005668:	af04      	add	r7, sp, #16
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4618      	mov	r0, r3
 800567a:	f001 fd77 	bl	800716c <pvPortMalloc>
 800567e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00e      	beq.n	80056a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005686:	20a8      	movs	r0, #168	@ 0xa8
 8005688:	f001 fd70 	bl	800716c <pvPortMalloc>
 800568c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d003      	beq.n	800569c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	631a      	str	r2, [r3, #48]	@ 0x30
 800569a:	e005      	b.n	80056a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800569c:	6978      	ldr	r0, [r7, #20]
 800569e:	f001 fe33 	bl	8007308 <vPortFree>
 80056a2:	e001      	b.n	80056a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056a4:	2300      	movs	r3, #0
 80056a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d017      	beq.n	80056de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056b6:	88fa      	ldrh	r2, [r7, #6]
 80056b8:	2300      	movs	r3, #0
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	9302      	str	r3, [sp, #8]
 80056c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	68b9      	ldr	r1, [r7, #8]
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f80f 	bl	80056f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056d2:	69f8      	ldr	r0, [r7, #28]
 80056d4:	f000 f8b4 	bl	8005840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056d8:	2301      	movs	r3, #1
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	e002      	b.n	80056e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295
 80056e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056e4:	69bb      	ldr	r3, [r7, #24]
	}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80056fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005700:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	461a      	mov	r2, r3
 8005708:	21a5      	movs	r1, #165	@ 0xa5
 800570a:	f001 ff5d 	bl	80075c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005718:	3b01      	subs	r3, #1
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f023 0307 	bic.w	r3, r3, #7
 8005726:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	f003 0307 	and.w	r3, r3, #7
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005736:	f383 8811 	msr	BASEPRI, r3
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	f3bf 8f4f 	dsb	sy
 8005742:	617b      	str	r3, [r7, #20]
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	e7fd      	b.n	8005746 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01f      	beq.n	8005790 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	e012      	b.n	800577c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	4413      	add	r3, r2
 800575c:	7819      	ldrb	r1, [r3, #0]
 800575e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	4413      	add	r3, r2
 8005764:	3334      	adds	r3, #52	@ 0x34
 8005766:	460a      	mov	r2, r1
 8005768:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d006      	beq.n	8005784 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	3301      	adds	r3, #1
 800577a:	61fb      	str	r3, [r7, #28]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d9e9      	bls.n	8005756 <prvInitialiseNewTask+0x66>
 8005782:	e000      	b.n	8005786 <prvInitialiseNewTask+0x96>
			{
				break;
 8005784:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800578e:	e003      	b.n	8005798 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579a:	2b37      	cmp	r3, #55	@ 0x37
 800579c:	d901      	bls.n	80057a2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800579e:	2337      	movs	r3, #55	@ 0x37
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	2200      	movs	r2, #0
 80057b2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b6:	3304      	adds	r3, #4
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe ffcf 	bl	800475c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	3318      	adds	r3, #24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe ffca 	bl	800475c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e0:	2200      	movs	r2, #0
 80057e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f0:	3354      	adds	r3, #84	@ 0x54
 80057f2:	224c      	movs	r2, #76	@ 0x4c
 80057f4:	2100      	movs	r1, #0
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fee6 	bl	80075c8 <memset>
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005834 <prvInitialiseNewTask+0x144>)
 8005800:	659a      	str	r2, [r3, #88]	@ 0x58
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	4a0c      	ldr	r2, [pc, #48]	@ (8005838 <prvInitialiseNewTask+0x148>)
 8005806:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	4a0c      	ldr	r2, [pc, #48]	@ (800583c <prvInitialiseNewTask+0x14c>)
 800580c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	68f9      	ldr	r1, [r7, #12]
 8005812:	69b8      	ldr	r0, [r7, #24]
 8005814:	f001 fa5a 	bl	8006ccc <pxPortInitialiseStack>
 8005818:	4602      	mov	r2, r0
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800581e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005828:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800582a:	bf00      	nop
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20005e08 	.word	0x20005e08
 8005838:	20005e70 	.word	0x20005e70
 800583c:	20005ed8 	.word	0x20005ed8

08005840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005848:	f001 fb6e 	bl	8006f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800584c:	4b2d      	ldr	r3, [pc, #180]	@ (8005904 <prvAddNewTaskToReadyList+0xc4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3301      	adds	r3, #1
 8005852:	4a2c      	ldr	r2, [pc, #176]	@ (8005904 <prvAddNewTaskToReadyList+0xc4>)
 8005854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005856:	4b2c      	ldr	r3, [pc, #176]	@ (8005908 <prvAddNewTaskToReadyList+0xc8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d109      	bne.n	8005872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800585e:	4a2a      	ldr	r2, [pc, #168]	@ (8005908 <prvAddNewTaskToReadyList+0xc8>)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005864:	4b27      	ldr	r3, [pc, #156]	@ (8005904 <prvAddNewTaskToReadyList+0xc4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d110      	bne.n	800588e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800586c:	f000 fc2e 	bl	80060cc <prvInitialiseTaskLists>
 8005870:	e00d      	b.n	800588e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005872:	4b26      	ldr	r3, [pc, #152]	@ (800590c <prvAddNewTaskToReadyList+0xcc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800587a:	4b23      	ldr	r3, [pc, #140]	@ (8005908 <prvAddNewTaskToReadyList+0xc8>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	429a      	cmp	r2, r3
 8005886:	d802      	bhi.n	800588e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005888:	4a1f      	ldr	r2, [pc, #124]	@ (8005908 <prvAddNewTaskToReadyList+0xc8>)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800588e:	4b20      	ldr	r3, [pc, #128]	@ (8005910 <prvAddNewTaskToReadyList+0xd0>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	4a1e      	ldr	r2, [pc, #120]	@ (8005910 <prvAddNewTaskToReadyList+0xd0>)
 8005896:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005898:	4b1d      	ldr	r3, [pc, #116]	@ (8005910 <prvAddNewTaskToReadyList+0xd0>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a4:	4b1b      	ldr	r3, [pc, #108]	@ (8005914 <prvAddNewTaskToReadyList+0xd4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d903      	bls.n	80058b4 <prvAddNewTaskToReadyList+0x74>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	4a18      	ldr	r2, [pc, #96]	@ (8005914 <prvAddNewTaskToReadyList+0xd4>)
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b8:	4613      	mov	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4a15      	ldr	r2, [pc, #84]	@ (8005918 <prvAddNewTaskToReadyList+0xd8>)
 80058c2:	441a      	add	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7fe ff53 	bl	8004776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058d0:	f001 fb5c 	bl	8006f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058d4:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <prvAddNewTaskToReadyList+0xcc>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <prvAddNewTaskToReadyList+0xc8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d207      	bcs.n	80058fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058ea:	4b0c      	ldr	r3, [pc, #48]	@ (800591c <prvAddNewTaskToReadyList+0xdc>)
 80058ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000e68 	.word	0x20000e68
 8005908:	20000994 	.word	0x20000994
 800590c:	20000e74 	.word	0x20000e74
 8005910:	20000e84 	.word	0x20000e84
 8005914:	20000e70 	.word	0x20000e70
 8005918:	20000998 	.word	0x20000998
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d018      	beq.n	8005964 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005932:	4b14      	ldr	r3, [pc, #80]	@ (8005984 <vTaskDelay+0x64>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00b      	beq.n	8005952 <vTaskDelay+0x32>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	60bb      	str	r3, [r7, #8]
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	e7fd      	b.n	800594e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005952:	f000 f88b 	bl	8005a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005956:	2100      	movs	r1, #0
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fe09 	bl	8006570 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800595e:	f000 f893 	bl	8005a88 <xTaskResumeAll>
 8005962:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d107      	bne.n	800597a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800596a:	4b07      	ldr	r3, [pc, #28]	@ (8005988 <vTaskDelay+0x68>)
 800596c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005970:	601a      	str	r2, [r3, #0]
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800597a:	bf00      	nop
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000e90 	.word	0x20000e90
 8005988:	e000ed04 	.word	0xe000ed04

0800598c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08a      	sub	sp, #40	@ 0x28
 8005990:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005992:	2300      	movs	r3, #0
 8005994:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005996:	2300      	movs	r3, #0
 8005998:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800599a:	463a      	mov	r2, r7
 800599c:	1d39      	adds	r1, r7, #4
 800599e:	f107 0308 	add.w	r3, r7, #8
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7fe fe86 	bl	80046b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	9202      	str	r2, [sp, #8]
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	2300      	movs	r3, #0
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	2300      	movs	r3, #0
 80059b8:	460a      	mov	r2, r1
 80059ba:	4924      	ldr	r1, [pc, #144]	@ (8005a4c <vTaskStartScheduler+0xc0>)
 80059bc:	4824      	ldr	r0, [pc, #144]	@ (8005a50 <vTaskStartScheduler+0xc4>)
 80059be:	f7ff fdf1 	bl	80055a4 <xTaskCreateStatic>
 80059c2:	4603      	mov	r3, r0
 80059c4:	4a23      	ldr	r2, [pc, #140]	@ (8005a54 <vTaskStartScheduler+0xc8>)
 80059c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059c8:	4b22      	ldr	r3, [pc, #136]	@ (8005a54 <vTaskStartScheduler+0xc8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059d0:	2301      	movs	r3, #1
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	e001      	b.n	80059da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d102      	bne.n	80059e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059e0:	f000 fe1a 	bl	8006618 <xTimerCreateTimerTask>
 80059e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d11b      	bne.n	8005a24 <vTaskStartScheduler+0x98>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	613b      	str	r3, [r7, #16]
}
 80059fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a00:	4b15      	ldr	r3, [pc, #84]	@ (8005a58 <vTaskStartScheduler+0xcc>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3354      	adds	r3, #84	@ 0x54
 8005a06:	4a15      	ldr	r2, [pc, #84]	@ (8005a5c <vTaskStartScheduler+0xd0>)
 8005a08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a0a:	4b15      	ldr	r3, [pc, #84]	@ (8005a60 <vTaskStartScheduler+0xd4>)
 8005a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <vTaskStartScheduler+0xd8>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a18:	4b13      	ldr	r3, [pc, #76]	@ (8005a68 <vTaskStartScheduler+0xdc>)
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a1e:	f001 f9df 	bl	8006de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a22:	e00f      	b.n	8005a44 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a2a:	d10b      	bne.n	8005a44 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	bf00      	nop
 8005a42:	e7fd      	b.n	8005a40 <vTaskStartScheduler+0xb4>
}
 8005a44:	bf00      	nop
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	08007ff0 	.word	0x08007ff0
 8005a50:	0800609d 	.word	0x0800609d
 8005a54:	20000e8c 	.word	0x20000e8c
 8005a58:	20000994 	.word	0x20000994
 8005a5c:	20000010 	.word	0x20000010
 8005a60:	20000e88 	.word	0x20000e88
 8005a64:	20000e74 	.word	0x20000e74
 8005a68:	20000e6c 	.word	0x20000e6c

08005a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a70:	4b04      	ldr	r3, [pc, #16]	@ (8005a84 <vTaskSuspendAll+0x18>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a03      	ldr	r2, [pc, #12]	@ (8005a84 <vTaskSuspendAll+0x18>)
 8005a78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a7a:	bf00      	nop
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	20000e90 	.word	0x20000e90

08005a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a96:	4b42      	ldr	r3, [pc, #264]	@ (8005ba0 <xTaskResumeAll+0x118>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <xTaskResumeAll+0x2e>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	603b      	str	r3, [r7, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ab6:	f001 fa37 	bl	8006f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005aba:	4b39      	ldr	r3, [pc, #228]	@ (8005ba0 <xTaskResumeAll+0x118>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	4a37      	ldr	r2, [pc, #220]	@ (8005ba0 <xTaskResumeAll+0x118>)
 8005ac2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac4:	4b36      	ldr	r3, [pc, #216]	@ (8005ba0 <xTaskResumeAll+0x118>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d162      	bne.n	8005b92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005acc:	4b35      	ldr	r3, [pc, #212]	@ (8005ba4 <xTaskResumeAll+0x11c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d05e      	beq.n	8005b92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ad4:	e02f      	b.n	8005b36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad6:	4b34      	ldr	r3, [pc, #208]	@ (8005ba8 <xTaskResumeAll+0x120>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3318      	adds	r3, #24
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7fe fea4 	bl	8004830 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fe fe9f 	bl	8004830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af6:	4b2d      	ldr	r3, [pc, #180]	@ (8005bac <xTaskResumeAll+0x124>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d903      	bls.n	8005b06 <xTaskResumeAll+0x7e>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	4a2a      	ldr	r2, [pc, #168]	@ (8005bac <xTaskResumeAll+0x124>)
 8005b04:	6013      	str	r3, [r2, #0]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4a27      	ldr	r2, [pc, #156]	@ (8005bb0 <xTaskResumeAll+0x128>)
 8005b14:	441a      	add	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3304      	adds	r3, #4
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	f7fe fe2a 	bl	8004776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b26:	4b23      	ldr	r3, [pc, #140]	@ (8005bb4 <xTaskResumeAll+0x12c>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005b30:	4b21      	ldr	r3, [pc, #132]	@ (8005bb8 <xTaskResumeAll+0x130>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b36:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba8 <xTaskResumeAll+0x120>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1cb      	bne.n	8005ad6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b44:	f000 fb66 	bl	8006214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b48:	4b1c      	ldr	r3, [pc, #112]	@ (8005bbc <xTaskResumeAll+0x134>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d010      	beq.n	8005b76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b54:	f000 f846 	bl	8005be4 <xTaskIncrementTick>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005b5e:	4b16      	ldr	r3, [pc, #88]	@ (8005bb8 <xTaskResumeAll+0x130>)
 8005b60:	2201      	movs	r2, #1
 8005b62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f1      	bne.n	8005b54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005b70:	4b12      	ldr	r3, [pc, #72]	@ (8005bbc <xTaskResumeAll+0x134>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b76:	4b10      	ldr	r3, [pc, #64]	@ (8005bb8 <xTaskResumeAll+0x130>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b82:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc0 <xTaskResumeAll+0x138>)
 8005b84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b92:	f001 f9fb 	bl	8006f8c <vPortExitCritical>

	return xAlreadyYielded;
 8005b96:	68bb      	ldr	r3, [r7, #8]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20000e90 	.word	0x20000e90
 8005ba4:	20000e68 	.word	0x20000e68
 8005ba8:	20000e28 	.word	0x20000e28
 8005bac:	20000e70 	.word	0x20000e70
 8005bb0:	20000998 	.word	0x20000998
 8005bb4:	20000994 	.word	0x20000994
 8005bb8:	20000e7c 	.word	0x20000e7c
 8005bbc:	20000e78 	.word	0x20000e78
 8005bc0:	e000ed04 	.word	0xe000ed04

08005bc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005bca:	4b05      	ldr	r3, [pc, #20]	@ (8005be0 <xTaskGetTickCount+0x1c>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005bd0:	687b      	ldr	r3, [r7, #4]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	20000e6c 	.word	0x20000e6c

08005be4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bee:	4b4f      	ldr	r3, [pc, #316]	@ (8005d2c <xTaskIncrementTick+0x148>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f040 8090 	bne.w	8005d18 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d30 <xTaskIncrementTick+0x14c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c00:	4a4b      	ldr	r2, [pc, #300]	@ (8005d30 <xTaskIncrementTick+0x14c>)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d121      	bne.n	8005c50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c0c:	4b49      	ldr	r3, [pc, #292]	@ (8005d34 <xTaskIncrementTick+0x150>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00b      	beq.n	8005c2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	603b      	str	r3, [r7, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <xTaskIncrementTick+0x46>
 8005c2e:	4b41      	ldr	r3, [pc, #260]	@ (8005d34 <xTaskIncrementTick+0x150>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	4b40      	ldr	r3, [pc, #256]	@ (8005d38 <xTaskIncrementTick+0x154>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a3e      	ldr	r2, [pc, #248]	@ (8005d34 <xTaskIncrementTick+0x150>)
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005d38 <xTaskIncrementTick+0x154>)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4b3e      	ldr	r3, [pc, #248]	@ (8005d3c <xTaskIncrementTick+0x158>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a3c      	ldr	r2, [pc, #240]	@ (8005d3c <xTaskIncrementTick+0x158>)
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	f000 fae2 	bl	8006214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c50:	4b3b      	ldr	r3, [pc, #236]	@ (8005d40 <xTaskIncrementTick+0x15c>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d349      	bcc.n	8005cee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c5a:	4b36      	ldr	r3, [pc, #216]	@ (8005d34 <xTaskIncrementTick+0x150>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d104      	bne.n	8005c6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c64:	4b36      	ldr	r3, [pc, #216]	@ (8005d40 <xTaskIncrementTick+0x15c>)
 8005c66:	f04f 32ff 	mov.w	r2, #4294967295
 8005c6a:	601a      	str	r2, [r3, #0]
					break;
 8005c6c:	e03f      	b.n	8005cee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6e:	4b31      	ldr	r3, [pc, #196]	@ (8005d34 <xTaskIncrementTick+0x150>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d203      	bcs.n	8005c8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c86:	4a2e      	ldr	r2, [pc, #184]	@ (8005d40 <xTaskIncrementTick+0x15c>)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c8c:	e02f      	b.n	8005cee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fdcc 	bl	8004830 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	3318      	adds	r3, #24
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fdc3 	bl	8004830 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cae:	4b25      	ldr	r3, [pc, #148]	@ (8005d44 <xTaskIncrementTick+0x160>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d903      	bls.n	8005cbe <xTaskIncrementTick+0xda>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	4a22      	ldr	r2, [pc, #136]	@ (8005d44 <xTaskIncrementTick+0x160>)
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4a1f      	ldr	r2, [pc, #124]	@ (8005d48 <xTaskIncrementTick+0x164>)
 8005ccc:	441a      	add	r2, r3
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	f7fe fd4e 	bl	8004776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cde:	4b1b      	ldr	r3, [pc, #108]	@ (8005d4c <xTaskIncrementTick+0x168>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d3b8      	bcc.n	8005c5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cec:	e7b5      	b.n	8005c5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cee:	4b17      	ldr	r3, [pc, #92]	@ (8005d4c <xTaskIncrementTick+0x168>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf4:	4914      	ldr	r1, [pc, #80]	@ (8005d48 <xTaskIncrementTick+0x164>)
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	440b      	add	r3, r1
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d901      	bls.n	8005d0a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005d06:	2301      	movs	r3, #1
 8005d08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d0a:	4b11      	ldr	r3, [pc, #68]	@ (8005d50 <xTaskIncrementTick+0x16c>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005d12:	2301      	movs	r3, #1
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e004      	b.n	8005d22 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d18:	4b0e      	ldr	r3, [pc, #56]	@ (8005d54 <xTaskIncrementTick+0x170>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a0d      	ldr	r2, [pc, #52]	@ (8005d54 <xTaskIncrementTick+0x170>)
 8005d20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d22:	697b      	ldr	r3, [r7, #20]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20000e90 	.word	0x20000e90
 8005d30:	20000e6c 	.word	0x20000e6c
 8005d34:	20000e20 	.word	0x20000e20
 8005d38:	20000e24 	.word	0x20000e24
 8005d3c:	20000e80 	.word	0x20000e80
 8005d40:	20000e88 	.word	0x20000e88
 8005d44:	20000e70 	.word	0x20000e70
 8005d48:	20000998 	.word	0x20000998
 8005d4c:	20000994 	.word	0x20000994
 8005d50:	20000e7c 	.word	0x20000e7c
 8005d54:	20000e78 	.word	0x20000e78

08005d58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d5e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e0c <vTaskSwitchContext+0xb4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d66:	4b2a      	ldr	r3, [pc, #168]	@ (8005e10 <vTaskSwitchContext+0xb8>)
 8005d68:	2201      	movs	r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d6c:	e047      	b.n	8005dfe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005d6e:	4b28      	ldr	r3, [pc, #160]	@ (8005e10 <vTaskSwitchContext+0xb8>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d74:	4b27      	ldr	r3, [pc, #156]	@ (8005e14 <vTaskSwitchContext+0xbc>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e011      	b.n	8005da0 <vTaskSwitchContext+0x48>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10b      	bne.n	8005d9a <vTaskSwitchContext+0x42>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	607b      	str	r3, [r7, #4]
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <vTaskSwitchContext+0x3e>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	491d      	ldr	r1, [pc, #116]	@ (8005e18 <vTaskSwitchContext+0xc0>)
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	440b      	add	r3, r1
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0e3      	beq.n	8005d7c <vTaskSwitchContext+0x24>
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4a16      	ldr	r2, [pc, #88]	@ (8005e18 <vTaskSwitchContext+0xc0>)
 8005dc0:	4413      	add	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	605a      	str	r2, [r3, #4]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d104      	bne.n	8005de4 <vTaskSwitchContext+0x8c>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	605a      	str	r2, [r3, #4]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	4a0c      	ldr	r2, [pc, #48]	@ (8005e1c <vTaskSwitchContext+0xc4>)
 8005dec:	6013      	str	r3, [r2, #0]
 8005dee:	4a09      	ldr	r2, [pc, #36]	@ (8005e14 <vTaskSwitchContext+0xbc>)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005df4:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <vTaskSwitchContext+0xc4>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3354      	adds	r3, #84	@ 0x54
 8005dfa:	4a09      	ldr	r2, [pc, #36]	@ (8005e20 <vTaskSwitchContext+0xc8>)
 8005dfc:	6013      	str	r3, [r2, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	3714      	adds	r7, #20
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	20000e90 	.word	0x20000e90
 8005e10:	20000e7c 	.word	0x20000e7c
 8005e14:	20000e70 	.word	0x20000e70
 8005e18:	20000998 	.word	0x20000998
 8005e1c:	20000994 	.word	0x20000994
 8005e20:	20000010 	.word	0x20000010

08005e24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	60fb      	str	r3, [r7, #12]
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	e7fd      	b.n	8005e48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e4c:	4b07      	ldr	r3, [pc, #28]	@ (8005e6c <vTaskPlaceOnEventList+0x48>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3318      	adds	r3, #24
 8005e52:	4619      	mov	r1, r3
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fe fcb2 	bl	80047be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	6838      	ldr	r0, [r7, #0]
 8005e5e:	f000 fb87 	bl	8006570 <prvAddCurrentTaskToDelayedList>
}
 8005e62:	bf00      	nop
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000994 	.word	0x20000994

08005e70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	617b      	str	r3, [r7, #20]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3318      	adds	r3, #24
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	68f8      	ldr	r0, [r7, #12]
 8005ea4:	f7fe fc67 	bl	8004776 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	68b8      	ldr	r0, [r7, #8]
 8005eb8:	f000 fb5a 	bl	8006570 <prvAddCurrentTaskToDelayedList>
	}
 8005ebc:	bf00      	nop
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000994 	.word	0x20000994

08005ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10b      	bne.n	8005ef6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	60fb      	str	r3, [r7, #12]
}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	e7fd      	b.n	8005ef2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3318      	adds	r3, #24
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe fc98 	bl	8004830 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f00:	4b1d      	ldr	r3, [pc, #116]	@ (8005f78 <xTaskRemoveFromEventList+0xb0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d11d      	bne.n	8005f44 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe fc8f 	bl	8004830 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f16:	4b19      	ldr	r3, [pc, #100]	@ (8005f7c <xTaskRemoveFromEventList+0xb4>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d903      	bls.n	8005f26 <xTaskRemoveFromEventList+0x5e>
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f22:	4a16      	ldr	r2, [pc, #88]	@ (8005f7c <xTaskRemoveFromEventList+0xb4>)
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	009b      	lsls	r3, r3, #2
 8005f32:	4a13      	ldr	r2, [pc, #76]	@ (8005f80 <xTaskRemoveFromEventList+0xb8>)
 8005f34:	441a      	add	r2, r3
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f7fe fc1a 	bl	8004776 <vListInsertEnd>
 8005f42:	e005      	b.n	8005f50 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	3318      	adds	r3, #24
 8005f48:	4619      	mov	r1, r3
 8005f4a:	480e      	ldr	r0, [pc, #56]	@ (8005f84 <xTaskRemoveFromEventList+0xbc>)
 8005f4c:	f7fe fc13 	bl	8004776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f54:	4b0c      	ldr	r3, [pc, #48]	@ (8005f88 <xTaskRemoveFromEventList+0xc0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d905      	bls.n	8005f6a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f62:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <xTaskRemoveFromEventList+0xc4>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	e001      	b.n	8005f6e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f6e:	697b      	ldr	r3, [r7, #20]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	20000e90 	.word	0x20000e90
 8005f7c:	20000e70 	.word	0x20000e70
 8005f80:	20000998 	.word	0x20000998
 8005f84:	20000e28 	.word	0x20000e28
 8005f88:	20000994 	.word	0x20000994
 8005f8c:	20000e7c 	.word	0x20000e7c

08005f90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f98:	4b06      	ldr	r3, [pc, #24]	@ (8005fb4 <vTaskInternalSetTimeOutState+0x24>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	@ (8005fb8 <vTaskInternalSetTimeOutState+0x28>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	605a      	str	r2, [r3, #4]
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	20000e80 	.word	0x20000e80
 8005fb8:	20000e6c 	.word	0x20000e6c

08005fbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10b      	bne.n	8005fe4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	613b      	str	r3, [r7, #16]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	60fb      	str	r3, [r7, #12]
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	e7fd      	b.n	8005ffe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006002:	f000 ff91 	bl	8006f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006006:	4b1d      	ldr	r3, [pc, #116]	@ (800607c <xTaskCheckForTimeOut+0xc0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d102      	bne.n	8006026 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006020:	2300      	movs	r3, #0
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	e023      	b.n	800606e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <xTaskCheckForTimeOut+0xc4>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d007      	beq.n	8006042 <xTaskCheckForTimeOut+0x86>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	429a      	cmp	r2, r3
 800603a:	d302      	bcc.n	8006042 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800603c:	2301      	movs	r3, #1
 800603e:	61fb      	str	r3, [r7, #28]
 8006040:	e015      	b.n	800606e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	429a      	cmp	r2, r3
 800604a:	d20b      	bcs.n	8006064 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	1ad2      	subs	r2, r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7ff ff99 	bl	8005f90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e004      	b.n	800606e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800606a:	2301      	movs	r3, #1
 800606c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800606e:	f000 ff8d 	bl	8006f8c <vPortExitCritical>

	return xReturn;
 8006072:	69fb      	ldr	r3, [r7, #28]
}
 8006074:	4618      	mov	r0, r3
 8006076:	3720      	adds	r7, #32
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20000e6c 	.word	0x20000e6c
 8006080:	20000e80 	.word	0x20000e80

08006084 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006088:	4b03      	ldr	r3, [pc, #12]	@ (8006098 <vTaskMissedYield+0x14>)
 800608a:	2201      	movs	r2, #1
 800608c:	601a      	str	r2, [r3, #0]
}
 800608e:	bf00      	nop
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000e7c 	.word	0x20000e7c

0800609c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060a4:	f000 f852 	bl	800614c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060a8:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <prvIdleTask+0x28>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d9f9      	bls.n	80060a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060b0:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <prvIdleTask+0x2c>)
 80060b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060c0:	e7f0      	b.n	80060a4 <prvIdleTask+0x8>
 80060c2:	bf00      	nop
 80060c4:	20000998 	.word	0x20000998
 80060c8:	e000ed04 	.word	0xe000ed04

080060cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060d2:	2300      	movs	r3, #0
 80060d4:	607b      	str	r3, [r7, #4]
 80060d6:	e00c      	b.n	80060f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4a12      	ldr	r2, [pc, #72]	@ (800612c <prvInitialiseTaskLists+0x60>)
 80060e4:	4413      	add	r3, r2
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fe fb18 	bl	800471c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3301      	adds	r3, #1
 80060f0:	607b      	str	r3, [r7, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b37      	cmp	r3, #55	@ 0x37
 80060f6:	d9ef      	bls.n	80060d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060f8:	480d      	ldr	r0, [pc, #52]	@ (8006130 <prvInitialiseTaskLists+0x64>)
 80060fa:	f7fe fb0f 	bl	800471c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060fe:	480d      	ldr	r0, [pc, #52]	@ (8006134 <prvInitialiseTaskLists+0x68>)
 8006100:	f7fe fb0c 	bl	800471c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006104:	480c      	ldr	r0, [pc, #48]	@ (8006138 <prvInitialiseTaskLists+0x6c>)
 8006106:	f7fe fb09 	bl	800471c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800610a:	480c      	ldr	r0, [pc, #48]	@ (800613c <prvInitialiseTaskLists+0x70>)
 800610c:	f7fe fb06 	bl	800471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006110:	480b      	ldr	r0, [pc, #44]	@ (8006140 <prvInitialiseTaskLists+0x74>)
 8006112:	f7fe fb03 	bl	800471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006116:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <prvInitialiseTaskLists+0x78>)
 8006118:	4a05      	ldr	r2, [pc, #20]	@ (8006130 <prvInitialiseTaskLists+0x64>)
 800611a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800611c:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <prvInitialiseTaskLists+0x7c>)
 800611e:	4a05      	ldr	r2, [pc, #20]	@ (8006134 <prvInitialiseTaskLists+0x68>)
 8006120:	601a      	str	r2, [r3, #0]
}
 8006122:	bf00      	nop
 8006124:	3708      	adds	r7, #8
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	20000998 	.word	0x20000998
 8006130:	20000df8 	.word	0x20000df8
 8006134:	20000e0c 	.word	0x20000e0c
 8006138:	20000e28 	.word	0x20000e28
 800613c:	20000e3c 	.word	0x20000e3c
 8006140:	20000e54 	.word	0x20000e54
 8006144:	20000e20 	.word	0x20000e20
 8006148:	20000e24 	.word	0x20000e24

0800614c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006152:	e019      	b.n	8006188 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006154:	f000 fee8 	bl	8006f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006158:	4b10      	ldr	r3, [pc, #64]	@ (800619c <prvCheckTasksWaitingTermination+0x50>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3304      	adds	r3, #4
 8006164:	4618      	mov	r0, r3
 8006166:	f7fe fb63 	bl	8004830 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <prvCheckTasksWaitingTermination+0x54>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3b01      	subs	r3, #1
 8006170:	4a0b      	ldr	r2, [pc, #44]	@ (80061a0 <prvCheckTasksWaitingTermination+0x54>)
 8006172:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006174:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <prvCheckTasksWaitingTermination+0x58>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3b01      	subs	r3, #1
 800617a:	4a0a      	ldr	r2, [pc, #40]	@ (80061a4 <prvCheckTasksWaitingTermination+0x58>)
 800617c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800617e:	f000 ff05 	bl	8006f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f810 	bl	80061a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006188:	4b06      	ldr	r3, [pc, #24]	@ (80061a4 <prvCheckTasksWaitingTermination+0x58>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e1      	bne.n	8006154 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000e3c 	.word	0x20000e3c
 80061a0:	20000e68 	.word	0x20000e68
 80061a4:	20000e50 	.word	0x20000e50

080061a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b084      	sub	sp, #16
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	3354      	adds	r3, #84	@ 0x54
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 fa0f 	bl	80075d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d108      	bne.n	80061d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f89d 	bl	8007308 <vPortFree>
				vPortFree( pxTCB );
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f001 f89a 	bl	8007308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061d4:	e019      	b.n	800620a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d103      	bne.n	80061e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f001 f891 	bl	8007308 <vPortFree>
	}
 80061e6:	e010      	b.n	800620a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d00b      	beq.n	800620a <prvDeleteTCB+0x62>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60fb      	str	r3, [r7, #12]
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <prvDeleteTCB+0x5e>
	}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800621a:	4b0c      	ldr	r3, [pc, #48]	@ (800624c <prvResetNextTaskUnblockTime+0x38>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006224:	4b0a      	ldr	r3, [pc, #40]	@ (8006250 <prvResetNextTaskUnblockTime+0x3c>)
 8006226:	f04f 32ff 	mov.w	r2, #4294967295
 800622a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800622c:	e008      	b.n	8006240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622e:	4b07      	ldr	r3, [pc, #28]	@ (800624c <prvResetNextTaskUnblockTime+0x38>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	4a04      	ldr	r2, [pc, #16]	@ (8006250 <prvResetNextTaskUnblockTime+0x3c>)
 800623e:	6013      	str	r3, [r2, #0]
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	20000e20 	.word	0x20000e20
 8006250:	20000e88 	.word	0x20000e88

08006254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800625a:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <xTaskGetSchedulerState+0x34>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006262:	2301      	movs	r3, #1
 8006264:	607b      	str	r3, [r7, #4]
 8006266:	e008      	b.n	800627a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006268:	4b08      	ldr	r3, [pc, #32]	@ (800628c <xTaskGetSchedulerState+0x38>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d102      	bne.n	8006276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006270:	2302      	movs	r3, #2
 8006272:	607b      	str	r3, [r7, #4]
 8006274:	e001      	b.n	800627a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006276:	2300      	movs	r3, #0
 8006278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800627a:	687b      	ldr	r3, [r7, #4]
	}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	20000e74 	.word	0x20000e74
 800628c:	20000e90 	.word	0x20000e90

08006290 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d051      	beq.n	800634a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062aa:	4b2a      	ldr	r3, [pc, #168]	@ (8006354 <xTaskPriorityInherit+0xc4>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d241      	bcs.n	8006338 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	db06      	blt.n	80062ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062bc:	4b25      	ldr	r3, [pc, #148]	@ (8006354 <xTaskPriorityInherit+0xc4>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	6959      	ldr	r1, [r3, #20]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4a1f      	ldr	r2, [pc, #124]	@ (8006358 <xTaskPriorityInherit+0xc8>)
 80062dc:	4413      	add	r3, r2
 80062de:	4299      	cmp	r1, r3
 80062e0:	d122      	bne.n	8006328 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe faa2 	bl	8004830 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062ec:	4b19      	ldr	r3, [pc, #100]	@ (8006354 <xTaskPriorityInherit+0xc4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fa:	4b18      	ldr	r3, [pc, #96]	@ (800635c <xTaskPriorityInherit+0xcc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d903      	bls.n	800630a <xTaskPriorityInherit+0x7a>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	4a15      	ldr	r2, [pc, #84]	@ (800635c <xTaskPriorityInherit+0xcc>)
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4a10      	ldr	r2, [pc, #64]	@ (8006358 <xTaskPriorityInherit+0xc8>)
 8006318:	441a      	add	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7fe fa28 	bl	8004776 <vListInsertEnd>
 8006326:	e004      	b.n	8006332 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006328:	4b0a      	ldr	r3, [pc, #40]	@ (8006354 <xTaskPriorityInherit+0xc4>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006332:	2301      	movs	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e008      	b.n	800634a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800633c:	4b05      	ldr	r3, [pc, #20]	@ (8006354 <xTaskPriorityInherit+0xc4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006342:	429a      	cmp	r2, r3
 8006344:	d201      	bcs.n	800634a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006346:	2301      	movs	r3, #1
 8006348:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800634a:	68fb      	ldr	r3, [r7, #12]
	}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000994 	.word	0x20000994
 8006358:	20000998 	.word	0x20000998
 800635c:	20000e70 	.word	0x20000e70

08006360 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d058      	beq.n	8006428 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006376:	4b2f      	ldr	r3, [pc, #188]	@ (8006434 <xTaskPriorityDisinherit+0xd4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	429a      	cmp	r2, r3
 800637e:	d00b      	beq.n	8006398 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	60fb      	str	r3, [r7, #12]
}
 8006392:	bf00      	nop
 8006394:	bf00      	nop
 8006396:	e7fd      	b.n	8006394 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10b      	bne.n	80063b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	60bb      	str	r3, [r7, #8]
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	e7fd      	b.n	80063b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063bc:	1e5a      	subs	r2, r3, #1
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d02c      	beq.n	8006428 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d128      	bne.n	8006428 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	3304      	adds	r3, #4
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fa28 	bl	8004830 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006438 <xTaskPriorityDisinherit+0xd8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d903      	bls.n	8006408 <xTaskPriorityDisinherit+0xa8>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	4a0c      	ldr	r2, [pc, #48]	@ (8006438 <xTaskPriorityDisinherit+0xd8>)
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4a09      	ldr	r2, [pc, #36]	@ (800643c <xTaskPriorityDisinherit+0xdc>)
 8006416:	441a      	add	r2, r3
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	3304      	adds	r3, #4
 800641c:	4619      	mov	r1, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f7fe f9a9 	bl	8004776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006424:	2301      	movs	r3, #1
 8006426:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006428:	697b      	ldr	r3, [r7, #20]
	}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20000994 	.word	0x20000994
 8006438:	20000e70 	.word	0x20000e70
 800643c:	20000998 	.word	0x20000998

08006440 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800644e:	2301      	movs	r3, #1
 8006450:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d06c      	beq.n	8006532 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	60fb      	str	r3, [r7, #12]
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	e7fd      	b.n	8006474 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	429a      	cmp	r2, r3
 8006480:	d902      	bls.n	8006488 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	61fb      	str	r3, [r7, #28]
 8006486:	e002      	b.n	800648e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800648c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006492:	69fa      	ldr	r2, [r7, #28]
 8006494:	429a      	cmp	r2, r3
 8006496:	d04c      	beq.n	8006532 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d147      	bne.n	8006532 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80064a2:	4b26      	ldr	r3, [pc, #152]	@ (800653c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d10b      	bne.n	80064c4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80064ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	60bb      	str	r3, [r7, #8]
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	db04      	blt.n	80064e2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	6959      	ldr	r1, [r3, #20]
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4a13      	ldr	r2, [pc, #76]	@ (8006540 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80064f2:	4413      	add	r3, r2
 80064f4:	4299      	cmp	r1, r3
 80064f6:	d11c      	bne.n	8006532 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	3304      	adds	r3, #4
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe f997 	bl	8004830 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006506:	4b0f      	ldr	r3, [pc, #60]	@ (8006544 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	429a      	cmp	r2, r3
 800650c:	d903      	bls.n	8006516 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006512:	4a0c      	ldr	r2, [pc, #48]	@ (8006544 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4a07      	ldr	r2, [pc, #28]	@ (8006540 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006524:	441a      	add	r2, r3
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	3304      	adds	r3, #4
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f7fe f922 	bl	8004776 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006532:	bf00      	nop
 8006534:	3720      	adds	r7, #32
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000994 	.word	0x20000994
 8006540:	20000998 	.word	0x20000998
 8006544:	20000e70 	.word	0x20000e70

08006548 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800654c:	4b07      	ldr	r3, [pc, #28]	@ (800656c <pvTaskIncrementMutexHeldCount+0x24>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d004      	beq.n	800655e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006554:	4b05      	ldr	r3, [pc, #20]	@ (800656c <pvTaskIncrementMutexHeldCount+0x24>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800655a:	3201      	adds	r2, #1
 800655c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800655e:	4b03      	ldr	r3, [pc, #12]	@ (800656c <pvTaskIncrementMutexHeldCount+0x24>)
 8006560:	681b      	ldr	r3, [r3, #0]
	}
 8006562:	4618      	mov	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000994 	.word	0x20000994

08006570 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800657a:	4b21      	ldr	r3, [pc, #132]	@ (8006600 <prvAddCurrentTaskToDelayedList+0x90>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006580:	4b20      	ldr	r3, [pc, #128]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	3304      	adds	r3, #4
 8006586:	4618      	mov	r0, r3
 8006588:	f7fe f952 	bl	8004830 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006592:	d10a      	bne.n	80065aa <prvAddCurrentTaskToDelayedList+0x3a>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800659a:	4b1a      	ldr	r3, [pc, #104]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3304      	adds	r3, #4
 80065a0:	4619      	mov	r1, r3
 80065a2:	4819      	ldr	r0, [pc, #100]	@ (8006608 <prvAddCurrentTaskToDelayedList+0x98>)
 80065a4:	f7fe f8e7 	bl	8004776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065a8:	e026      	b.n	80065f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4413      	add	r3, r2
 80065b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065b2:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d209      	bcs.n	80065d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <prvAddCurrentTaskToDelayedList+0x9c>)
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f7fe f8f5 	bl	80047be <vListInsert>
}
 80065d4:	e010      	b.n	80065f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006610 <prvAddCurrentTaskToDelayedList+0xa0>)
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <prvAddCurrentTaskToDelayedList+0x94>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7fe f8eb 	bl	80047be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d202      	bcs.n	80065f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065f2:	4a08      	ldr	r2, [pc, #32]	@ (8006614 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	6013      	str	r3, [r2, #0]
}
 80065f8:	bf00      	nop
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000e6c 	.word	0x20000e6c
 8006604:	20000994 	.word	0x20000994
 8006608:	20000e54 	.word	0x20000e54
 800660c:	20000e24 	.word	0x20000e24
 8006610:	20000e20 	.word	0x20000e20
 8006614:	20000e88 	.word	0x20000e88

08006618 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	@ 0x28
 800661c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006622:	f000 fb13 	bl	8006c4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006626:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <xTimerCreateTimerTask+0x84>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d021      	beq.n	8006672 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006636:	1d3a      	adds	r2, r7, #4
 8006638:	f107 0108 	add.w	r1, r7, #8
 800663c:	f107 030c 	add.w	r3, r7, #12
 8006640:	4618      	mov	r0, r3
 8006642:	f7fe f851 	bl	80046e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	9202      	str	r2, [sp, #8]
 800664e:	9301      	str	r3, [sp, #4]
 8006650:	2302      	movs	r3, #2
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	460a      	mov	r2, r1
 8006658:	4911      	ldr	r1, [pc, #68]	@ (80066a0 <xTimerCreateTimerTask+0x88>)
 800665a:	4812      	ldr	r0, [pc, #72]	@ (80066a4 <xTimerCreateTimerTask+0x8c>)
 800665c:	f7fe ffa2 	bl	80055a4 <xTaskCreateStatic>
 8006660:	4603      	mov	r3, r0
 8006662:	4a11      	ldr	r2, [pc, #68]	@ (80066a8 <xTimerCreateTimerTask+0x90>)
 8006664:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006666:	4b10      	ldr	r3, [pc, #64]	@ (80066a8 <xTimerCreateTimerTask+0x90>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800666e:	2301      	movs	r3, #1
 8006670:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10b      	bne.n	8006690 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	613b      	str	r3, [r7, #16]
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	e7fd      	b.n	800668c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006690:	697b      	ldr	r3, [r7, #20]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	20000ec4 	.word	0x20000ec4
 80066a0:	08007ff8 	.word	0x08007ff8
 80066a4:	080067e5 	.word	0x080067e5
 80066a8:	20000ec8 	.word	0x20000ec8

080066ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	@ 0x28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10b      	bne.n	80066dc <xTimerGenericCommand+0x30>
	__asm volatile
 80066c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c8:	f383 8811 	msr	BASEPRI, r3
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f3bf 8f4f 	dsb	sy
 80066d4:	623b      	str	r3, [r7, #32]
}
 80066d6:	bf00      	nop
 80066d8:	bf00      	nop
 80066da:	e7fd      	b.n	80066d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80066dc:	4b19      	ldr	r3, [pc, #100]	@ (8006744 <xTimerGenericCommand+0x98>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d02a      	beq.n	800673a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	2b05      	cmp	r3, #5
 80066f4:	dc18      	bgt.n	8006728 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066f6:	f7ff fdad 	bl	8006254 <xTaskGetSchedulerState>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d109      	bne.n	8006714 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006700:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <xTimerGenericCommand+0x98>)
 8006702:	6818      	ldr	r0, [r3, #0]
 8006704:	f107 0110 	add.w	r1, r7, #16
 8006708:	2300      	movs	r3, #0
 800670a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670c:	f7fe fa32 	bl	8004b74 <xQueueGenericSend>
 8006710:	6278      	str	r0, [r7, #36]	@ 0x24
 8006712:	e012      	b.n	800673a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006714:	4b0b      	ldr	r3, [pc, #44]	@ (8006744 <xTimerGenericCommand+0x98>)
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	f107 0110 	add.w	r1, r7, #16
 800671c:	2300      	movs	r3, #0
 800671e:	2200      	movs	r2, #0
 8006720:	f7fe fa28 	bl	8004b74 <xQueueGenericSend>
 8006724:	6278      	str	r0, [r7, #36]	@ 0x24
 8006726:	e008      	b.n	800673a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006728:	4b06      	ldr	r3, [pc, #24]	@ (8006744 <xTimerGenericCommand+0x98>)
 800672a:	6818      	ldr	r0, [r3, #0]
 800672c:	f107 0110 	add.w	r1, r7, #16
 8006730:	2300      	movs	r3, #0
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	f7fe fb20 	bl	8004d78 <xQueueGenericSendFromISR>
 8006738:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800673a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800673c:	4618      	mov	r0, r3
 800673e:	3728      	adds	r7, #40	@ 0x28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20000ec4 	.word	0x20000ec4

08006748 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af02      	add	r7, sp, #8
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006752:	4b23      	ldr	r3, [pc, #140]	@ (80067e0 <prvProcessExpiredTimer+0x98>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe f865 	bl	8004830 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d023      	beq.n	80067bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	18d1      	adds	r1, r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	6978      	ldr	r0, [r7, #20]
 8006782:	f000 f8d5 	bl	8006930 <prvInsertTimerInActiveList>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d020      	beq.n	80067ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800678c:	2300      	movs	r3, #0
 800678e:	9300      	str	r3, [sp, #0]
 8006790:	2300      	movs	r3, #0
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	2100      	movs	r1, #0
 8006796:	6978      	ldr	r0, [r7, #20]
 8006798:	f7ff ff88 	bl	80066ac <xTimerGenericCommand>
 800679c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d114      	bne.n	80067ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	60fb      	str	r3, [r7, #12]
}
 80067b6:	bf00      	nop
 80067b8:	bf00      	nop
 80067ba:	e7fd      	b.n	80067b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067c2:	f023 0301 	bic.w	r3, r3, #1
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	6978      	ldr	r0, [r7, #20]
 80067d4:	4798      	blx	r3
}
 80067d6:	bf00      	nop
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000ebc 	.word	0x20000ebc

080067e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067ec:	f107 0308 	add.w	r3, r7, #8
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f859 	bl	80068a8 <prvGetNextExpireTime>
 80067f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	4619      	mov	r1, r3
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f805 	bl	800680c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006802:	f000 f8d7 	bl	80069b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006806:	bf00      	nop
 8006808:	e7f0      	b.n	80067ec <prvTimerTask+0x8>
	...

0800680c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006816:	f7ff f929 	bl	8005a6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800681a:	f107 0308 	add.w	r3, r7, #8
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f866 	bl	80068f0 <prvSampleTimeNow>
 8006824:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d130      	bne.n	800688e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10a      	bne.n	8006848 <prvProcessTimerOrBlockTask+0x3c>
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	429a      	cmp	r2, r3
 8006838:	d806      	bhi.n	8006848 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800683a:	f7ff f925 	bl	8005a88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800683e:	68f9      	ldr	r1, [r7, #12]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff ff81 	bl	8006748 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006846:	e024      	b.n	8006892 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d008      	beq.n	8006860 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800684e:	4b13      	ldr	r3, [pc, #76]	@ (800689c <prvProcessTimerOrBlockTask+0x90>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <prvProcessTimerOrBlockTask+0x50>
 8006858:	2301      	movs	r3, #1
 800685a:	e000      	b.n	800685e <prvProcessTimerOrBlockTask+0x52>
 800685c:	2300      	movs	r3, #0
 800685e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006860:	4b0f      	ldr	r3, [pc, #60]	@ (80068a0 <prvProcessTimerOrBlockTask+0x94>)
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	4619      	mov	r1, r3
 800686e:	f7fe fe65 	bl	800553c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006872:	f7ff f909 	bl	8005a88 <xTaskResumeAll>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800687c:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <prvProcessTimerOrBlockTask+0x98>)
 800687e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	f3bf 8f6f 	isb	sy
}
 800688c:	e001      	b.n	8006892 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800688e:	f7ff f8fb 	bl	8005a88 <xTaskResumeAll>
}
 8006892:	bf00      	nop
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000ec0 	.word	0x20000ec0
 80068a0:	20000ec4 	.word	0x20000ec4
 80068a4:	e000ed04 	.word	0xe000ed04

080068a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068b0:	4b0e      	ldr	r3, [pc, #56]	@ (80068ec <prvGetNextExpireTime+0x44>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <prvGetNextExpireTime+0x16>
 80068ba:	2201      	movs	r2, #1
 80068bc:	e000      	b.n	80068c0 <prvGetNextExpireTime+0x18>
 80068be:	2200      	movs	r2, #0
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d105      	bne.n	80068d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068cc:	4b07      	ldr	r3, [pc, #28]	@ (80068ec <prvGetNextExpireTime+0x44>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	e001      	b.n	80068dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80068d8:	2300      	movs	r3, #0
 80068da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80068dc:	68fb      	ldr	r3, [r7, #12]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	20000ebc 	.word	0x20000ebc

080068f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068f8:	f7ff f964 	bl	8005bc4 <xTaskGetTickCount>
 80068fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068fe:	4b0b      	ldr	r3, [pc, #44]	@ (800692c <prvSampleTimeNow+0x3c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	429a      	cmp	r2, r3
 8006906:	d205      	bcs.n	8006914 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006908:	f000 f93a 	bl	8006b80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e002      	b.n	800691a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800691a:	4a04      	ldr	r2, [pc, #16]	@ (800692c <prvSampleTimeNow+0x3c>)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000ecc 	.word	0x20000ecc

08006930 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
 800693c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	429a      	cmp	r2, r3
 8006954:	d812      	bhi.n	800697c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	1ad2      	subs	r2, r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	699b      	ldr	r3, [r3, #24]
 8006960:	429a      	cmp	r2, r3
 8006962:	d302      	bcc.n	800696a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006964:	2301      	movs	r3, #1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e01b      	b.n	80069a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800696a:	4b10      	ldr	r3, [pc, #64]	@ (80069ac <prvInsertTimerInActiveList+0x7c>)
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f7fd ff22 	bl	80047be <vListInsert>
 800697a:	e012      	b.n	80069a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d206      	bcs.n	8006992 <prvInsertTimerInActiveList+0x62>
 8006984:	68ba      	ldr	r2, [r7, #8]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d302      	bcc.n	8006992 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800698c:	2301      	movs	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
 8006990:	e007      	b.n	80069a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006992:	4b07      	ldr	r3, [pc, #28]	@ (80069b0 <prvInsertTimerInActiveList+0x80>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3304      	adds	r3, #4
 800699a:	4619      	mov	r1, r3
 800699c:	4610      	mov	r0, r2
 800699e:	f7fd ff0e 	bl	80047be <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069a2:	697b      	ldr	r3, [r7, #20]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000ec0 	.word	0x20000ec0
 80069b0:	20000ebc 	.word	0x20000ebc

080069b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b08e      	sub	sp, #56	@ 0x38
 80069b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069ba:	e0ce      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	da19      	bge.n	80069f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80069c2:	1d3b      	adds	r3, r7, #4
 80069c4:	3304      	adds	r3, #4
 80069c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80069c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10b      	bne.n	80069e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80069ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d2:	f383 8811 	msr	BASEPRI, r3
 80069d6:	f3bf 8f6f 	isb	sy
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	61fb      	str	r3, [r7, #28]
}
 80069e0:	bf00      	nop
 80069e2:	bf00      	nop
 80069e4:	e7fd      	b.n	80069e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ec:	6850      	ldr	r0, [r2, #4]
 80069ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f0:	6892      	ldr	r2, [r2, #8]
 80069f2:	4611      	mov	r1, r2
 80069f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f2c0 80ae 	blt.w	8006b5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d004      	beq.n	8006a14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7fd ff0e 	bl	8004830 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a14:	463b      	mov	r3, r7
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7ff ff6a 	bl	80068f0 <prvSampleTimeNow>
 8006a1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2b09      	cmp	r3, #9
 8006a22:	f200 8097 	bhi.w	8006b54 <prvProcessReceivedCommands+0x1a0>
 8006a26:	a201      	add	r2, pc, #4	@ (adr r2, 8006a2c <prvProcessReceivedCommands+0x78>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006a55 	.word	0x08006a55
 8006a30:	08006a55 	.word	0x08006a55
 8006a34:	08006a55 	.word	0x08006a55
 8006a38:	08006acb 	.word	0x08006acb
 8006a3c:	08006adf 	.word	0x08006adf
 8006a40:	08006b2b 	.word	0x08006b2b
 8006a44:	08006a55 	.word	0x08006a55
 8006a48:	08006a55 	.word	0x08006a55
 8006a4c:	08006acb 	.word	0x08006acb
 8006a50:	08006adf 	.word	0x08006adf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	18d1      	adds	r1, r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a74:	f7ff ff5c 	bl	8006930 <prvInsertTimerInActiveList>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d06c      	beq.n	8006b58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d061      	beq.n	8006b58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	441a      	add	r2, r3
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006aa6:	f7ff fe01 	bl	80066ac <xTimerGenericCommand>
 8006aaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d152      	bne.n	8006b58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab6:	f383 8811 	msr	BASEPRI, r3
 8006aba:	f3bf 8f6f 	isb	sy
 8006abe:	f3bf 8f4f 	dsb	sy
 8006ac2:	61bb      	str	r3, [r7, #24]
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	e7fd      	b.n	8006ac6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ad0:	f023 0301 	bic.w	r3, r3, #1
 8006ad4:	b2da      	uxtb	r2, r3
 8006ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006adc:	e03d      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ae4:	f043 0301 	orr.w	r3, r3, #1
 8006ae8:	b2da      	uxtb	r2, r3
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10b      	bne.n	8006b16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	f383 8811 	msr	BASEPRI, r3
 8006b06:	f3bf 8f6f 	isb	sy
 8006b0a:	f3bf 8f4f 	dsb	sy
 8006b0e:	617b      	str	r3, [r7, #20]
}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	e7fd      	b.n	8006b12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	18d1      	adds	r1, r2, r3
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b24:	f7ff ff04 	bl	8006930 <prvInsertTimerInActiveList>
					break;
 8006b28:	e017      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d103      	bne.n	8006b40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006b38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b3a:	f000 fbe5 	bl	8007308 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b3e:	e00c      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006b52:	e002      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <prvProcessReceivedCommands+0x1a6>
					break;
 8006b58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b5a:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <prvProcessReceivedCommands+0x1c8>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	1d39      	adds	r1, r7, #4
 8006b60:	2200      	movs	r2, #0
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7fe f9a6 	bl	8004eb4 <xQueueReceive>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f47f af26 	bne.w	80069bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	3730      	adds	r7, #48	@ 0x30
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000ec4 	.word	0x20000ec4

08006b80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b088      	sub	sp, #32
 8006b84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b86:	e049      	b.n	8006c1c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b88:	4b2e      	ldr	r3, [pc, #184]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b92:	4b2c      	ldr	r3, [pc, #176]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fd fe45 	bl	8004830 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bb4:	f003 0304 	and.w	r3, r3, #4
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d02f      	beq.n	8006c1c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	693a      	ldr	r2, [r7, #16]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d90e      	bls.n	8006bec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	68fa      	ldr	r2, [r7, #12]
 8006bd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bda:	4b1a      	ldr	r3, [pc, #104]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3304      	adds	r3, #4
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f7fd fdea 	bl	80047be <vListInsert>
 8006bea:	e017      	b.n	8006c1c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bec:	2300      	movs	r3, #0
 8006bee:	9300      	str	r3, [sp, #0]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7ff fd58 	bl	80066ac <xTimerGenericCommand>
 8006bfc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10b      	bne.n	8006c1c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c08:	f383 8811 	msr	BASEPRI, r3
 8006c0c:	f3bf 8f6f 	isb	sy
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	603b      	str	r3, [r7, #0]
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	e7fd      	b.n	8006c18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c1c:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1b0      	bne.n	8006b88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c26:	4b07      	ldr	r3, [pc, #28]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <prvSwitchTimerLists+0xc8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a04      	ldr	r2, [pc, #16]	@ (8006c44 <prvSwitchTimerLists+0xc4>)
 8006c32:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c34:	4a04      	ldr	r2, [pc, #16]	@ (8006c48 <prvSwitchTimerLists+0xc8>)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	6013      	str	r3, [r2, #0]
}
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	20000ebc 	.word	0x20000ebc
 8006c48:	20000ec0 	.word	0x20000ec0

08006c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c52:	f000 f969 	bl	8006f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d120      	bne.n	8006ca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c5e:	4814      	ldr	r0, [pc, #80]	@ (8006cb0 <prvCheckForValidListAndQueue+0x64>)
 8006c60:	f7fd fd5c 	bl	800471c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c64:	4813      	ldr	r0, [pc, #76]	@ (8006cb4 <prvCheckForValidListAndQueue+0x68>)
 8006c66:	f7fd fd59 	bl	800471c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c6a:	4b13      	ldr	r3, [pc, #76]	@ (8006cb8 <prvCheckForValidListAndQueue+0x6c>)
 8006c6c:	4a10      	ldr	r2, [pc, #64]	@ (8006cb0 <prvCheckForValidListAndQueue+0x64>)
 8006c6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c70:	4b12      	ldr	r3, [pc, #72]	@ (8006cbc <prvCheckForValidListAndQueue+0x70>)
 8006c72:	4a10      	ldr	r2, [pc, #64]	@ (8006cb4 <prvCheckForValidListAndQueue+0x68>)
 8006c74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c76:	2300      	movs	r3, #0
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	4b11      	ldr	r3, [pc, #68]	@ (8006cc0 <prvCheckForValidListAndQueue+0x74>)
 8006c7c:	4a11      	ldr	r2, [pc, #68]	@ (8006cc4 <prvCheckForValidListAndQueue+0x78>)
 8006c7e:	2110      	movs	r1, #16
 8006c80:	200a      	movs	r0, #10
 8006c82:	f7fd fe69 	bl	8004958 <xQueueGenericCreateStatic>
 8006c86:	4603      	mov	r3, r0
 8006c88:	4a08      	ldr	r2, [pc, #32]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c8c:	4b07      	ldr	r3, [pc, #28]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c94:	4b05      	ldr	r3, [pc, #20]	@ (8006cac <prvCheckForValidListAndQueue+0x60>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	490b      	ldr	r1, [pc, #44]	@ (8006cc8 <prvCheckForValidListAndQueue+0x7c>)
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fe fc24 	bl	80054e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ca0:	f000 f974 	bl	8006f8c <vPortExitCritical>
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20000ec4 	.word	0x20000ec4
 8006cb0:	20000e94 	.word	0x20000e94
 8006cb4:	20000ea8 	.word	0x20000ea8
 8006cb8:	20000ebc 	.word	0x20000ebc
 8006cbc:	20000ec0 	.word	0x20000ec0
 8006cc0:	20000f70 	.word	0x20000f70
 8006cc4:	20000ed0 	.word	0x20000ed0
 8006cc8:	08008000 	.word	0x08008000

08006ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3b04      	subs	r3, #4
 8006cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3b04      	subs	r3, #4
 8006cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f023 0201 	bic.w	r2, r3, #1
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3b04      	subs	r3, #4
 8006cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d30 <pxPortInitialiseStack+0x64>)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3b14      	subs	r3, #20
 8006d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3b04      	subs	r3, #4
 8006d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f06f 0202 	mvn.w	r2, #2
 8006d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	3b20      	subs	r3, #32
 8006d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d22:	68fb      	ldr	r3, [r7, #12]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3714      	adds	r7, #20
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	08006d35 	.word	0x08006d35

08006d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d3e:	4b13      	ldr	r3, [pc, #76]	@ (8006d8c <prvTaskExitError+0x58>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d46:	d00b      	beq.n	8006d60 <prvTaskExitError+0x2c>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	60fb      	str	r3, [r7, #12]
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <prvTaskExitError+0x28>
	__asm volatile
 8006d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d64:	f383 8811 	msr	BASEPRI, r3
 8006d68:	f3bf 8f6f 	isb	sy
 8006d6c:	f3bf 8f4f 	dsb	sy
 8006d70:	60bb      	str	r3, [r7, #8]
}
 8006d72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d74:	bf00      	nop
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0fc      	beq.n	8006d76 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	2000000c 	.word	0x2000000c

08006d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d90:	4b07      	ldr	r3, [pc, #28]	@ (8006db0 <pxCurrentTCBConst2>)
 8006d92:	6819      	ldr	r1, [r3, #0]
 8006d94:	6808      	ldr	r0, [r1, #0]
 8006d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9a:	f380 8809 	msr	PSP, r0
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f04f 0000 	mov.w	r0, #0
 8006da6:	f380 8811 	msr	BASEPRI, r0
 8006daa:	4770      	bx	lr
 8006dac:	f3af 8000 	nop.w

08006db0 <pxCurrentTCBConst2>:
 8006db0:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006db4:	bf00      	nop
 8006db6:	bf00      	nop

08006db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006db8:	4808      	ldr	r0, [pc, #32]	@ (8006ddc <prvPortStartFirstTask+0x24>)
 8006dba:	6800      	ldr	r0, [r0, #0]
 8006dbc:	6800      	ldr	r0, [r0, #0]
 8006dbe:	f380 8808 	msr	MSP, r0
 8006dc2:	f04f 0000 	mov.w	r0, #0
 8006dc6:	f380 8814 	msr	CONTROL, r0
 8006dca:	b662      	cpsie	i
 8006dcc:	b661      	cpsie	f
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	df00      	svc	0
 8006dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006dda:	bf00      	nop
 8006ddc:	e000ed08 	.word	0xe000ed08

08006de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006de6:	4b47      	ldr	r3, [pc, #284]	@ (8006f04 <xPortStartScheduler+0x124>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a47      	ldr	r2, [pc, #284]	@ (8006f08 <xPortStartScheduler+0x128>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d10b      	bne.n	8006e08 <xPortStartScheduler+0x28>
	__asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	613b      	str	r3, [r7, #16]
}
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e08:	4b3e      	ldr	r3, [pc, #248]	@ (8006f04 <xPortStartScheduler+0x124>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8006f0c <xPortStartScheduler+0x12c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d10b      	bne.n	8006e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e16:	f383 8811 	msr	BASEPRI, r3
 8006e1a:	f3bf 8f6f 	isb	sy
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	60fb      	str	r3, [r7, #12]
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop
 8006e28:	e7fd      	b.n	8006e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e2a:	4b39      	ldr	r3, [pc, #228]	@ (8006f10 <xPortStartScheduler+0x130>)
 8006e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	22ff      	movs	r2, #255	@ 0xff
 8006e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	4b31      	ldr	r3, [pc, #196]	@ (8006f14 <xPortStartScheduler+0x134>)
 8006e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e52:	4b31      	ldr	r3, [pc, #196]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e54:	2207      	movs	r2, #7
 8006e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e58:	e009      	b.n	8006e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	4a2d      	ldr	r2, [pc, #180]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e76:	2b80      	cmp	r3, #128	@ 0x80
 8006e78:	d0ef      	beq.n	8006e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e7a:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f1c3 0307 	rsb	r3, r3, #7
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d00b      	beq.n	8006e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	60bb      	str	r3, [r7, #8]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006eb0:	4a19      	ldr	r2, [pc, #100]	@ (8006f18 <xPortStartScheduler+0x138>)
 8006eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ebc:	4b17      	ldr	r3, [pc, #92]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ec8:	4b14      	ldr	r3, [pc, #80]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a13      	ldr	r2, [pc, #76]	@ (8006f1c <xPortStartScheduler+0x13c>)
 8006ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ed4:	f000 f8da 	bl	800708c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ed8:	4b11      	ldr	r3, [pc, #68]	@ (8006f20 <xPortStartScheduler+0x140>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ede:	f000 f8f9 	bl	80070d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ee2:	4b10      	ldr	r3, [pc, #64]	@ (8006f24 <xPortStartScheduler+0x144>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8006f24 <xPortStartScheduler+0x144>)
 8006ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006eee:	f7ff ff63 	bl	8006db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ef2:	f7fe ff31 	bl	8005d58 <vTaskSwitchContext>
	prvTaskExitError();
 8006ef6:	f7ff ff1d 	bl	8006d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	e000ed00 	.word	0xe000ed00
 8006f08:	410fc271 	.word	0x410fc271
 8006f0c:	410fc270 	.word	0x410fc270
 8006f10:	e000e400 	.word	0xe000e400
 8006f14:	20000fc0 	.word	0x20000fc0
 8006f18:	20000fc4 	.word	0x20000fc4
 8006f1c:	e000ed20 	.word	0xe000ed20
 8006f20:	2000000c 	.word	0x2000000c
 8006f24:	e000ef34 	.word	0xe000ef34

08006f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	607b      	str	r3, [r7, #4]
}
 8006f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f42:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	4a0e      	ldr	r2, [pc, #56]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8006f84 <vPortEnterCritical+0x5c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d110      	bne.n	8006f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f54:	4b0c      	ldr	r3, [pc, #48]	@ (8006f88 <vPortEnterCritical+0x60>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	603b      	str	r3, [r7, #0]
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	e7fd      	b.n	8006f72 <vPortEnterCritical+0x4a>
	}
}
 8006f76:	bf00      	nop
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	2000000c 	.word	0x2000000c
 8006f88:	e000ed04 	.word	0xe000ed04

08006f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f92:	4b12      	ldr	r3, [pc, #72]	@ (8006fdc <vPortExitCritical+0x50>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <vPortExitCritical+0x26>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	607b      	str	r3, [r7, #4]
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	4a08      	ldr	r2, [pc, #32]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fbc:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <vPortExitCritical+0x50>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <vPortExitCritical+0x44>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f383 8811 	msr	BASEPRI, r3
}
 8006fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr
 8006fdc:	2000000c 	.word	0x2000000c

08006fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006fe0:	f3ef 8009 	mrs	r0, PSP
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4b15      	ldr	r3, [pc, #84]	@ (8007040 <pxCurrentTCBConst>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	f01e 0f10 	tst.w	lr, #16
 8006ff0:	bf08      	it	eq
 8006ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffa:	6010      	str	r0, [r2, #0]
 8006ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007004:	f380 8811 	msr	BASEPRI, r0
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f7fe fea2 	bl	8005d58 <vTaskSwitchContext>
 8007014:	f04f 0000 	mov.w	r0, #0
 8007018:	f380 8811 	msr	BASEPRI, r0
 800701c:	bc09      	pop	{r0, r3}
 800701e:	6819      	ldr	r1, [r3, #0]
 8007020:	6808      	ldr	r0, [r1, #0]
 8007022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007026:	f01e 0f10 	tst.w	lr, #16
 800702a:	bf08      	it	eq
 800702c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007030:	f380 8809 	msr	PSP, r0
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w

08007040 <pxCurrentTCBConst>:
 8007040:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop

08007048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	607b      	str	r3, [r7, #4]
}
 8007060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007062:	f7fe fdbf 	bl	8005be4 <xTaskIncrementTick>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <xPortSysTickHandler+0x40>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	2300      	movs	r3, #0
 8007076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	f383 8811 	msr	BASEPRI, r3
}
 800707e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	e000ed04 	.word	0xe000ed04

0800708c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007090:	4b0b      	ldr	r3, [pc, #44]	@ (80070c0 <vPortSetupTimerInterrupt+0x34>)
 8007092:	2200      	movs	r2, #0
 8007094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007096:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <vPortSetupTimerInterrupt+0x38>)
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800709c:	4b0a      	ldr	r3, [pc, #40]	@ (80070c8 <vPortSetupTimerInterrupt+0x3c>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a0a      	ldr	r2, [pc, #40]	@ (80070cc <vPortSetupTimerInterrupt+0x40>)
 80070a2:	fba2 2303 	umull	r2, r3, r2, r3
 80070a6:	099b      	lsrs	r3, r3, #6
 80070a8:	4a09      	ldr	r2, [pc, #36]	@ (80070d0 <vPortSetupTimerInterrupt+0x44>)
 80070aa:	3b01      	subs	r3, #1
 80070ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ae:	4b04      	ldr	r3, [pc, #16]	@ (80070c0 <vPortSetupTimerInterrupt+0x34>)
 80070b0:	2207      	movs	r2, #7
 80070b2:	601a      	str	r2, [r3, #0]
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	e000e010 	.word	0xe000e010
 80070c4:	e000e018 	.word	0xe000e018
 80070c8:	20000000 	.word	0x20000000
 80070cc:	10624dd3 	.word	0x10624dd3
 80070d0:	e000e014 	.word	0xe000e014

080070d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80070d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80070e4 <vPortEnableVFP+0x10>
 80070d8:	6801      	ldr	r1, [r0, #0]
 80070da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80070de:	6001      	str	r1, [r0, #0]
 80070e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80070e2:	bf00      	nop
 80070e4:	e000ed88 	.word	0xe000ed88

080070e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80070ee:	f3ef 8305 	mrs	r3, IPSR
 80070f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2b0f      	cmp	r3, #15
 80070f8:	d915      	bls.n	8007126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070fa:	4a18      	ldr	r2, [pc, #96]	@ (800715c <vPortValidateInterruptPriority+0x74>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007104:	4b16      	ldr	r3, [pc, #88]	@ (8007160 <vPortValidateInterruptPriority+0x78>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	7afa      	ldrb	r2, [r7, #11]
 800710a:	429a      	cmp	r2, r3
 800710c:	d20b      	bcs.n	8007126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	607b      	str	r3, [r7, #4]
}
 8007120:	bf00      	nop
 8007122:	bf00      	nop
 8007124:	e7fd      	b.n	8007122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007126:	4b0f      	ldr	r3, [pc, #60]	@ (8007164 <vPortValidateInterruptPriority+0x7c>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800712e:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <vPortValidateInterruptPriority+0x80>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d90b      	bls.n	800714e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	603b      	str	r3, [r7, #0]
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	e7fd      	b.n	800714a <vPortValidateInterruptPriority+0x62>
	}
 800714e:	bf00      	nop
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	e000e3f0 	.word	0xe000e3f0
 8007160:	20000fc0 	.word	0x20000fc0
 8007164:	e000ed0c 	.word	0xe000ed0c
 8007168:	20000fc4 	.word	0x20000fc4

0800716c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08a      	sub	sp, #40	@ 0x28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007178:	f7fe fc78 	bl	8005a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800717c:	4b5c      	ldr	r3, [pc, #368]	@ (80072f0 <pvPortMalloc+0x184>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007184:	f000 f924 	bl	80073d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007188:	4b5a      	ldr	r3, [pc, #360]	@ (80072f4 <pvPortMalloc+0x188>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 8095 	bne.w	80072c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01e      	beq.n	80071da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800719c:	2208      	movs	r2, #8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4413      	add	r3, r2
 80071a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d015      	beq.n	80071da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f023 0307 	bic.w	r3, r3, #7
 80071b4:	3308      	adds	r3, #8
 80071b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f003 0307 	and.w	r3, r3, #7
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00b      	beq.n	80071da <pvPortMalloc+0x6e>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	617b      	str	r3, [r7, #20]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d06f      	beq.n	80072c0 <pvPortMalloc+0x154>
 80071e0:	4b45      	ldr	r3, [pc, #276]	@ (80072f8 <pvPortMalloc+0x18c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d86a      	bhi.n	80072c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80071ea:	4b44      	ldr	r3, [pc, #272]	@ (80072fc <pvPortMalloc+0x190>)
 80071ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80071ee:	4b43      	ldr	r3, [pc, #268]	@ (80072fc <pvPortMalloc+0x190>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071f4:	e004      	b.n	8007200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	429a      	cmp	r2, r3
 8007208:	d903      	bls.n	8007212 <pvPortMalloc+0xa6>
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1f1      	bne.n	80071f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007212:	4b37      	ldr	r3, [pc, #220]	@ (80072f0 <pvPortMalloc+0x184>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007218:	429a      	cmp	r2, r3
 800721a:	d051      	beq.n	80072c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2208      	movs	r2, #8
 8007222:	4413      	add	r3, r2
 8007224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	6a3b      	ldr	r3, [r7, #32]
 800722c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	2308      	movs	r3, #8
 8007238:	005b      	lsls	r3, r3, #1
 800723a:	429a      	cmp	r2, r3
 800723c:	d920      	bls.n	8007280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4413      	add	r3, r2
 8007244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <pvPortMalloc+0xfc>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	613b      	str	r3, [r7, #16]
}
 8007262:	bf00      	nop
 8007264:	bf00      	nop
 8007266:	e7fd      	b.n	8007264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800727a:	69b8      	ldr	r0, [r7, #24]
 800727c:	f000 f90a 	bl	8007494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007280:	4b1d      	ldr	r3, [pc, #116]	@ (80072f8 <pvPortMalloc+0x18c>)
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	4a1b      	ldr	r2, [pc, #108]	@ (80072f8 <pvPortMalloc+0x18c>)
 800728c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800728e:	4b1a      	ldr	r3, [pc, #104]	@ (80072f8 <pvPortMalloc+0x18c>)
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	4b1b      	ldr	r3, [pc, #108]	@ (8007300 <pvPortMalloc+0x194>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d203      	bcs.n	80072a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800729a:	4b17      	ldr	r3, [pc, #92]	@ (80072f8 <pvPortMalloc+0x18c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a18      	ldr	r2, [pc, #96]	@ (8007300 <pvPortMalloc+0x194>)
 80072a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <pvPortMalloc+0x188>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	431a      	orrs	r2, r3
 80072ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072b6:	4b13      	ldr	r3, [pc, #76]	@ (8007304 <pvPortMalloc+0x198>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3301      	adds	r3, #1
 80072bc:	4a11      	ldr	r2, [pc, #68]	@ (8007304 <pvPortMalloc+0x198>)
 80072be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072c0:	f7fe fbe2 	bl	8005a88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <pvPortMalloc+0x17a>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	60fb      	str	r3, [r7, #12]
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	e7fd      	b.n	80072e2 <pvPortMalloc+0x176>
	return pvReturn;
 80072e6:	69fb      	ldr	r3, [r7, #28]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3728      	adds	r7, #40	@ 0x28
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20005df0 	.word	0x20005df0
 80072f4:	20005e04 	.word	0x20005e04
 80072f8:	20005df4 	.word	0x20005df4
 80072fc:	20005de8 	.word	0x20005de8
 8007300:	20005df8 	.word	0x20005df8
 8007304:	20005dfc 	.word	0x20005dfc

08007308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b086      	sub	sp, #24
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d04f      	beq.n	80073ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800731a:	2308      	movs	r3, #8
 800731c:	425b      	negs	r3, r3
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	4413      	add	r3, r2
 8007322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	685a      	ldr	r2, [r3, #4]
 800732c:	4b25      	ldr	r3, [pc, #148]	@ (80073c4 <vPortFree+0xbc>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4013      	ands	r3, r2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10b      	bne.n	800734e <vPortFree+0x46>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	60fb      	str	r3, [r7, #12]
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00b      	beq.n	800736e <vPortFree+0x66>
	__asm volatile
 8007356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	60bb      	str	r3, [r7, #8]
}
 8007368:	bf00      	nop
 800736a:	bf00      	nop
 800736c:	e7fd      	b.n	800736a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	4b14      	ldr	r3, [pc, #80]	@ (80073c4 <vPortFree+0xbc>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4013      	ands	r3, r2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d01e      	beq.n	80073ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d11a      	bne.n	80073ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	4b0e      	ldr	r3, [pc, #56]	@ (80073c4 <vPortFree+0xbc>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007394:	f7fe fb6a 	bl	8005a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	4b0a      	ldr	r3, [pc, #40]	@ (80073c8 <vPortFree+0xc0>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	4a09      	ldr	r2, [pc, #36]	@ (80073c8 <vPortFree+0xc0>)
 80073a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073a6:	6938      	ldr	r0, [r7, #16]
 80073a8:	f000 f874 	bl	8007494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073ac:	4b07      	ldr	r3, [pc, #28]	@ (80073cc <vPortFree+0xc4>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3301      	adds	r3, #1
 80073b2:	4a06      	ldr	r2, [pc, #24]	@ (80073cc <vPortFree+0xc4>)
 80073b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073b6:	f7fe fb67 	bl	8005a88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073ba:	bf00      	nop
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	20005e04 	.word	0x20005e04
 80073c8:	20005df4 	.word	0x20005df4
 80073cc:	20005e00 	.word	0x20005e00

080073d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80073d6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80073da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073dc:	4b27      	ldr	r3, [pc, #156]	@ (800747c <prvHeapInit+0xac>)
 80073de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00c      	beq.n	8007404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	3307      	adds	r3, #7
 80073ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0307 	bic.w	r3, r3, #7
 80073f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	4a1f      	ldr	r2, [pc, #124]	@ (800747c <prvHeapInit+0xac>)
 8007400:	4413      	add	r3, r2
 8007402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007408:	4a1d      	ldr	r2, [pc, #116]	@ (8007480 <prvHeapInit+0xb0>)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800740e:	4b1c      	ldr	r3, [pc, #112]	@ (8007480 <prvHeapInit+0xb0>)
 8007410:	2200      	movs	r2, #0
 8007412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	4413      	add	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800741c:	2208      	movs	r2, #8
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	1a9b      	subs	r3, r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a15      	ldr	r2, [pc, #84]	@ (8007484 <prvHeapInit+0xb4>)
 8007430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007432:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <prvHeapInit+0xb4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	2200      	movs	r2, #0
 8007438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800743a:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <prvHeapInit+0xb4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007450:	4b0c      	ldr	r3, [pc, #48]	@ (8007484 <prvHeapInit+0xb4>)
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	4a0a      	ldr	r2, [pc, #40]	@ (8007488 <prvHeapInit+0xb8>)
 800745e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	4a09      	ldr	r2, [pc, #36]	@ (800748c <prvHeapInit+0xbc>)
 8007466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007468:	4b09      	ldr	r3, [pc, #36]	@ (8007490 <prvHeapInit+0xc0>)
 800746a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800746e:	601a      	str	r2, [r3, #0]
}
 8007470:	bf00      	nop
 8007472:	3714      	adds	r7, #20
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr
 800747c:	20000fc8 	.word	0x20000fc8
 8007480:	20005de8 	.word	0x20005de8
 8007484:	20005df0 	.word	0x20005df0
 8007488:	20005df8 	.word	0x20005df8
 800748c:	20005df4 	.word	0x20005df4
 8007490:	20005e04 	.word	0x20005e04

08007494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800749c:	4b28      	ldr	r3, [pc, #160]	@ (8007540 <prvInsertBlockIntoFreeList+0xac>)
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e002      	b.n	80074a8 <prvInsertBlockIntoFreeList+0x14>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d8f7      	bhi.n	80074a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	4413      	add	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d108      	bne.n	80074d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685a      	ldr	r2, [r3, #4]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	441a      	add	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	441a      	add	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d118      	bne.n	800751c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	4b15      	ldr	r3, [pc, #84]	@ (8007544 <prvInsertBlockIntoFreeList+0xb0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d00d      	beq.n	8007512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685a      	ldr	r2, [r3, #4]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
 8007510:	e008      	b.n	8007524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007512:	4b0c      	ldr	r3, [pc, #48]	@ (8007544 <prvInsertBlockIntoFreeList+0xb0>)
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e003      	b.n	8007524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	429a      	cmp	r2, r3
 800752a:	d002      	beq.n	8007532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	20005de8 	.word	0x20005de8
 8007544:	20005df0 	.word	0x20005df0

08007548 <siprintf>:
 8007548:	b40e      	push	{r1, r2, r3}
 800754a:	b500      	push	{lr}
 800754c:	b09c      	sub	sp, #112	@ 0x70
 800754e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007550:	9002      	str	r0, [sp, #8]
 8007552:	9006      	str	r0, [sp, #24]
 8007554:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007558:	4809      	ldr	r0, [pc, #36]	@ (8007580 <siprintf+0x38>)
 800755a:	9107      	str	r1, [sp, #28]
 800755c:	9104      	str	r1, [sp, #16]
 800755e:	4909      	ldr	r1, [pc, #36]	@ (8007584 <siprintf+0x3c>)
 8007560:	f853 2b04 	ldr.w	r2, [r3], #4
 8007564:	9105      	str	r1, [sp, #20]
 8007566:	6800      	ldr	r0, [r0, #0]
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	a902      	add	r1, sp, #8
 800756c:	f000 fa18 	bl	80079a0 <_svfiprintf_r>
 8007570:	9b02      	ldr	r3, [sp, #8]
 8007572:	2200      	movs	r2, #0
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	b01c      	add	sp, #112	@ 0x70
 8007578:	f85d eb04 	ldr.w	lr, [sp], #4
 800757c:	b003      	add	sp, #12
 800757e:	4770      	bx	lr
 8007580:	20000010 	.word	0x20000010
 8007584:	ffff0208 	.word	0xffff0208

08007588 <_vsiprintf_r>:
 8007588:	b500      	push	{lr}
 800758a:	b09b      	sub	sp, #108	@ 0x6c
 800758c:	9100      	str	r1, [sp, #0]
 800758e:	9104      	str	r1, [sp, #16]
 8007590:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007594:	9105      	str	r1, [sp, #20]
 8007596:	9102      	str	r1, [sp, #8]
 8007598:	4905      	ldr	r1, [pc, #20]	@ (80075b0 <_vsiprintf_r+0x28>)
 800759a:	9103      	str	r1, [sp, #12]
 800759c:	4669      	mov	r1, sp
 800759e:	f000 f9ff 	bl	80079a0 <_svfiprintf_r>
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	2200      	movs	r2, #0
 80075a6:	701a      	strb	r2, [r3, #0]
 80075a8:	b01b      	add	sp, #108	@ 0x6c
 80075aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80075ae:	bf00      	nop
 80075b0:	ffff0208 	.word	0xffff0208

080075b4 <vsiprintf>:
 80075b4:	4613      	mov	r3, r2
 80075b6:	460a      	mov	r2, r1
 80075b8:	4601      	mov	r1, r0
 80075ba:	4802      	ldr	r0, [pc, #8]	@ (80075c4 <vsiprintf+0x10>)
 80075bc:	6800      	ldr	r0, [r0, #0]
 80075be:	f7ff bfe3 	b.w	8007588 <_vsiprintf_r>
 80075c2:	bf00      	nop
 80075c4:	20000010 	.word	0x20000010

080075c8 <memset>:
 80075c8:	4402      	add	r2, r0
 80075ca:	4603      	mov	r3, r0
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d100      	bne.n	80075d2 <memset+0xa>
 80075d0:	4770      	bx	lr
 80075d2:	f803 1b01 	strb.w	r1, [r3], #1
 80075d6:	e7f9      	b.n	80075cc <memset+0x4>

080075d8 <_reclaim_reent>:
 80075d8:	4b29      	ldr	r3, [pc, #164]	@ (8007680 <_reclaim_reent+0xa8>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4283      	cmp	r3, r0
 80075de:	b570      	push	{r4, r5, r6, lr}
 80075e0:	4604      	mov	r4, r0
 80075e2:	d04b      	beq.n	800767c <_reclaim_reent+0xa4>
 80075e4:	69c3      	ldr	r3, [r0, #28]
 80075e6:	b1ab      	cbz	r3, 8007614 <_reclaim_reent+0x3c>
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	b16b      	cbz	r3, 8007608 <_reclaim_reent+0x30>
 80075ec:	2500      	movs	r5, #0
 80075ee:	69e3      	ldr	r3, [r4, #28]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	5959      	ldr	r1, [r3, r5]
 80075f4:	2900      	cmp	r1, #0
 80075f6:	d13b      	bne.n	8007670 <_reclaim_reent+0x98>
 80075f8:	3504      	adds	r5, #4
 80075fa:	2d80      	cmp	r5, #128	@ 0x80
 80075fc:	d1f7      	bne.n	80075ee <_reclaim_reent+0x16>
 80075fe:	69e3      	ldr	r3, [r4, #28]
 8007600:	4620      	mov	r0, r4
 8007602:	68d9      	ldr	r1, [r3, #12]
 8007604:	f000 f878 	bl	80076f8 <_free_r>
 8007608:	69e3      	ldr	r3, [r4, #28]
 800760a:	6819      	ldr	r1, [r3, #0]
 800760c:	b111      	cbz	r1, 8007614 <_reclaim_reent+0x3c>
 800760e:	4620      	mov	r0, r4
 8007610:	f000 f872 	bl	80076f8 <_free_r>
 8007614:	6961      	ldr	r1, [r4, #20]
 8007616:	b111      	cbz	r1, 800761e <_reclaim_reent+0x46>
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f86d 	bl	80076f8 <_free_r>
 800761e:	69e1      	ldr	r1, [r4, #28]
 8007620:	b111      	cbz	r1, 8007628 <_reclaim_reent+0x50>
 8007622:	4620      	mov	r0, r4
 8007624:	f000 f868 	bl	80076f8 <_free_r>
 8007628:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800762a:	b111      	cbz	r1, 8007632 <_reclaim_reent+0x5a>
 800762c:	4620      	mov	r0, r4
 800762e:	f000 f863 	bl	80076f8 <_free_r>
 8007632:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007634:	b111      	cbz	r1, 800763c <_reclaim_reent+0x64>
 8007636:	4620      	mov	r0, r4
 8007638:	f000 f85e 	bl	80076f8 <_free_r>
 800763c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800763e:	b111      	cbz	r1, 8007646 <_reclaim_reent+0x6e>
 8007640:	4620      	mov	r0, r4
 8007642:	f000 f859 	bl	80076f8 <_free_r>
 8007646:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007648:	b111      	cbz	r1, 8007650 <_reclaim_reent+0x78>
 800764a:	4620      	mov	r0, r4
 800764c:	f000 f854 	bl	80076f8 <_free_r>
 8007650:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007652:	b111      	cbz	r1, 800765a <_reclaim_reent+0x82>
 8007654:	4620      	mov	r0, r4
 8007656:	f000 f84f 	bl	80076f8 <_free_r>
 800765a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800765c:	b111      	cbz	r1, 8007664 <_reclaim_reent+0x8c>
 800765e:	4620      	mov	r0, r4
 8007660:	f000 f84a 	bl	80076f8 <_free_r>
 8007664:	6a23      	ldr	r3, [r4, #32]
 8007666:	b14b      	cbz	r3, 800767c <_reclaim_reent+0xa4>
 8007668:	4620      	mov	r0, r4
 800766a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800766e:	4718      	bx	r3
 8007670:	680e      	ldr	r6, [r1, #0]
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f840 	bl	80076f8 <_free_r>
 8007678:	4631      	mov	r1, r6
 800767a:	e7bb      	b.n	80075f4 <_reclaim_reent+0x1c>
 800767c:	bd70      	pop	{r4, r5, r6, pc}
 800767e:	bf00      	nop
 8007680:	20000010 	.word	0x20000010

08007684 <__errno>:
 8007684:	4b01      	ldr	r3, [pc, #4]	@ (800768c <__errno+0x8>)
 8007686:	6818      	ldr	r0, [r3, #0]
 8007688:	4770      	bx	lr
 800768a:	bf00      	nop
 800768c:	20000010 	.word	0x20000010

08007690 <__libc_init_array>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	4d0d      	ldr	r5, [pc, #52]	@ (80076c8 <__libc_init_array+0x38>)
 8007694:	4c0d      	ldr	r4, [pc, #52]	@ (80076cc <__libc_init_array+0x3c>)
 8007696:	1b64      	subs	r4, r4, r5
 8007698:	10a4      	asrs	r4, r4, #2
 800769a:	2600      	movs	r6, #0
 800769c:	42a6      	cmp	r6, r4
 800769e:	d109      	bne.n	80076b4 <__libc_init_array+0x24>
 80076a0:	4d0b      	ldr	r5, [pc, #44]	@ (80076d0 <__libc_init_array+0x40>)
 80076a2:	4c0c      	ldr	r4, [pc, #48]	@ (80076d4 <__libc_init_array+0x44>)
 80076a4:	f000 fc66 	bl	8007f74 <_init>
 80076a8:	1b64      	subs	r4, r4, r5
 80076aa:	10a4      	asrs	r4, r4, #2
 80076ac:	2600      	movs	r6, #0
 80076ae:	42a6      	cmp	r6, r4
 80076b0:	d105      	bne.n	80076be <__libc_init_array+0x2e>
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076b8:	4798      	blx	r3
 80076ba:	3601      	adds	r6, #1
 80076bc:	e7ee      	b.n	800769c <__libc_init_array+0xc>
 80076be:	f855 3b04 	ldr.w	r3, [r5], #4
 80076c2:	4798      	blx	r3
 80076c4:	3601      	adds	r6, #1
 80076c6:	e7f2      	b.n	80076ae <__libc_init_array+0x1e>
 80076c8:	0800808c 	.word	0x0800808c
 80076cc:	0800808c 	.word	0x0800808c
 80076d0:	0800808c 	.word	0x0800808c
 80076d4:	08008090 	.word	0x08008090

080076d8 <__retarget_lock_acquire_recursive>:
 80076d8:	4770      	bx	lr

080076da <__retarget_lock_release_recursive>:
 80076da:	4770      	bx	lr

080076dc <memcpy>:
 80076dc:	440a      	add	r2, r1
 80076de:	4291      	cmp	r1, r2
 80076e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80076e4:	d100      	bne.n	80076e8 <memcpy+0xc>
 80076e6:	4770      	bx	lr
 80076e8:	b510      	push	{r4, lr}
 80076ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076f2:	4291      	cmp	r1, r2
 80076f4:	d1f9      	bne.n	80076ea <memcpy+0xe>
 80076f6:	bd10      	pop	{r4, pc}

080076f8 <_free_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4605      	mov	r5, r0
 80076fc:	2900      	cmp	r1, #0
 80076fe:	d041      	beq.n	8007784 <_free_r+0x8c>
 8007700:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007704:	1f0c      	subs	r4, r1, #4
 8007706:	2b00      	cmp	r3, #0
 8007708:	bfb8      	it	lt
 800770a:	18e4      	addlt	r4, r4, r3
 800770c:	f000 f8e0 	bl	80078d0 <__malloc_lock>
 8007710:	4a1d      	ldr	r2, [pc, #116]	@ (8007788 <_free_r+0x90>)
 8007712:	6813      	ldr	r3, [r2, #0]
 8007714:	b933      	cbnz	r3, 8007724 <_free_r+0x2c>
 8007716:	6063      	str	r3, [r4, #4]
 8007718:	6014      	str	r4, [r2, #0]
 800771a:	4628      	mov	r0, r5
 800771c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007720:	f000 b8dc 	b.w	80078dc <__malloc_unlock>
 8007724:	42a3      	cmp	r3, r4
 8007726:	d908      	bls.n	800773a <_free_r+0x42>
 8007728:	6820      	ldr	r0, [r4, #0]
 800772a:	1821      	adds	r1, r4, r0
 800772c:	428b      	cmp	r3, r1
 800772e:	bf01      	itttt	eq
 8007730:	6819      	ldreq	r1, [r3, #0]
 8007732:	685b      	ldreq	r3, [r3, #4]
 8007734:	1809      	addeq	r1, r1, r0
 8007736:	6021      	streq	r1, [r4, #0]
 8007738:	e7ed      	b.n	8007716 <_free_r+0x1e>
 800773a:	461a      	mov	r2, r3
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	b10b      	cbz	r3, 8007744 <_free_r+0x4c>
 8007740:	42a3      	cmp	r3, r4
 8007742:	d9fa      	bls.n	800773a <_free_r+0x42>
 8007744:	6811      	ldr	r1, [r2, #0]
 8007746:	1850      	adds	r0, r2, r1
 8007748:	42a0      	cmp	r0, r4
 800774a:	d10b      	bne.n	8007764 <_free_r+0x6c>
 800774c:	6820      	ldr	r0, [r4, #0]
 800774e:	4401      	add	r1, r0
 8007750:	1850      	adds	r0, r2, r1
 8007752:	4283      	cmp	r3, r0
 8007754:	6011      	str	r1, [r2, #0]
 8007756:	d1e0      	bne.n	800771a <_free_r+0x22>
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	6053      	str	r3, [r2, #4]
 800775e:	4408      	add	r0, r1
 8007760:	6010      	str	r0, [r2, #0]
 8007762:	e7da      	b.n	800771a <_free_r+0x22>
 8007764:	d902      	bls.n	800776c <_free_r+0x74>
 8007766:	230c      	movs	r3, #12
 8007768:	602b      	str	r3, [r5, #0]
 800776a:	e7d6      	b.n	800771a <_free_r+0x22>
 800776c:	6820      	ldr	r0, [r4, #0]
 800776e:	1821      	adds	r1, r4, r0
 8007770:	428b      	cmp	r3, r1
 8007772:	bf04      	itt	eq
 8007774:	6819      	ldreq	r1, [r3, #0]
 8007776:	685b      	ldreq	r3, [r3, #4]
 8007778:	6063      	str	r3, [r4, #4]
 800777a:	bf04      	itt	eq
 800777c:	1809      	addeq	r1, r1, r0
 800777e:	6021      	streq	r1, [r4, #0]
 8007780:	6054      	str	r4, [r2, #4]
 8007782:	e7ca      	b.n	800771a <_free_r+0x22>
 8007784:	bd38      	pop	{r3, r4, r5, pc}
 8007786:	bf00      	nop
 8007788:	20005f4c 	.word	0x20005f4c

0800778c <sbrk_aligned>:
 800778c:	b570      	push	{r4, r5, r6, lr}
 800778e:	4e0f      	ldr	r6, [pc, #60]	@ (80077cc <sbrk_aligned+0x40>)
 8007790:	460c      	mov	r4, r1
 8007792:	6831      	ldr	r1, [r6, #0]
 8007794:	4605      	mov	r5, r0
 8007796:	b911      	cbnz	r1, 800779e <sbrk_aligned+0x12>
 8007798:	f000 fba6 	bl	8007ee8 <_sbrk_r>
 800779c:	6030      	str	r0, [r6, #0]
 800779e:	4621      	mov	r1, r4
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 fba1 	bl	8007ee8 <_sbrk_r>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d103      	bne.n	80077b2 <sbrk_aligned+0x26>
 80077aa:	f04f 34ff 	mov.w	r4, #4294967295
 80077ae:	4620      	mov	r0, r4
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
 80077b2:	1cc4      	adds	r4, r0, #3
 80077b4:	f024 0403 	bic.w	r4, r4, #3
 80077b8:	42a0      	cmp	r0, r4
 80077ba:	d0f8      	beq.n	80077ae <sbrk_aligned+0x22>
 80077bc:	1a21      	subs	r1, r4, r0
 80077be:	4628      	mov	r0, r5
 80077c0:	f000 fb92 	bl	8007ee8 <_sbrk_r>
 80077c4:	3001      	adds	r0, #1
 80077c6:	d1f2      	bne.n	80077ae <sbrk_aligned+0x22>
 80077c8:	e7ef      	b.n	80077aa <sbrk_aligned+0x1e>
 80077ca:	bf00      	nop
 80077cc:	20005f48 	.word	0x20005f48

080077d0 <_malloc_r>:
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	1ccd      	adds	r5, r1, #3
 80077d6:	f025 0503 	bic.w	r5, r5, #3
 80077da:	3508      	adds	r5, #8
 80077dc:	2d0c      	cmp	r5, #12
 80077de:	bf38      	it	cc
 80077e0:	250c      	movcc	r5, #12
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	4606      	mov	r6, r0
 80077e6:	db01      	blt.n	80077ec <_malloc_r+0x1c>
 80077e8:	42a9      	cmp	r1, r5
 80077ea:	d904      	bls.n	80077f6 <_malloc_r+0x26>
 80077ec:	230c      	movs	r3, #12
 80077ee:	6033      	str	r3, [r6, #0]
 80077f0:	2000      	movs	r0, #0
 80077f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80078cc <_malloc_r+0xfc>
 80077fa:	f000 f869 	bl	80078d0 <__malloc_lock>
 80077fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007802:	461c      	mov	r4, r3
 8007804:	bb44      	cbnz	r4, 8007858 <_malloc_r+0x88>
 8007806:	4629      	mov	r1, r5
 8007808:	4630      	mov	r0, r6
 800780a:	f7ff ffbf 	bl	800778c <sbrk_aligned>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	4604      	mov	r4, r0
 8007812:	d158      	bne.n	80078c6 <_malloc_r+0xf6>
 8007814:	f8d8 4000 	ldr.w	r4, [r8]
 8007818:	4627      	mov	r7, r4
 800781a:	2f00      	cmp	r7, #0
 800781c:	d143      	bne.n	80078a6 <_malloc_r+0xd6>
 800781e:	2c00      	cmp	r4, #0
 8007820:	d04b      	beq.n	80078ba <_malloc_r+0xea>
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	4639      	mov	r1, r7
 8007826:	4630      	mov	r0, r6
 8007828:	eb04 0903 	add.w	r9, r4, r3
 800782c:	f000 fb5c 	bl	8007ee8 <_sbrk_r>
 8007830:	4581      	cmp	r9, r0
 8007832:	d142      	bne.n	80078ba <_malloc_r+0xea>
 8007834:	6821      	ldr	r1, [r4, #0]
 8007836:	1a6d      	subs	r5, r5, r1
 8007838:	4629      	mov	r1, r5
 800783a:	4630      	mov	r0, r6
 800783c:	f7ff ffa6 	bl	800778c <sbrk_aligned>
 8007840:	3001      	adds	r0, #1
 8007842:	d03a      	beq.n	80078ba <_malloc_r+0xea>
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	442b      	add	r3, r5
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	f8d8 3000 	ldr.w	r3, [r8]
 800784e:	685a      	ldr	r2, [r3, #4]
 8007850:	bb62      	cbnz	r2, 80078ac <_malloc_r+0xdc>
 8007852:	f8c8 7000 	str.w	r7, [r8]
 8007856:	e00f      	b.n	8007878 <_malloc_r+0xa8>
 8007858:	6822      	ldr	r2, [r4, #0]
 800785a:	1b52      	subs	r2, r2, r5
 800785c:	d420      	bmi.n	80078a0 <_malloc_r+0xd0>
 800785e:	2a0b      	cmp	r2, #11
 8007860:	d917      	bls.n	8007892 <_malloc_r+0xc2>
 8007862:	1961      	adds	r1, r4, r5
 8007864:	42a3      	cmp	r3, r4
 8007866:	6025      	str	r5, [r4, #0]
 8007868:	bf18      	it	ne
 800786a:	6059      	strne	r1, [r3, #4]
 800786c:	6863      	ldr	r3, [r4, #4]
 800786e:	bf08      	it	eq
 8007870:	f8c8 1000 	streq.w	r1, [r8]
 8007874:	5162      	str	r2, [r4, r5]
 8007876:	604b      	str	r3, [r1, #4]
 8007878:	4630      	mov	r0, r6
 800787a:	f000 f82f 	bl	80078dc <__malloc_unlock>
 800787e:	f104 000b 	add.w	r0, r4, #11
 8007882:	1d23      	adds	r3, r4, #4
 8007884:	f020 0007 	bic.w	r0, r0, #7
 8007888:	1ac2      	subs	r2, r0, r3
 800788a:	bf1c      	itt	ne
 800788c:	1a1b      	subne	r3, r3, r0
 800788e:	50a3      	strne	r3, [r4, r2]
 8007890:	e7af      	b.n	80077f2 <_malloc_r+0x22>
 8007892:	6862      	ldr	r2, [r4, #4]
 8007894:	42a3      	cmp	r3, r4
 8007896:	bf0c      	ite	eq
 8007898:	f8c8 2000 	streq.w	r2, [r8]
 800789c:	605a      	strne	r2, [r3, #4]
 800789e:	e7eb      	b.n	8007878 <_malloc_r+0xa8>
 80078a0:	4623      	mov	r3, r4
 80078a2:	6864      	ldr	r4, [r4, #4]
 80078a4:	e7ae      	b.n	8007804 <_malloc_r+0x34>
 80078a6:	463c      	mov	r4, r7
 80078a8:	687f      	ldr	r7, [r7, #4]
 80078aa:	e7b6      	b.n	800781a <_malloc_r+0x4a>
 80078ac:	461a      	mov	r2, r3
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	d1fb      	bne.n	80078ac <_malloc_r+0xdc>
 80078b4:	2300      	movs	r3, #0
 80078b6:	6053      	str	r3, [r2, #4]
 80078b8:	e7de      	b.n	8007878 <_malloc_r+0xa8>
 80078ba:	230c      	movs	r3, #12
 80078bc:	6033      	str	r3, [r6, #0]
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 f80c 	bl	80078dc <__malloc_unlock>
 80078c4:	e794      	b.n	80077f0 <_malloc_r+0x20>
 80078c6:	6005      	str	r5, [r0, #0]
 80078c8:	e7d6      	b.n	8007878 <_malloc_r+0xa8>
 80078ca:	bf00      	nop
 80078cc:	20005f4c 	.word	0x20005f4c

080078d0 <__malloc_lock>:
 80078d0:	4801      	ldr	r0, [pc, #4]	@ (80078d8 <__malloc_lock+0x8>)
 80078d2:	f7ff bf01 	b.w	80076d8 <__retarget_lock_acquire_recursive>
 80078d6:	bf00      	nop
 80078d8:	20005f44 	.word	0x20005f44

080078dc <__malloc_unlock>:
 80078dc:	4801      	ldr	r0, [pc, #4]	@ (80078e4 <__malloc_unlock+0x8>)
 80078de:	f7ff befc 	b.w	80076da <__retarget_lock_release_recursive>
 80078e2:	bf00      	nop
 80078e4:	20005f44 	.word	0x20005f44

080078e8 <__ssputs_r>:
 80078e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ec:	688e      	ldr	r6, [r1, #8]
 80078ee:	461f      	mov	r7, r3
 80078f0:	42be      	cmp	r6, r7
 80078f2:	680b      	ldr	r3, [r1, #0]
 80078f4:	4682      	mov	sl, r0
 80078f6:	460c      	mov	r4, r1
 80078f8:	4690      	mov	r8, r2
 80078fa:	d82d      	bhi.n	8007958 <__ssputs_r+0x70>
 80078fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007900:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007904:	d026      	beq.n	8007954 <__ssputs_r+0x6c>
 8007906:	6965      	ldr	r5, [r4, #20]
 8007908:	6909      	ldr	r1, [r1, #16]
 800790a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800790e:	eba3 0901 	sub.w	r9, r3, r1
 8007912:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007916:	1c7b      	adds	r3, r7, #1
 8007918:	444b      	add	r3, r9
 800791a:	106d      	asrs	r5, r5, #1
 800791c:	429d      	cmp	r5, r3
 800791e:	bf38      	it	cc
 8007920:	461d      	movcc	r5, r3
 8007922:	0553      	lsls	r3, r2, #21
 8007924:	d527      	bpl.n	8007976 <__ssputs_r+0x8e>
 8007926:	4629      	mov	r1, r5
 8007928:	f7ff ff52 	bl	80077d0 <_malloc_r>
 800792c:	4606      	mov	r6, r0
 800792e:	b360      	cbz	r0, 800798a <__ssputs_r+0xa2>
 8007930:	6921      	ldr	r1, [r4, #16]
 8007932:	464a      	mov	r2, r9
 8007934:	f7ff fed2 	bl	80076dc <memcpy>
 8007938:	89a3      	ldrh	r3, [r4, #12]
 800793a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800793e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007942:	81a3      	strh	r3, [r4, #12]
 8007944:	6126      	str	r6, [r4, #16]
 8007946:	6165      	str	r5, [r4, #20]
 8007948:	444e      	add	r6, r9
 800794a:	eba5 0509 	sub.w	r5, r5, r9
 800794e:	6026      	str	r6, [r4, #0]
 8007950:	60a5      	str	r5, [r4, #8]
 8007952:	463e      	mov	r6, r7
 8007954:	42be      	cmp	r6, r7
 8007956:	d900      	bls.n	800795a <__ssputs_r+0x72>
 8007958:	463e      	mov	r6, r7
 800795a:	6820      	ldr	r0, [r4, #0]
 800795c:	4632      	mov	r2, r6
 800795e:	4641      	mov	r1, r8
 8007960:	f000 faa8 	bl	8007eb4 <memmove>
 8007964:	68a3      	ldr	r3, [r4, #8]
 8007966:	1b9b      	subs	r3, r3, r6
 8007968:	60a3      	str	r3, [r4, #8]
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	4433      	add	r3, r6
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	2000      	movs	r0, #0
 8007972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007976:	462a      	mov	r2, r5
 8007978:	f000 fac6 	bl	8007f08 <_realloc_r>
 800797c:	4606      	mov	r6, r0
 800797e:	2800      	cmp	r0, #0
 8007980:	d1e0      	bne.n	8007944 <__ssputs_r+0x5c>
 8007982:	6921      	ldr	r1, [r4, #16]
 8007984:	4650      	mov	r0, sl
 8007986:	f7ff feb7 	bl	80076f8 <_free_r>
 800798a:	230c      	movs	r3, #12
 800798c:	f8ca 3000 	str.w	r3, [sl]
 8007990:	89a3      	ldrh	r3, [r4, #12]
 8007992:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007996:	81a3      	strh	r3, [r4, #12]
 8007998:	f04f 30ff 	mov.w	r0, #4294967295
 800799c:	e7e9      	b.n	8007972 <__ssputs_r+0x8a>
	...

080079a0 <_svfiprintf_r>:
 80079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	4698      	mov	r8, r3
 80079a6:	898b      	ldrh	r3, [r1, #12]
 80079a8:	061b      	lsls	r3, r3, #24
 80079aa:	b09d      	sub	sp, #116	@ 0x74
 80079ac:	4607      	mov	r7, r0
 80079ae:	460d      	mov	r5, r1
 80079b0:	4614      	mov	r4, r2
 80079b2:	d510      	bpl.n	80079d6 <_svfiprintf_r+0x36>
 80079b4:	690b      	ldr	r3, [r1, #16]
 80079b6:	b973      	cbnz	r3, 80079d6 <_svfiprintf_r+0x36>
 80079b8:	2140      	movs	r1, #64	@ 0x40
 80079ba:	f7ff ff09 	bl	80077d0 <_malloc_r>
 80079be:	6028      	str	r0, [r5, #0]
 80079c0:	6128      	str	r0, [r5, #16]
 80079c2:	b930      	cbnz	r0, 80079d2 <_svfiprintf_r+0x32>
 80079c4:	230c      	movs	r3, #12
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	f04f 30ff 	mov.w	r0, #4294967295
 80079cc:	b01d      	add	sp, #116	@ 0x74
 80079ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d2:	2340      	movs	r3, #64	@ 0x40
 80079d4:	616b      	str	r3, [r5, #20]
 80079d6:	2300      	movs	r3, #0
 80079d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079da:	2320      	movs	r3, #32
 80079dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80079e4:	2330      	movs	r3, #48	@ 0x30
 80079e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007b84 <_svfiprintf_r+0x1e4>
 80079ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079ee:	f04f 0901 	mov.w	r9, #1
 80079f2:	4623      	mov	r3, r4
 80079f4:	469a      	mov	sl, r3
 80079f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079fa:	b10a      	cbz	r2, 8007a00 <_svfiprintf_r+0x60>
 80079fc:	2a25      	cmp	r2, #37	@ 0x25
 80079fe:	d1f9      	bne.n	80079f4 <_svfiprintf_r+0x54>
 8007a00:	ebba 0b04 	subs.w	fp, sl, r4
 8007a04:	d00b      	beq.n	8007a1e <_svfiprintf_r+0x7e>
 8007a06:	465b      	mov	r3, fp
 8007a08:	4622      	mov	r2, r4
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f7ff ff6b 	bl	80078e8 <__ssputs_r>
 8007a12:	3001      	adds	r0, #1
 8007a14:	f000 80a7 	beq.w	8007b66 <_svfiprintf_r+0x1c6>
 8007a18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a1a:	445a      	add	r2, fp
 8007a1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 809f 	beq.w	8007b66 <_svfiprintf_r+0x1c6>
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a32:	f10a 0a01 	add.w	sl, sl, #1
 8007a36:	9304      	str	r3, [sp, #16]
 8007a38:	9307      	str	r3, [sp, #28]
 8007a3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a40:	4654      	mov	r4, sl
 8007a42:	2205      	movs	r2, #5
 8007a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a48:	484e      	ldr	r0, [pc, #312]	@ (8007b84 <_svfiprintf_r+0x1e4>)
 8007a4a:	f7f8 fbc1 	bl	80001d0 <memchr>
 8007a4e:	9a04      	ldr	r2, [sp, #16]
 8007a50:	b9d8      	cbnz	r0, 8007a8a <_svfiprintf_r+0xea>
 8007a52:	06d0      	lsls	r0, r2, #27
 8007a54:	bf44      	itt	mi
 8007a56:	2320      	movmi	r3, #32
 8007a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a5c:	0711      	lsls	r1, r2, #28
 8007a5e:	bf44      	itt	mi
 8007a60:	232b      	movmi	r3, #43	@ 0x2b
 8007a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a66:	f89a 3000 	ldrb.w	r3, [sl]
 8007a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a6c:	d015      	beq.n	8007a9a <_svfiprintf_r+0xfa>
 8007a6e:	9a07      	ldr	r2, [sp, #28]
 8007a70:	4654      	mov	r4, sl
 8007a72:	2000      	movs	r0, #0
 8007a74:	f04f 0c0a 	mov.w	ip, #10
 8007a78:	4621      	mov	r1, r4
 8007a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a7e:	3b30      	subs	r3, #48	@ 0x30
 8007a80:	2b09      	cmp	r3, #9
 8007a82:	d94b      	bls.n	8007b1c <_svfiprintf_r+0x17c>
 8007a84:	b1b0      	cbz	r0, 8007ab4 <_svfiprintf_r+0x114>
 8007a86:	9207      	str	r2, [sp, #28]
 8007a88:	e014      	b.n	8007ab4 <_svfiprintf_r+0x114>
 8007a8a:	eba0 0308 	sub.w	r3, r0, r8
 8007a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007a92:	4313      	orrs	r3, r2
 8007a94:	9304      	str	r3, [sp, #16]
 8007a96:	46a2      	mov	sl, r4
 8007a98:	e7d2      	b.n	8007a40 <_svfiprintf_r+0xa0>
 8007a9a:	9b03      	ldr	r3, [sp, #12]
 8007a9c:	1d19      	adds	r1, r3, #4
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	9103      	str	r1, [sp, #12]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bfbb      	ittet	lt
 8007aa6:	425b      	neglt	r3, r3
 8007aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8007aac:	9307      	strge	r3, [sp, #28]
 8007aae:	9307      	strlt	r3, [sp, #28]
 8007ab0:	bfb8      	it	lt
 8007ab2:	9204      	strlt	r2, [sp, #16]
 8007ab4:	7823      	ldrb	r3, [r4, #0]
 8007ab6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ab8:	d10a      	bne.n	8007ad0 <_svfiprintf_r+0x130>
 8007aba:	7863      	ldrb	r3, [r4, #1]
 8007abc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007abe:	d132      	bne.n	8007b26 <_svfiprintf_r+0x186>
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	1d1a      	adds	r2, r3, #4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	9203      	str	r2, [sp, #12]
 8007ac8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007acc:	3402      	adds	r4, #2
 8007ace:	9305      	str	r3, [sp, #20]
 8007ad0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007b94 <_svfiprintf_r+0x1f4>
 8007ad4:	7821      	ldrb	r1, [r4, #0]
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	4650      	mov	r0, sl
 8007ada:	f7f8 fb79 	bl	80001d0 <memchr>
 8007ade:	b138      	cbz	r0, 8007af0 <_svfiprintf_r+0x150>
 8007ae0:	9b04      	ldr	r3, [sp, #16]
 8007ae2:	eba0 000a 	sub.w	r0, r0, sl
 8007ae6:	2240      	movs	r2, #64	@ 0x40
 8007ae8:	4082      	lsls	r2, r0
 8007aea:	4313      	orrs	r3, r2
 8007aec:	3401      	adds	r4, #1
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007af4:	4824      	ldr	r0, [pc, #144]	@ (8007b88 <_svfiprintf_r+0x1e8>)
 8007af6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007afa:	2206      	movs	r2, #6
 8007afc:	f7f8 fb68 	bl	80001d0 <memchr>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d036      	beq.n	8007b72 <_svfiprintf_r+0x1d2>
 8007b04:	4b21      	ldr	r3, [pc, #132]	@ (8007b8c <_svfiprintf_r+0x1ec>)
 8007b06:	bb1b      	cbnz	r3, 8007b50 <_svfiprintf_r+0x1b0>
 8007b08:	9b03      	ldr	r3, [sp, #12]
 8007b0a:	3307      	adds	r3, #7
 8007b0c:	f023 0307 	bic.w	r3, r3, #7
 8007b10:	3308      	adds	r3, #8
 8007b12:	9303      	str	r3, [sp, #12]
 8007b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b16:	4433      	add	r3, r6
 8007b18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b1a:	e76a      	b.n	80079f2 <_svfiprintf_r+0x52>
 8007b1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b20:	460c      	mov	r4, r1
 8007b22:	2001      	movs	r0, #1
 8007b24:	e7a8      	b.n	8007a78 <_svfiprintf_r+0xd8>
 8007b26:	2300      	movs	r3, #0
 8007b28:	3401      	adds	r4, #1
 8007b2a:	9305      	str	r3, [sp, #20]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f04f 0c0a 	mov.w	ip, #10
 8007b32:	4620      	mov	r0, r4
 8007b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b38:	3a30      	subs	r2, #48	@ 0x30
 8007b3a:	2a09      	cmp	r2, #9
 8007b3c:	d903      	bls.n	8007b46 <_svfiprintf_r+0x1a6>
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0c6      	beq.n	8007ad0 <_svfiprintf_r+0x130>
 8007b42:	9105      	str	r1, [sp, #20]
 8007b44:	e7c4      	b.n	8007ad0 <_svfiprintf_r+0x130>
 8007b46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e7f0      	b.n	8007b32 <_svfiprintf_r+0x192>
 8007b50:	ab03      	add	r3, sp, #12
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	462a      	mov	r2, r5
 8007b56:	4b0e      	ldr	r3, [pc, #56]	@ (8007b90 <_svfiprintf_r+0x1f0>)
 8007b58:	a904      	add	r1, sp, #16
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	f3af 8000 	nop.w
 8007b60:	1c42      	adds	r2, r0, #1
 8007b62:	4606      	mov	r6, r0
 8007b64:	d1d6      	bne.n	8007b14 <_svfiprintf_r+0x174>
 8007b66:	89ab      	ldrh	r3, [r5, #12]
 8007b68:	065b      	lsls	r3, r3, #25
 8007b6a:	f53f af2d 	bmi.w	80079c8 <_svfiprintf_r+0x28>
 8007b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b70:	e72c      	b.n	80079cc <_svfiprintf_r+0x2c>
 8007b72:	ab03      	add	r3, sp, #12
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	462a      	mov	r2, r5
 8007b78:	4b05      	ldr	r3, [pc, #20]	@ (8007b90 <_svfiprintf_r+0x1f0>)
 8007b7a:	a904      	add	r1, sp, #16
 8007b7c:	4638      	mov	r0, r7
 8007b7e:	f000 f879 	bl	8007c74 <_printf_i>
 8007b82:	e7ed      	b.n	8007b60 <_svfiprintf_r+0x1c0>
 8007b84:	08008050 	.word	0x08008050
 8007b88:	0800805a 	.word	0x0800805a
 8007b8c:	00000000 	.word	0x00000000
 8007b90:	080078e9 	.word	0x080078e9
 8007b94:	08008056 	.word	0x08008056

08007b98 <_printf_common>:
 8007b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	4698      	mov	r8, r3
 8007ba0:	688a      	ldr	r2, [r1, #8]
 8007ba2:	690b      	ldr	r3, [r1, #16]
 8007ba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	bfb8      	it	lt
 8007bac:	4613      	movlt	r3, r2
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	b10a      	cbz	r2, 8007bbe <_printf_common+0x26>
 8007bba:	3301      	adds	r3, #1
 8007bbc:	6033      	str	r3, [r6, #0]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	0699      	lsls	r1, r3, #26
 8007bc2:	bf42      	ittt	mi
 8007bc4:	6833      	ldrmi	r3, [r6, #0]
 8007bc6:	3302      	addmi	r3, #2
 8007bc8:	6033      	strmi	r3, [r6, #0]
 8007bca:	6825      	ldr	r5, [r4, #0]
 8007bcc:	f015 0506 	ands.w	r5, r5, #6
 8007bd0:	d106      	bne.n	8007be0 <_printf_common+0x48>
 8007bd2:	f104 0a19 	add.w	sl, r4, #25
 8007bd6:	68e3      	ldr	r3, [r4, #12]
 8007bd8:	6832      	ldr	r2, [r6, #0]
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	42ab      	cmp	r3, r5
 8007bde:	dc26      	bgt.n	8007c2e <_printf_common+0x96>
 8007be0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	3b00      	subs	r3, #0
 8007be8:	bf18      	it	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	0692      	lsls	r2, r2, #26
 8007bee:	d42b      	bmi.n	8007c48 <_printf_common+0xb0>
 8007bf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c8      	blx	r9
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d01e      	beq.n	8007c3c <_printf_common+0xa4>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	6922      	ldr	r2, [r4, #16]
 8007c02:	f003 0306 	and.w	r3, r3, #6
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	bf02      	ittt	eq
 8007c0a:	68e5      	ldreq	r5, [r4, #12]
 8007c0c:	6833      	ldreq	r3, [r6, #0]
 8007c0e:	1aed      	subeq	r5, r5, r3
 8007c10:	68a3      	ldr	r3, [r4, #8]
 8007c12:	bf0c      	ite	eq
 8007c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c18:	2500      	movne	r5, #0
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	bfc4      	itt	gt
 8007c1e:	1a9b      	subgt	r3, r3, r2
 8007c20:	18ed      	addgt	r5, r5, r3
 8007c22:	2600      	movs	r6, #0
 8007c24:	341a      	adds	r4, #26
 8007c26:	42b5      	cmp	r5, r6
 8007c28:	d11a      	bne.n	8007c60 <_printf_common+0xc8>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e008      	b.n	8007c40 <_printf_common+0xa8>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4652      	mov	r2, sl
 8007c32:	4641      	mov	r1, r8
 8007c34:	4638      	mov	r0, r7
 8007c36:	47c8      	blx	r9
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d103      	bne.n	8007c44 <_printf_common+0xac>
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c44:	3501      	adds	r5, #1
 8007c46:	e7c6      	b.n	8007bd6 <_printf_common+0x3e>
 8007c48:	18e1      	adds	r1, r4, r3
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	2030      	movs	r0, #48	@ 0x30
 8007c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c52:	4422      	add	r2, r4
 8007c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	e7c7      	b.n	8007bf0 <_printf_common+0x58>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4622      	mov	r2, r4
 8007c64:	4641      	mov	r1, r8
 8007c66:	4638      	mov	r0, r7
 8007c68:	47c8      	blx	r9
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d0e6      	beq.n	8007c3c <_printf_common+0xa4>
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7d9      	b.n	8007c26 <_printf_common+0x8e>
	...

08007c74 <_printf_i>:
 8007c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	7e0f      	ldrb	r7, [r1, #24]
 8007c7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c7c:	2f78      	cmp	r7, #120	@ 0x78
 8007c7e:	4691      	mov	r9, r2
 8007c80:	4680      	mov	r8, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	469a      	mov	sl, r3
 8007c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c8a:	d807      	bhi.n	8007c9c <_printf_i+0x28>
 8007c8c:	2f62      	cmp	r7, #98	@ 0x62
 8007c8e:	d80a      	bhi.n	8007ca6 <_printf_i+0x32>
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	f000 80d2 	beq.w	8007e3a <_printf_i+0x1c6>
 8007c96:	2f58      	cmp	r7, #88	@ 0x58
 8007c98:	f000 80b9 	beq.w	8007e0e <_printf_i+0x19a>
 8007c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ca4:	e03a      	b.n	8007d1c <_printf_i+0xa8>
 8007ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007caa:	2b15      	cmp	r3, #21
 8007cac:	d8f6      	bhi.n	8007c9c <_printf_i+0x28>
 8007cae:	a101      	add	r1, pc, #4	@ (adr r1, 8007cb4 <_printf_i+0x40>)
 8007cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cb4:	08007d0d 	.word	0x08007d0d
 8007cb8:	08007d21 	.word	0x08007d21
 8007cbc:	08007c9d 	.word	0x08007c9d
 8007cc0:	08007c9d 	.word	0x08007c9d
 8007cc4:	08007c9d 	.word	0x08007c9d
 8007cc8:	08007c9d 	.word	0x08007c9d
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007c9d 	.word	0x08007c9d
 8007cd4:	08007c9d 	.word	0x08007c9d
 8007cd8:	08007c9d 	.word	0x08007c9d
 8007cdc:	08007c9d 	.word	0x08007c9d
 8007ce0:	08007e21 	.word	0x08007e21
 8007ce4:	08007d4b 	.word	0x08007d4b
 8007ce8:	08007ddb 	.word	0x08007ddb
 8007cec:	08007c9d 	.word	0x08007c9d
 8007cf0:	08007c9d 	.word	0x08007c9d
 8007cf4:	08007e43 	.word	0x08007e43
 8007cf8:	08007c9d 	.word	0x08007c9d
 8007cfc:	08007d4b 	.word	0x08007d4b
 8007d00:	08007c9d 	.word	0x08007c9d
 8007d04:	08007c9d 	.word	0x08007c9d
 8007d08:	08007de3 	.word	0x08007de3
 8007d0c:	6833      	ldr	r3, [r6, #0]
 8007d0e:	1d1a      	adds	r2, r3, #4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6032      	str	r2, [r6, #0]
 8007d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e09d      	b.n	8007e5c <_printf_i+0x1e8>
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	6820      	ldr	r0, [r4, #0]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	6031      	str	r1, [r6, #0]
 8007d28:	0606      	lsls	r6, r0, #24
 8007d2a:	d501      	bpl.n	8007d30 <_printf_i+0xbc>
 8007d2c:	681d      	ldr	r5, [r3, #0]
 8007d2e:	e003      	b.n	8007d38 <_printf_i+0xc4>
 8007d30:	0645      	lsls	r5, r0, #25
 8007d32:	d5fb      	bpl.n	8007d2c <_printf_i+0xb8>
 8007d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	da03      	bge.n	8007d44 <_printf_i+0xd0>
 8007d3c:	232d      	movs	r3, #45	@ 0x2d
 8007d3e:	426d      	negs	r5, r5
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d44:	4859      	ldr	r0, [pc, #356]	@ (8007eac <_printf_i+0x238>)
 8007d46:	230a      	movs	r3, #10
 8007d48:	e011      	b.n	8007d6e <_printf_i+0xfa>
 8007d4a:	6821      	ldr	r1, [r4, #0]
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	0608      	lsls	r0, r1, #24
 8007d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d54:	d402      	bmi.n	8007d5c <_printf_i+0xe8>
 8007d56:	0649      	lsls	r1, r1, #25
 8007d58:	bf48      	it	mi
 8007d5a:	b2ad      	uxthmi	r5, r5
 8007d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d5e:	4853      	ldr	r0, [pc, #332]	@ (8007eac <_printf_i+0x238>)
 8007d60:	6033      	str	r3, [r6, #0]
 8007d62:	bf14      	ite	ne
 8007d64:	230a      	movne	r3, #10
 8007d66:	2308      	moveq	r3, #8
 8007d68:	2100      	movs	r1, #0
 8007d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d6e:	6866      	ldr	r6, [r4, #4]
 8007d70:	60a6      	str	r6, [r4, #8]
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	bfa2      	ittt	ge
 8007d76:	6821      	ldrge	r1, [r4, #0]
 8007d78:	f021 0104 	bicge.w	r1, r1, #4
 8007d7c:	6021      	strge	r1, [r4, #0]
 8007d7e:	b90d      	cbnz	r5, 8007d84 <_printf_i+0x110>
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	d04b      	beq.n	8007e1c <_printf_i+0x1a8>
 8007d84:	4616      	mov	r6, r2
 8007d86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d8e:	5dc7      	ldrb	r7, [r0, r7]
 8007d90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d94:	462f      	mov	r7, r5
 8007d96:	42bb      	cmp	r3, r7
 8007d98:	460d      	mov	r5, r1
 8007d9a:	d9f4      	bls.n	8007d86 <_printf_i+0x112>
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d10b      	bne.n	8007db8 <_printf_i+0x144>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	07df      	lsls	r7, r3, #31
 8007da4:	d508      	bpl.n	8007db8 <_printf_i+0x144>
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	6861      	ldr	r1, [r4, #4]
 8007daa:	4299      	cmp	r1, r3
 8007dac:	bfde      	ittt	le
 8007dae:	2330      	movle	r3, #48	@ 0x30
 8007db0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007db4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007db8:	1b92      	subs	r2, r2, r6
 8007dba:	6122      	str	r2, [r4, #16]
 8007dbc:	f8cd a000 	str.w	sl, [sp]
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	aa03      	add	r2, sp, #12
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f7ff fee6 	bl	8007b98 <_printf_common>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d14a      	bne.n	8007e66 <_printf_i+0x1f2>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	b004      	add	sp, #16
 8007dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	f043 0320 	orr.w	r3, r3, #32
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	4833      	ldr	r0, [pc, #204]	@ (8007eb0 <_printf_i+0x23c>)
 8007de4:	2778      	movs	r7, #120	@ 0x78
 8007de6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	6831      	ldr	r1, [r6, #0]
 8007dee:	061f      	lsls	r7, r3, #24
 8007df0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007df4:	d402      	bmi.n	8007dfc <_printf_i+0x188>
 8007df6:	065f      	lsls	r7, r3, #25
 8007df8:	bf48      	it	mi
 8007dfa:	b2ad      	uxthmi	r5, r5
 8007dfc:	6031      	str	r1, [r6, #0]
 8007dfe:	07d9      	lsls	r1, r3, #31
 8007e00:	bf44      	itt	mi
 8007e02:	f043 0320 	orrmi.w	r3, r3, #32
 8007e06:	6023      	strmi	r3, [r4, #0]
 8007e08:	b11d      	cbz	r5, 8007e12 <_printf_i+0x19e>
 8007e0a:	2310      	movs	r3, #16
 8007e0c:	e7ac      	b.n	8007d68 <_printf_i+0xf4>
 8007e0e:	4827      	ldr	r0, [pc, #156]	@ (8007eac <_printf_i+0x238>)
 8007e10:	e7e9      	b.n	8007de6 <_printf_i+0x172>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	f023 0320 	bic.w	r3, r3, #32
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	e7f6      	b.n	8007e0a <_printf_i+0x196>
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	e7bd      	b.n	8007d9c <_printf_i+0x128>
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	6825      	ldr	r5, [r4, #0]
 8007e24:	6961      	ldr	r1, [r4, #20]
 8007e26:	1d18      	adds	r0, r3, #4
 8007e28:	6030      	str	r0, [r6, #0]
 8007e2a:	062e      	lsls	r6, r5, #24
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	d501      	bpl.n	8007e34 <_printf_i+0x1c0>
 8007e30:	6019      	str	r1, [r3, #0]
 8007e32:	e002      	b.n	8007e3a <_printf_i+0x1c6>
 8007e34:	0668      	lsls	r0, r5, #25
 8007e36:	d5fb      	bpl.n	8007e30 <_printf_i+0x1bc>
 8007e38:	8019      	strh	r1, [r3, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	4616      	mov	r6, r2
 8007e40:	e7bc      	b.n	8007dbc <_printf_i+0x148>
 8007e42:	6833      	ldr	r3, [r6, #0]
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	6032      	str	r2, [r6, #0]
 8007e48:	681e      	ldr	r6, [r3, #0]
 8007e4a:	6862      	ldr	r2, [r4, #4]
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7f8 f9be 	bl	80001d0 <memchr>
 8007e54:	b108      	cbz	r0, 8007e5a <_printf_i+0x1e6>
 8007e56:	1b80      	subs	r0, r0, r6
 8007e58:	6060      	str	r0, [r4, #4]
 8007e5a:	6863      	ldr	r3, [r4, #4]
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e64:	e7aa      	b.n	8007dbc <_printf_i+0x148>
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	47d0      	blx	sl
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0ad      	beq.n	8007dd0 <_printf_i+0x15c>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	d413      	bmi.n	8007ea2 <_printf_i+0x22e>
 8007e7a:	68e0      	ldr	r0, [r4, #12]
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	4298      	cmp	r0, r3
 8007e80:	bfb8      	it	lt
 8007e82:	4618      	movlt	r0, r3
 8007e84:	e7a6      	b.n	8007dd4 <_printf_i+0x160>
 8007e86:	2301      	movs	r3, #1
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	47d0      	blx	sl
 8007e90:	3001      	adds	r0, #1
 8007e92:	d09d      	beq.n	8007dd0 <_printf_i+0x15c>
 8007e94:	3501      	adds	r5, #1
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	9903      	ldr	r1, [sp, #12]
 8007e9a:	1a5b      	subs	r3, r3, r1
 8007e9c:	42ab      	cmp	r3, r5
 8007e9e:	dcf2      	bgt.n	8007e86 <_printf_i+0x212>
 8007ea0:	e7eb      	b.n	8007e7a <_printf_i+0x206>
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	f104 0619 	add.w	r6, r4, #25
 8007ea8:	e7f5      	b.n	8007e96 <_printf_i+0x222>
 8007eaa:	bf00      	nop
 8007eac:	08008061 	.word	0x08008061
 8007eb0:	08008072 	.word	0x08008072

08007eb4 <memmove>:
 8007eb4:	4288      	cmp	r0, r1
 8007eb6:	b510      	push	{r4, lr}
 8007eb8:	eb01 0402 	add.w	r4, r1, r2
 8007ebc:	d902      	bls.n	8007ec4 <memmove+0x10>
 8007ebe:	4284      	cmp	r4, r0
 8007ec0:	4623      	mov	r3, r4
 8007ec2:	d807      	bhi.n	8007ed4 <memmove+0x20>
 8007ec4:	1e43      	subs	r3, r0, #1
 8007ec6:	42a1      	cmp	r1, r4
 8007ec8:	d008      	beq.n	8007edc <memmove+0x28>
 8007eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ed2:	e7f8      	b.n	8007ec6 <memmove+0x12>
 8007ed4:	4402      	add	r2, r0
 8007ed6:	4601      	mov	r1, r0
 8007ed8:	428a      	cmp	r2, r1
 8007eda:	d100      	bne.n	8007ede <memmove+0x2a>
 8007edc:	bd10      	pop	{r4, pc}
 8007ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007ee6:	e7f7      	b.n	8007ed8 <memmove+0x24>

08007ee8 <_sbrk_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4d06      	ldr	r5, [pc, #24]	@ (8007f04 <_sbrk_r+0x1c>)
 8007eec:	2300      	movs	r3, #0
 8007eee:	4604      	mov	r4, r0
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	602b      	str	r3, [r5, #0]
 8007ef4:	f7f8 ff3e 	bl	8000d74 <_sbrk>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_sbrk_r+0x1a>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_sbrk_r+0x1a>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	20005f40 	.word	0x20005f40

08007f08 <_realloc_r>:
 8007f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	4615      	mov	r5, r2
 8007f10:	460c      	mov	r4, r1
 8007f12:	b921      	cbnz	r1, 8007f1e <_realloc_r+0x16>
 8007f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f18:	4611      	mov	r1, r2
 8007f1a:	f7ff bc59 	b.w	80077d0 <_malloc_r>
 8007f1e:	b92a      	cbnz	r2, 8007f2c <_realloc_r+0x24>
 8007f20:	f7ff fbea 	bl	80076f8 <_free_r>
 8007f24:	2400      	movs	r4, #0
 8007f26:	4620      	mov	r0, r4
 8007f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f2c:	f000 f81a 	bl	8007f64 <_malloc_usable_size_r>
 8007f30:	4285      	cmp	r5, r0
 8007f32:	4606      	mov	r6, r0
 8007f34:	d802      	bhi.n	8007f3c <_realloc_r+0x34>
 8007f36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007f3a:	d8f4      	bhi.n	8007f26 <_realloc_r+0x1e>
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	4640      	mov	r0, r8
 8007f40:	f7ff fc46 	bl	80077d0 <_malloc_r>
 8007f44:	4607      	mov	r7, r0
 8007f46:	2800      	cmp	r0, #0
 8007f48:	d0ec      	beq.n	8007f24 <_realloc_r+0x1c>
 8007f4a:	42b5      	cmp	r5, r6
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4621      	mov	r1, r4
 8007f50:	bf28      	it	cs
 8007f52:	4632      	movcs	r2, r6
 8007f54:	f7ff fbc2 	bl	80076dc <memcpy>
 8007f58:	4621      	mov	r1, r4
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	f7ff fbcc 	bl	80076f8 <_free_r>
 8007f60:	463c      	mov	r4, r7
 8007f62:	e7e0      	b.n	8007f26 <_realloc_r+0x1e>

08007f64 <_malloc_usable_size_r>:
 8007f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f68:	1f18      	subs	r0, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bfbc      	itt	lt
 8007f6e:	580b      	ldrlt	r3, [r1, r0]
 8007f70:	18c0      	addlt	r0, r0, r3
 8007f72:	4770      	bx	lr

08007f74 <_init>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr

08007f80 <_fini>:
 8007f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f82:	bf00      	nop
 8007f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f86:	bc08      	pop	{r3}
 8007f88:	469e      	mov	lr, r3
 8007f8a:	4770      	bx	lr
