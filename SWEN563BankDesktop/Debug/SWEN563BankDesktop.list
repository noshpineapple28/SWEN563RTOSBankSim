
SWEN563BankDesktop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ffc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800818c  0800818c  0000918c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082ac  080082ac  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  080082ac  080082ac  000092ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082b4  080082b4  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082b4  080082b4  000092b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080082b8  080082b8  000092b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080082bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f00  20000060  0800831c  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005f60  0800831c  0000af60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e076  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000416e  00000000  00000000  00028106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001920  00000000  00000000  0002c278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001372  00000000  00000000  0002db98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002924f  00000000  00000000  0002ef0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d362  00000000  00000000  00058159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe006  00000000  00000000  000754bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001734c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e7c  00000000  00000000  00173504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0017a380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008174 	.word	0x08008174

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008174 	.word	0x08008174

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <puts>:
 *
 * @param str	a pointer to a string to print
 *
 * @return		the number of characters printed
 */
int puts (const char* str) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	int ret = sprintf (BUFFER, "%s\r\n", str);
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	4908      	ldr	r1, [pc, #32]	@ (800058c <puts+0x2c>)
 800056c:	4808      	ldr	r0, [pc, #32]	@ (8000590 <puts+0x30>)
 800056e:	f007 f8eb 	bl	8007748 <siprintf>
 8000572:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(&huart2, (unsigned char *) BUFFER, ret, 100);
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	b29a      	uxth	r2, r3
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	4905      	ldr	r1, [pc, #20]	@ (8000590 <puts+0x30>)
 800057c:	4805      	ldr	r0, [pc, #20]	@ (8000594 <puts+0x34>)
 800057e:	f002 ffa5 	bl	80034cc <HAL_UART_Transmit>
	return ret;
 8000582:	68fb      	ldr	r3, [r7, #12]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	0800818c 	.word	0x0800818c
 8000590:	20000104 	.word	0x20000104
 8000594:	2000007c 	.word	0x2000007c

08000598 <printf>:
 * @param format	a pointer to a string to print, along with format chars
 * @param ...		data values to insert into format char positions
 *
 * @return		the number of characters printed
 */
int printf (const char* format, ...) {
 8000598:	b40f      	push	{r0, r1, r2, r3}
 800059a:	b580      	push	{r7, lr}
 800059c:	b082      	sub	sp, #8
 800059e:	af00      	add	r7, sp, #0
	// formats the string
	va_list aptr;
	va_start(aptr, format);
 80005a0:	f107 0314 	add.w	r3, r7, #20
 80005a4:	603b      	str	r3, [r7, #0]
	int ret = vsprintf(BUFFER, format, aptr);
 80005a6:	683a      	ldr	r2, [r7, #0]
 80005a8:	6939      	ldr	r1, [r7, #16]
 80005aa:	4809      	ldr	r0, [pc, #36]	@ (80005d0 <printf+0x38>)
 80005ac:	f007 f902 	bl	80077b4 <vsiprintf>
 80005b0:	6078      	str	r0, [r7, #4]
	va_end(aptr);

	// writes to output
	HAL_UART_Transmit(&huart2, (unsigned char *) BUFFER, ret, 100);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	b29a      	uxth	r2, r3
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	4905      	ldr	r1, [pc, #20]	@ (80005d0 <printf+0x38>)
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <printf+0x3c>)
 80005bc:	f002 ff86 	bl	80034cc <HAL_UART_Transmit>

	// return string length
	return(ret);
 80005c0:	687b      	ldr	r3, [r7, #4]
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3708      	adds	r7, #8
 80005c6:	46bd      	mov	sp, r7
 80005c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005cc:	b004      	add	sp, #16
 80005ce:	4770      	bx	lr
 80005d0:	20000104 	.word	0x20000104
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <MX_USART2_UART_Init+0x5c>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 800061c:	f002 ff08 	bl	8003430 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 fab6 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000007c 	.word	0x2000007c
 8000634:	40004400 	.word	0x40004400

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063c:	f000 fce2 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000640:	f000 f848 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 f8c2 	bl	80007cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000648:	f7ff ffc6 	bl	80005d8 <MX_USART2_UART_Init>
  MX_RNG_Init();
 800064c:	f000 f8aa 	bl	80007a4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000650:	f004 f84e 	bl	80046f0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  CustomerQueue = xQueueCreate(100, sizeof(uint32_t));
 8000654:	2200      	movs	r2, #0
 8000656:	2104      	movs	r1, #4
 8000658:	2064      	movs	r0, #100	@ 0x64
 800065a:	f004 faf4 	bl	8004c46 <xQueueGenericCreate>
 800065e:	4603      	mov	r3, r0
 8000660:	4a14      	ldr	r2, [pc, #80]	@ (80006b4 <main+0x7c>)
 8000662:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  CustomerMutex = xSemaphoreCreateMutex();
 8000664:	2001      	movs	r0, #1
 8000666:	f004 fb66 	bl	8004d36 <xQueueCreateMutex>
 800066a:	4603      	mov	r3, r0
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <main+0x80>)
 800066e:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  attr.stack_size = 1000;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <main+0x84>)
 8000672:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000676:	615a      	str	r2, [r3, #20]
  osThreadNew(TellerTask, (void *) 0, &attr);
 8000678:	4a10      	ldr	r2, [pc, #64]	@ (80006bc <main+0x84>)
 800067a:	2100      	movs	r1, #0
 800067c:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <main+0x88>)
 800067e:	f004 f881 	bl	8004784 <osThreadNew>
  osThreadNew(TellerTask, (void *) 1, &attr);
 8000682:	4a0e      	ldr	r2, [pc, #56]	@ (80006bc <main+0x84>)
 8000684:	2101      	movs	r1, #1
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <main+0x88>)
 8000688:	f004 f87c 	bl	8004784 <osThreadNew>
  osThreadNew(TellerTask, (void *) 2, &attr);
 800068c:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <main+0x84>)
 800068e:	2102      	movs	r1, #2
 8000690:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <main+0x88>)
 8000692:	f004 f877 	bl	8004784 <osThreadNew>
  osThreadNew(QueueTask, "Queue", &attr);
 8000696:	4a09      	ldr	r2, [pc, #36]	@ (80006bc <main+0x84>)
 8000698:	490a      	ldr	r1, [pc, #40]	@ (80006c4 <main+0x8c>)
 800069a:	480b      	ldr	r0, [pc, #44]	@ (80006c8 <main+0x90>)
 800069c:	f004 f872 	bl	8004784 <osThreadNew>
  osThreadNew(DisplayTask, "Display", &attr);
 80006a0:	4a06      	ldr	r2, [pc, #24]	@ (80006bc <main+0x84>)
 80006a2:	490a      	ldr	r1, [pc, #40]	@ (80006cc <main+0x94>)
 80006a4:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <main+0x98>)
 80006a6:	f004 f86d 	bl	8004784 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006aa:	f004 f845 	bl	8004738 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ae:	bf00      	nop
 80006b0:	e7fd      	b.n	80006ae <main+0x76>
 80006b2:	bf00      	nop
 80006b4:	20000178 	.word	0x20000178
 80006b8:	2000017c 	.word	0x2000017c
 80006bc:	20000184 	.word	0x20000184
 80006c0:	08000939 	.word	0x08000939
 80006c4:	080081a4 	.word	0x080081a4
 80006c8:	08000a19 	.word	0x08000a19
 80006cc:	080081ac 	.word	0x080081ac
 80006d0:	08000a7d 	.word	0x08000a7d

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b096      	sub	sp, #88	@ 0x58
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	2244      	movs	r2, #68	@ 0x44
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f007 f870 	bl	80077c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006f6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006fa:	f001 f829 	bl	8001750 <HAL_PWREx_ControlVoltageScaling>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000704:	f000 fa47 	bl	8000b96 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000708:	f001 f804 	bl	8001714 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800070c:	4b24      	ldr	r3, [pc, #144]	@ (80007a0 <SystemClock_Config+0xcc>)
 800070e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000712:	4a23      	ldr	r2, [pc, #140]	@ (80007a0 <SystemClock_Config+0xcc>)
 8000714:	f023 0318 	bic.w	r3, r3, #24
 8000718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800071c:	2316      	movs	r3, #22
 800071e:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000720:	2301      	movs	r3, #1
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000728:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072a:	2310      	movs	r3, #16
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800072e:	2301      	movs	r3, #1
 8000730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000736:	2360      	movs	r3, #96	@ 0x60
 8000738:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800073e:	2302      	movs	r3, #2
 8000740:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000746:	230a      	movs	r3, #10
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000752:	2302      	movs	r3, #2
 8000754:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f84e 	bl	80017fc <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 fa16 	bl	8000b96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2303      	movs	r3, #3
 8000770:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	2104      	movs	r1, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fc16 	bl	8001fb4 <HAL_RCC_ClockConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800078e:	f000 fa02 	bl	8000b96 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000792:	f002 f94f 	bl	8002a34 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000796:	bf00      	nop
 8000798:	3758      	adds	r7, #88	@ 0x58
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80007a8:	4b06      	ldr	r3, [pc, #24]	@ (80007c4 <MX_RNG_Init+0x20>)
 80007aa:	4a07      	ldr	r2, [pc, #28]	@ (80007c8 <MX_RNG_Init+0x24>)
 80007ac:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_RNG_Init+0x20>)
 80007b0:	f002 fb22 	bl	8002df8 <HAL_RNG_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80007ba:	f000 f9ec 	bl	8000b96 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000168 	.word	0x20000168
 80007c8:	50060800 	.word	0x50060800

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	@ 0x28
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000914 <MX_GPIO_Init+0x148>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a4b      	ldr	r2, [pc, #300]	@ (8000914 <MX_GPIO_Init+0x148>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b49      	ldr	r3, [pc, #292]	@ (8000914 <MX_GPIO_Init+0x148>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b46      	ldr	r3, [pc, #280]	@ (8000914 <MX_GPIO_Init+0x148>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a45      	ldr	r2, [pc, #276]	@ (8000914 <MX_GPIO_Init+0x148>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b43      	ldr	r3, [pc, #268]	@ (8000914 <MX_GPIO_Init+0x148>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b40      	ldr	r3, [pc, #256]	@ (8000914 <MX_GPIO_Init+0x148>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a3f      	ldr	r2, [pc, #252]	@ (8000914 <MX_GPIO_Init+0x148>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b3d      	ldr	r3, [pc, #244]	@ (8000914 <MX_GPIO_Init+0x148>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b3a      	ldr	r3, [pc, #232]	@ (8000914 <MX_GPIO_Init+0x148>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a39      	ldr	r2, [pc, #228]	@ (8000914 <MX_GPIO_Init+0x148>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b37      	ldr	r3, [pc, #220]	@ (8000914 <MX_GPIO_Init+0x148>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084a:	f000 ff27 	bl	800169c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000854:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	482c      	ldr	r0, [pc, #176]	@ (8000918 <MX_GPIO_Init+0x14c>)
 8000866:	f000 fd6f 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800086a:	2320      	movs	r3, #32
 800086c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4619      	mov	r1, r3
 8000880:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000884:	f000 fd60 	bl	8001348 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  GPIO_InitStruct.Pin = S1_Pin;
 8000888:	2302      	movs	r3, #2
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000892:	2302      	movs	r3, #2
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008a0:	f000 fd52 	bl	8001348 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2105      	movs	r1, #5
 80008a8:	2007      	movs	r0, #7
 80008aa:	f000 fca3 	bl	80011f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008ae:	2007      	movs	r0, #7
 80008b0:	f000 fcbc 	bl	800122c <HAL_NVIC_EnableIRQ>

  GPIO_InitStruct.Pin = S2_Pin;
 80008b4:	2310      	movs	r3, #16
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008b8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008be:	2302      	movs	r3, #2
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008cc:	f000 fd3c 	bl	8001348 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2105      	movs	r1, #5
 80008d4:	200a      	movs	r0, #10
 80008d6:	f000 fc8d 	bl	80011f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008da:	200a      	movs	r0, #10
 80008dc:	f000 fca6 	bl	800122c <HAL_NVIC_EnableIRQ>

  GPIO_InitStruct.Pin = S3_Pin;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ea:	2302      	movs	r3, #2
 80008ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4619      	mov	r1, r3
 80008f4:	4809      	ldr	r0, [pc, #36]	@ (800091c <MX_GPIO_Init+0x150>)
 80008f6:	f000 fd27 	bl	8001348 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2105      	movs	r1, #5
 80008fe:	2006      	movs	r0, #6
 8000900:	f000 fc78 	bl	80011f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000904:	2006      	movs	r0, #6
 8000906:	f000 fc91 	bl	800122c <HAL_NVIC_EnableIRQ>
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3728      	adds	r7, #40	@ 0x28
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40021000 	.word	0x40021000
 8000918:	48000800 	.word	0x48000800
 800091c:	48000400 	.word	0x48000400

08000920 <generate_random_number>:

/* USER CODE BEGIN 4 */

uint32_t generate_random_number()
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	return RNG->DR;
 8000924:	4b03      	ldr	r3, [pc, #12]	@ (8000934 <generate_random_number+0x14>)
 8000926:	689b      	ldr	r3, [r3, #8]
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	50060800 	.word	0x50060800

08000938 <TellerTask>:

void TellerTask (void *params)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	uint8_t teller_id = (intptr_t) params;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	75fb      	strb	r3, [r7, #23]
	uint32_t customer = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60fb      	str	r3, [r7, #12]
	uint32_t rnd;

	while (1)
	{
		// if teller on break, go on break!
		if (teller_states[teller_id] == 2)
 8000948:	7dfb      	ldrb	r3, [r7, #23]
 800094a:	4a2e      	ldr	r2, [pc, #184]	@ (8000a04 <TellerTask+0xcc>)
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	2b02      	cmp	r3, #2
 8000950:	d107      	bne.n	8000962 <TellerTask+0x2a>
		{
			vTaskDelay(pdMS_TO_TICKS(SIM_MINUTE_TO_MILIS * 15));
 8000952:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000956:	f005 f8dd 	bl	8005b14 <vTaskDelay>
			teller_states[teller_id] = 0;
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <TellerTask+0xcc>)
 800095e:	2100      	movs	r1, #0
 8000960:	54d1      	strb	r1, [r2, r3]
		}

		// take customer but, if none wait a minute
		xSemaphoreTake(CustomerMutex, portMAX_DELAY);
 8000962:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <TellerTask+0xd0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f04f 31ff 	mov.w	r1, #4294967295
 800096a:	4618      	mov	r0, r3
 800096c:	f004 fc7e 	bl	800526c <xQueueSemaphoreTake>
		if (xQueueReceive(CustomerQueue, &customer, portMAX_DELAY) == pdTRUE)
 8000970:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <TellerTask+0xd4>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f107 010c 	add.w	r1, r7, #12
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	4618      	mov	r0, r3
 800097e:	f004 fb93 	bl	80050a8 <xQueueReceive>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d132      	bne.n	80009ee <TellerTask+0xb6>
		{
			rnd = generate_random_number() % 16; // 30 secs to 8 mins, 30 sec intervals
 8000988:	f7ff ffca 	bl	8000920 <generate_random_number>
 800098c:	4603      	mov	r3, r0
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	613b      	str	r3, [r7, #16]
			xSemaphoreGive(CustomerMutex);
 8000994:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <TellerTask+0xd0>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	2300      	movs	r3, #0
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	f004 f9e3 	bl	8004d68 <xQueueGenericSend>
			queue_count--;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <TellerTask+0xd8>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <TellerTask+0xd8>)
 80009ac:	801a      	strh	r2, [r3, #0]
			// if the teller is meant to be on break, wait to finish the current task
			if (teller_states[teller_id] != 2)
 80009ae:	7dfb      	ldrb	r3, [r7, #23]
 80009b0:	4a14      	ldr	r2, [pc, #80]	@ (8000a04 <TellerTask+0xcc>)
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d003      	beq.n	80009c0 <TellerTask+0x88>
				teller_states[teller_id] = 1;
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
 80009ba:	4a12      	ldr	r2, [pc, #72]	@ (8000a04 <TellerTask+0xcc>)
 80009bc:	2101      	movs	r1, #1
 80009be:	54d1      	strb	r1, [r2, r3]

			// 30 sec intervals
			vTaskDelay(pdMS_TO_TICKS((SIM_MINUTE_TO_MILIS / 2) * (rnd + 1)));
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	3301      	adds	r3, #1
 80009c4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80009c8:	fb02 f303 	mul.w	r3, r2, r3
 80009cc:	4a11      	ldr	r2, [pc, #68]	@ (8000a14 <TellerTask+0xdc>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	099b      	lsrs	r3, r3, #6
 80009d4:	4618      	mov	r0, r3
 80009d6:	f005 f89d 	bl	8005b14 <vTaskDelay>

			// reset the teller state as long as they aren't meant to be on break
			if (teller_states[teller_id] != 2)
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <TellerTask+0xcc>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d0b1      	beq.n	8000948 <TellerTask+0x10>
				teller_states[teller_id] = 0;
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <TellerTask+0xcc>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	54d1      	strb	r1, [r2, r3]
 80009ec:	e7ac      	b.n	8000948 <TellerTask+0x10>
		}
		else
		{
			xSemaphoreGive(CustomerMutex);
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <TellerTask+0xd0>)
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	2300      	movs	r3, #0
 80009f4:	2200      	movs	r2, #0
 80009f6:	2100      	movs	r1, #0
 80009f8:	f004 f9b6 	bl	8004d68 <xQueueGenericSend>
			vTaskDelay(pdMS_TO_TICKS(SIM_MINUTE_TO_MILIS));
 80009fc:	2064      	movs	r0, #100	@ 0x64
 80009fe:	f005 f889 	bl	8005b14 <vTaskDelay>
		if (teller_states[teller_id] == 2)
 8000a02:	e7a1      	b.n	8000948 <TellerTask+0x10>
 8000a04:	200001a8 	.word	0x200001a8
 8000a08:	2000017c 	.word	0x2000017c
 8000a0c:	20000178 	.word	0x20000178
 8000a10:	20000180 	.word	0x20000180
 8000a14:	10624dd3 	.word	0x10624dd3

08000a18 <QueueTask>:
		}
	}
}

void QueueTask (void *params)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	uint32_t rnd;

	for (;;)
	{
		// determine how long to wait to add next customer
		rnd = generate_random_number() % 4;
 8000a20:	f7ff ff7e 	bl	8000920 <generate_random_number>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	60fb      	str	r3, [r7, #12]
		xDelay = pdMS_TO_TICKS(SIM_MINUTE_TO_MILIS  * (rnd + 1));
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <QueueTask+0x54>)
 8000a32:	fb02 f303 	mul.w	r3, r2, r3
 8000a36:	4a0e      	ldr	r2, [pc, #56]	@ (8000a70 <QueueTask+0x58>)
 8000a38:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3c:	099b      	lsrs	r3, r3, #6
 8000a3e:	60bb      	str	r3, [r7, #8]
//		xDelay = pdMS_TO_TICKS(1000);

		// attempt to add customer
		if (xQueueSend(CustomerQueue, (void *) 1, portMAX_DELAY) == pdPASS)
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <QueueTask+0x5c>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	2300      	movs	r3, #0
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f004 f98c 	bl	8004d68 <xQueueGenericSend>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d105      	bne.n	8000a62 <QueueTask+0x4a>
		{
			queue_count++;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <QueueTask+0x60>)
 8000a58:	881b      	ldrh	r3, [r3, #0]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <QueueTask+0x60>)
 8000a60:	801a      	strh	r2, [r3, #0]
		}
		vTaskDelay(xDelay);
 8000a62:	68b8      	ldr	r0, [r7, #8]
 8000a64:	f005 f856 	bl	8005b14 <vTaskDelay>
		rnd = generate_random_number() % 4;
 8000a68:	e7da      	b.n	8000a20 <QueueTask+0x8>
 8000a6a:	bf00      	nop
 8000a6c:	000186a0 	.word	0x000186a0
 8000a70:	10624dd3 	.word	0x10624dd3
 8000a74:	20000178 	.word	0x20000178
 8000a78:	20000180 	.word	0x20000180

08000a7c <DisplayTask>:
	}
}

void DisplayTask (void *params)
{
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	b08b      	sub	sp, #44	@ 0x2c
 8000a80:	af06      	add	r7, sp, #24
 8000a82:	6078      	str	r0, [r7, #4]
	uint32_t minutes;
	uint8_t hrs;
	uint8_t mins;

	printf("\r\n");
 8000a84:	4827      	ldr	r0, [pc, #156]	@ (8000b24 <DisplayTask+0xa8>)
 8000a86:	f7ff fd6b 	bl	8000560 <puts>
	while (1)
	{
		minutes = xTaskGetTickCount() / pdMS_TO_TICKS(100);
 8000a8a:	f005 f995 	bl	8005db8 <xTaskGetTickCount>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <DisplayTask+0xac>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	095b      	lsrs	r3, r3, #5
 8000a98:	60fb      	str	r3, [r7, #12]
		mins = minutes % 60;
 8000a9a:	68f9      	ldr	r1, [r7, #12]
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <DisplayTask+0xb0>)
 8000a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8000aa2:	095a      	lsrs	r2, r3, #5
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	011b      	lsls	r3, r3, #4
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	1aca      	subs	r2, r1, r3
 8000aae:	4613      	mov	r3, r2
 8000ab0:	72fb      	strb	r3, [r7, #11]
		hrs = (((minutes / 60) + 8) % 12) + 1;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8000b2c <DisplayTask+0xb0>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	f103 0108 	add.w	r1, r3, #8
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <DisplayTask+0xb4>)
 8000ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8000ac6:	08da      	lsrs	r2, r3, #3
 8000ac8:	4613      	mov	r3, r2
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	4413      	add	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	1aca      	subs	r2, r1, r3
 8000ad2:	b2d3      	uxtb	r3, r2
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	72bb      	strb	r3, [r7, #10]

		printf("TIME: %02d:%02d\tIN QUEUE[%02d]\tTELLER STATUS? %d %d %d\tNUM BREAKS PER TELLER %02d %02d %02d\r", hrs, mins, queue_count, teller_states[0], teller_states[1], teller_states[2], teller_num_breaks[0], teller_num_breaks[1], teller_num_breaks[2]);
 8000ad8:	7ab9      	ldrb	r1, [r7, #10]
 8000ada:	7afa      	ldrb	r2, [r7, #11]
 8000adc:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <DisplayTask+0xb8>)
 8000ade:	881b      	ldrh	r3, [r3, #0]
 8000ae0:	469c      	mov	ip, r3
 8000ae2:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <DisplayTask+0xbc>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	4b13      	ldr	r3, [pc, #76]	@ (8000b38 <DisplayTask+0xbc>)
 8000aea:	785b      	ldrb	r3, [r3, #1]
 8000aec:	461c      	mov	r4, r3
 8000aee:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <DisplayTask+0xbc>)
 8000af0:	789b      	ldrb	r3, [r3, #2]
 8000af2:	461d      	mov	r5, r3
 8000af4:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <DisplayTask+0xc0>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	461e      	mov	r6, r3
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <DisplayTask+0xc0>)
 8000afc:	785b      	ldrb	r3, [r3, #1]
 8000afe:	603b      	str	r3, [r7, #0]
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <DisplayTask+0xc0>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	9305      	str	r3, [sp, #20]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	9304      	str	r3, [sp, #16]
 8000b0a:	9603      	str	r6, [sp, #12]
 8000b0c:	9502      	str	r5, [sp, #8]
 8000b0e:	9401      	str	r4, [sp, #4]
 8000b10:	9000      	str	r0, [sp, #0]
 8000b12:	4663      	mov	r3, ip
 8000b14:	480a      	ldr	r0, [pc, #40]	@ (8000b40 <DisplayTask+0xc4>)
 8000b16:	f7ff fd3f 	bl	8000598 <printf>
		vTaskDelay(pdMS_TO_TICKS(SIM_MINUTE_TO_MILIS));
 8000b1a:	2064      	movs	r0, #100	@ 0x64
 8000b1c:	f004 fffa 	bl	8005b14 <vTaskDelay>
		minutes = xTaskGetTickCount() / pdMS_TO_TICKS(100);
 8000b20:	bf00      	nop
 8000b22:	e7b2      	b.n	8000a8a <DisplayTask+0xe>
 8000b24:	080081b4 	.word	0x080081b4
 8000b28:	51eb851f 	.word	0x51eb851f
 8000b2c:	88888889 	.word	0x88888889
 8000b30:	aaaaaaab 	.word	0xaaaaaaab
 8000b34:	20000180 	.word	0x20000180
 8000b38:	200001a8 	.word	0x200001a8
 8000b3c:	200001ac 	.word	0x200001ac
 8000b40:	080081b8 	.word	0x080081b8

08000b44 <put_teller_on_break>:
	}
}

void put_teller_on_break (uint8_t teller_id)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	teller_states[teller_id] = 2;
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <put_teller_on_break+0x2c>)
 8000b52:	2102      	movs	r1, #2
 8000b54:	54d1      	strb	r1, [r2, r3]
	teller_num_breaks[teller_id]++;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <put_teller_on_break+0x30>)
 8000b5a:	5cd2      	ldrb	r2, [r2, r3]
 8000b5c:	3201      	adds	r2, #1
 8000b5e:	b2d1      	uxtb	r1, r2
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <put_teller_on_break+0x30>)
 8000b62:	54d1      	strb	r1, [r2, r3]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	200001a8 	.word	0x200001a8
 8000b74:	200001ac 	.word	0x200001ac

08000b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8a:	f000 fa5b 	bl	8001044 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9a:	b672      	cpsid	i
}
 8000b9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9e:	bf00      	nop
 8000ba0:	e7fd      	b.n	8000b9e <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bae:	4a10      	ldr	r2, [pc, #64]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bce:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <HAL_MspInit+0x4c>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd6:	603b      	str	r3, [r7, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	210f      	movs	r1, #15
 8000bde:	f06f 0001 	mvn.w	r0, #1
 8000be2:	f000 fb07 	bl	80011f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b0a6      	sub	sp, #152	@ 0x98
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	2288      	movs	r2, #136	@ 0x88
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f006 fddf 	bl	80077c8 <memset>
  if(hrng->Instance==RNG)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a12      	ldr	r2, [pc, #72]	@ (8000c58 <HAL_RNG_MspInit+0x64>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d11c      	bne.n	8000c4e <HAL_RNG_MspInit+0x5a>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000c14:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000c18:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8000c1a:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 8000c1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fc1a 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_RNG_MspInit+0x42>
    {
      Error_Handler();
 8000c32:	f7ff ffb0 	bl	8000b96 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_RNG_MspInit+0x68>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_RNG_MspInit+0x68>)
 8000c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_RNG_MspInit+0x68>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000c4e:	bf00      	nop
 8000c50:	3798      	adds	r7, #152	@ 0x98
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	50060800 	.word	0x50060800
 8000c5c:	40021000 	.word	0x40021000

08000c60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b0ac      	sub	sp, #176	@ 0xb0
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2288      	movs	r2, #136	@ 0x88
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4618      	mov	r0, r3
 8000c82:	f006 fda1 	bl	80077c8 <memset>
  if(huart->Instance==USART2)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a25      	ldr	r2, [pc, #148]	@ (8000d20 <HAL_UART_MspInit+0xc0>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d143      	bne.n	8000d18 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c90:	2302      	movs	r3, #2
 8000c92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f001 fbdf 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ca8:	f7ff ff75 	bl	8000b96 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cac:	4b1d      	ldr	r3, [pc, #116]	@ (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cb0:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc0:	613b      	str	r3, [r7, #16]
 8000cc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc4:	4b17      	ldr	r3, [pc, #92]	@ (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cd0:	4b14      	ldr	r3, [pc, #80]	@ (8000d24 <HAL_UART_MspInit+0xc4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cdc:	230c      	movs	r3, #12
 8000cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d04:	f000 fb20 	bl	8001348 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2105      	movs	r1, #5
 8000d0c:	2026      	movs	r0, #38	@ 0x26
 8000d0e:	f000 fa71 	bl	80011f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d12:	2026      	movs	r0, #38	@ 0x26
 8000d14:	f000 fa8a 	bl	800122c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d18:	bf00      	nop
 8000d1a:	37b0      	adds	r7, #176	@ 0xb0
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40004400 	.word	0x40004400
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	@ 0x38
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	4b34      	ldr	r3, [pc, #208]	@ (8000e08 <HAL_InitTick+0xe0>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	4a33      	ldr	r2, [pc, #204]	@ (8000e08 <HAL_InitTick+0xe0>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d42:	4b31      	ldr	r3, [pc, #196]	@ (8000e08 <HAL_InitTick+0xe0>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d4e:	f107 0210 	add.w	r2, r7, #16
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 faef 	bl	800233c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d5e:	6a3b      	ldr	r3, [r7, #32]
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d103      	bne.n	8000d70 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d68:	f001 fabc 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8000d6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d6e:	e004      	b.n	8000d7a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d70:	f001 fab8 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8000d74:	4603      	mov	r3, r0
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7c:	4a23      	ldr	r2, [pc, #140]	@ (8000e0c <HAL_InitTick+0xe4>)
 8000d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d82:	0c9b      	lsrs	r3, r3, #18
 8000d84:	3b01      	subs	r3, #1
 8000d86:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000d88:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <HAL_InitTick+0xe8>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <HAL_InitTick+0xe8>)
 8000d92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d96:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d98:	4a1d      	ldr	r2, [pc, #116]	@ (8000e10 <HAL_InitTick+0xe8>)
 8000d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d9c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <HAL_InitTick+0xe8>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <HAL_InitTick+0xe8>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <HAL_InitTick+0xe8>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000db0:	4817      	ldr	r0, [pc, #92]	@ (8000e10 <HAL_InitTick+0xe8>)
 8000db2:	f002 f878 	bl	8002ea6 <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000dbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d11b      	bne.n	8000dfc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000dc4:	4812      	ldr	r0, [pc, #72]	@ (8000e10 <HAL_InitTick+0xe8>)
 8000dc6:	f002 f8cf 	bl	8002f68 <HAL_TIM_Base_Start_IT>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d111      	bne.n	8000dfc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dd8:	201c      	movs	r0, #28
 8000dda:	f000 fa27 	bl	800122c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b0f      	cmp	r3, #15
 8000de2:	d808      	bhi.n	8000df6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000de4:	2200      	movs	r2, #0
 8000de6:	6879      	ldr	r1, [r7, #4]
 8000de8:	201c      	movs	r0, #28
 8000dea:	f000 fa03 	bl	80011f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dee:	4a09      	ldr	r2, [pc, #36]	@ (8000e14 <HAL_InitTick+0xec>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e002      	b.n	8000dfc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3738      	adds	r7, #56	@ 0x38
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	431bde83 	.word	0x431bde83
 8000e10:	200001b0 	.word	0x200001b0
 8000e14:	20000004 	.word	0x20000004

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <TIM2_IRQHandler+0x10>)
 8000e56:	f002 f8f7 	bl	8003048 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200001b0 	.word	0x200001b0

08000e64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <USART2_IRQHandler+0x10>)
 8000e6a:	f002 fbb9 	bl	80035e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000007c 	.word	0x2000007c

08000e78 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
  static uint32_t last_click_tic = 0;
  // convert to num of ms that has passed
  uint32_t cur_tick = xTaskGetTickCount() / pdMS_TO_TICKS(1);
 8000e7e:	f004 ff9b 	bl	8005db8 <xTaskGetTickCount>
 8000e82:	6078      	str	r0, [r7, #4]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f000 fc21 	bl	80016cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  // debounce
  // if its been more than 10 ms, continue!
  if (cur_tick - last_click_tic > 200)
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <EXTI1_IRQHandler+0x34>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2bc8      	cmp	r3, #200	@ 0xc8
 8000e94:	d902      	bls.n	8000e9c <EXTI1_IRQHandler+0x24>
	  put_teller_on_break(0);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fe54 	bl	8000b44 <put_teller_on_break>

  // set the last_click val
  last_click_tic = cur_tick;
 8000e9c:	4a03      	ldr	r2, [pc, #12]	@ (8000eac <EXTI1_IRQHandler+0x34>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200001fc 	.word	0x200001fc

08000eb0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  static uint32_t last_click_tic = 0;
  // convert to num of ms that has passed
  uint32_t cur_tick = xTaskGetTickCount() / pdMS_TO_TICKS(1);
 8000eb6:	f004 ff7f 	bl	8005db8 <xTaskGetTickCount>
 8000eba:	6078      	str	r0, [r7, #4]


  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000ebc:	2010      	movs	r0, #16
 8000ebe:	f000 fc05 	bl	80016cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  // debounce
  // if its been more than 10 ms, continue!
  if (cur_tick - last_click_tic > 200)
 8000ec2:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <EXTI4_IRQHandler+0x34>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2bc8      	cmp	r3, #200	@ 0xc8
 8000ecc:	d902      	bls.n	8000ed4 <EXTI4_IRQHandler+0x24>
	  put_teller_on_break(1);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff fe38 	bl	8000b44 <put_teller_on_break>

  // set the last_click val
  last_click_tic = cur_tick;
 8000ed4:	4a03      	ldr	r2, [pc, #12]	@ (8000ee4 <EXTI4_IRQHandler+0x34>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000200 	.word	0x20000200

08000ee8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  static uint32_t last_click_tic = 0;
  // convert to num of ms that has passed
  uint32_t cur_tick = xTaskGetTickCount() / pdMS_TO_TICKS(1);
 8000eee:	f004 ff63 	bl	8005db8 <xTaskGetTickCount>
 8000ef2:	6078      	str	r0, [r7, #4]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f000 fbe9 	bl	80016cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  // debounce
  // if its been more than 10 ms, continue!
  if (cur_tick - last_click_tic > 200)
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <EXTI0_IRQHandler+0x34>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2bc8      	cmp	r3, #200	@ 0xc8
 8000f04:	d902      	bls.n	8000f0c <EXTI0_IRQHandler+0x24>
	  put_teller_on_break(2);
 8000f06:	2002      	movs	r0, #2
 8000f08:	f7ff fe1c 	bl	8000b44 <put_teller_on_break>

  // set the last_click val
  last_click_tic = cur_tick;
 8000f0c:	4a03      	ldr	r2, [pc, #12]	@ (8000f1c <EXTI0_IRQHandler+0x34>)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000204 	.word	0x20000204

08000f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f28:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <_sbrk+0x5c>)
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <_sbrk+0x60>)
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f34:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d102      	bne.n	8000f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	@ (8000f84 <_sbrk+0x64>)
 8000f3e:	4a12      	ldr	r2, [pc, #72]	@ (8000f88 <_sbrk+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <_sbrk+0x64>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4413      	add	r3, r2
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d207      	bcs.n	8000f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f50:	f006 fc98 	bl	8007884 <__errno>
 8000f54:	4603      	mov	r3, r0
 8000f56:	220c      	movs	r2, #12
 8000f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5e:	e009      	b.n	8000f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <_sbrk+0x64>)
 8000f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f72:	68fb      	ldr	r3, [r7, #12]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20018000 	.word	0x20018000
 8000f80:	00000400 	.word	0x00000400
 8000f84:	20000208 	.word	0x20000208
 8000f88:	20005f60 	.word	0x20005f60

08000f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f90:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <SystemInit+0x20>)
 8000f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <SystemInit+0x20>)
 8000f98:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fe8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fb4:	f7ff ffea 	bl	8000f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopForever+0x6>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopForever+0xe>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopForever+0x16>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f006 fc57 	bl	8007890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fe2:	f7ff fb29 	bl	8000638 <main>

08000fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe6:	e7fe      	b.n	8000fe6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fe8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ff4:	080082bc 	.word	0x080082bc
  ldr r2, =_sbss
 8000ff8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ffc:	20005f60 	.word	0x20005f60

08001000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC1_2_IRQHandler>
	...

08001004 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800100a:	2300      	movs	r3, #0
 800100c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <HAL_Init+0x3c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a0b      	ldr	r2, [pc, #44]	@ (8001040 <HAL_Init+0x3c>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001018:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 f8df 	bl	80011de <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001020:	200f      	movs	r0, #15
 8001022:	f7ff fe81 	bl	8000d28 <HAL_InitTick>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	e001      	b.n	8001036 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001032:	f7ff fdb7 	bl	8000ba4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001036:	79fb      	ldrb	r3, [r7, #7]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40022000 	.word	0x40022000

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	2000020c 	.word	0x2000020c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000020c 	.word	0x2000020c

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4907      	ldr	r1, [pc, #28]	@ (8001120 <__NVIC_EnableIRQ+0x38>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	@ (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	@ (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	@ 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	@ 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff4c 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001206:	f7ff ff61 	bl	80010cc <__NVIC_GetPriorityGrouping>
 800120a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	6978      	ldr	r0, [r7, #20]
 8001212:	f7ff ffb1 	bl	8001178 <NVIC_EncodePriority>
 8001216:	4602      	mov	r2, r0
 8001218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff80 	bl	8001124 <__NVIC_SetPriority>
}
 8001224:	bf00      	nop
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff54 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d008      	beq.n	8001272 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2204      	movs	r2, #4
 8001264:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e022      	b.n	80012b8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f022 020e 	bic.w	r2, r2, #14
 8001280:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f022 0201 	bic.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001296:	f003 021c 	and.w	r2, r3, #28
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d005      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2204      	movs	r2, #4
 80012e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e029      	b.n	800133c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 020e 	bic.w	r2, r2, #14
 80012f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130c:	f003 021c 	and.w	r2, r3, #28
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	4798      	blx	r3
    }
  }
  return status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b087      	sub	sp, #28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001356:	e17f      	b.n	8001658 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8171 	beq.w	8001652 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d005      	beq.n	8001388 <HAL_GPIO_Init+0x40>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d130      	bne.n	80013ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	2203      	movs	r2, #3
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013be:	2201      	movs	r2, #1
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	f003 0201 	and.w	r2, r3, #1
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d118      	bne.n	8001428 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013fc:	2201      	movs	r2, #1
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	08db      	lsrs	r3, r3, #3
 8001412:	f003 0201 	and.w	r2, r3, #1
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b03      	cmp	r3, #3
 8001432:	d017      	beq.n	8001464 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d123      	bne.n	80014b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f003 0203 	and.w	r2, r3, #3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80ac 	beq.w	8001652 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001678 <HAL_GPIO_Init+0x330>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001678 <HAL_GPIO_Init+0x330>)
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	6613      	str	r3, [r2, #96]	@ 0x60
 8001506:	4b5c      	ldr	r3, [pc, #368]	@ (8001678 <HAL_GPIO_Init+0x330>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	60bb      	str	r3, [r7, #8]
 8001510:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001512:	4a5a      	ldr	r2, [pc, #360]	@ (800167c <HAL_GPIO_Init+0x334>)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	089b      	lsrs	r3, r3, #2
 8001518:	3302      	adds	r3, #2
 800151a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800153c:	d025      	beq.n	800158a <HAL_GPIO_Init+0x242>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a4f      	ldr	r2, [pc, #316]	@ (8001680 <HAL_GPIO_Init+0x338>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d01f      	beq.n	8001586 <HAL_GPIO_Init+0x23e>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a4e      	ldr	r2, [pc, #312]	@ (8001684 <HAL_GPIO_Init+0x33c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d019      	beq.n	8001582 <HAL_GPIO_Init+0x23a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a4d      	ldr	r2, [pc, #308]	@ (8001688 <HAL_GPIO_Init+0x340>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d013      	beq.n	800157e <HAL_GPIO_Init+0x236>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4c      	ldr	r2, [pc, #304]	@ (800168c <HAL_GPIO_Init+0x344>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00d      	beq.n	800157a <HAL_GPIO_Init+0x232>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4b      	ldr	r2, [pc, #300]	@ (8001690 <HAL_GPIO_Init+0x348>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d007      	beq.n	8001576 <HAL_GPIO_Init+0x22e>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4a      	ldr	r2, [pc, #296]	@ (8001694 <HAL_GPIO_Init+0x34c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_GPIO_Init+0x22a>
 800156e:	2306      	movs	r3, #6
 8001570:	e00c      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001572:	2307      	movs	r3, #7
 8001574:	e00a      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001576:	2305      	movs	r3, #5
 8001578:	e008      	b.n	800158c <HAL_GPIO_Init+0x244>
 800157a:	2304      	movs	r3, #4
 800157c:	e006      	b.n	800158c <HAL_GPIO_Init+0x244>
 800157e:	2303      	movs	r3, #3
 8001580:	e004      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001582:	2302      	movs	r3, #2
 8001584:	e002      	b.n	800158c <HAL_GPIO_Init+0x244>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_GPIO_Init+0x244>
 800158a:	2300      	movs	r3, #0
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	f002 0203 	and.w	r2, r2, #3
 8001592:	0092      	lsls	r2, r2, #2
 8001594:	4093      	lsls	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800159c:	4937      	ldr	r1, [pc, #220]	@ (800167c <HAL_GPIO_Init+0x334>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001698 <HAL_GPIO_Init+0x350>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ce:	4a32      	ldr	r2, [pc, #200]	@ (8001698 <HAL_GPIO_Init+0x350>)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015d4:	4b30      	ldr	r3, [pc, #192]	@ (8001698 <HAL_GPIO_Init+0x350>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015f8:	4a27      	ldr	r2, [pc, #156]	@ (8001698 <HAL_GPIO_Init+0x350>)
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015fe:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <HAL_GPIO_Init+0x350>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43db      	mvns	r3, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001622:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <HAL_GPIO_Init+0x350>)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <HAL_GPIO_Init+0x350>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800164c:	4a12      	ldr	r2, [pc, #72]	@ (8001698 <HAL_GPIO_Init+0x350>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa22 f303 	lsr.w	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	f47f ae78 	bne.w	8001358 <HAL_GPIO_Init+0x10>
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	48001000 	.word	0x48001000
 8001690:	48001400 	.word	0x48001400
 8001694:	48001800 	.word	0x48001800
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
 80016a8:	4613      	mov	r3, r2
 80016aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ac:	787b      	ldrb	r3, [r7, #1]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b8:	e002      	b.n	80016c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016d6:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	4013      	ands	r3, r2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016e8:	88fb      	ldrh	r3, [r7, #6]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f806 	bl	80016fc <HAL_GPIO_EXTI_Callback>
  }
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800171e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40007000 	.word	0x40007000

08001734 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <HAL_PWREx_GetVoltageRange+0x18>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40007000 	.word	0x40007000

08001750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800175e:	d130      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001760:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800176c:	d038      	beq.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001776:	4a1e      	ldr	r2, [pc, #120]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001778:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800177e:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2232      	movs	r2, #50	@ 0x32
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	4a1b      	ldr	r2, [pc, #108]	@ (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001794:	e002      	b.n	800179c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b01      	subs	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179c:	4b14      	ldr	r3, [pc, #80]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017a8:	d102      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f2      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b0:	4b0f      	ldr	r3, [pc, #60]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017bc:	d110      	bne.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e00f      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ce:	d007      	beq.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d0:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017d8:	4a05      	ldr	r2, [pc, #20]	@ (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40007000 	.word	0x40007000
 80017f4:	20000000 	.word	0x20000000
 80017f8:	431bde83 	.word	0x431bde83

080017fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e3ca      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180e:	4b97      	ldr	r3, [pc, #604]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001818:	4b94      	ldr	r3, [pc, #592]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80e4 	beq.w	80019f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <HAL_RCC_OscConfig+0x4a>
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	2b0c      	cmp	r3, #12
 800183a:	f040 808b 	bne.w	8001954 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	2b01      	cmp	r3, #1
 8001842:	f040 8087 	bne.w	8001954 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001846:	4b89      	ldr	r3, [pc, #548]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_RCC_OscConfig+0x62>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e3a2      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1a      	ldr	r2, [r3, #32]
 8001862:	4b82      	ldr	r3, [pc, #520]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d004      	beq.n	8001878 <HAL_RCC_OscConfig+0x7c>
 800186e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001876:	e005      	b.n	8001884 <HAL_RCC_OscConfig+0x88>
 8001878:	4b7c      	ldr	r3, [pc, #496]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 800187a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001884:	4293      	cmp	r3, r2
 8001886:	d223      	bcs.n	80018d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fd87 	bl	80023a0 <RCC_SetFlashLatencyFromMSIRange>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e383      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189c:	4b73      	ldr	r3, [pc, #460]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a72      	ldr	r2, [pc, #456]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6013      	str	r3, [r2, #0]
 80018a8:	4b70      	ldr	r3, [pc, #448]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	496d      	ldr	r1, [pc, #436]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ba:	4b6c      	ldr	r3, [pc, #432]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	021b      	lsls	r3, r3, #8
 80018c8:	4968      	ldr	r1, [pc, #416]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
 80018ce:	e025      	b.n	800191c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d0:	4b66      	ldr	r3, [pc, #408]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a65      	ldr	r2, [pc, #404]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018d6:	f043 0308 	orr.w	r3, r3, #8
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	4b63      	ldr	r3, [pc, #396]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4960      	ldr	r1, [pc, #384]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018ea:	4313      	orrs	r3, r2
 80018ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018ee:	4b5f      	ldr	r3, [pc, #380]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	495b      	ldr	r1, [pc, #364]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4618      	mov	r0, r3
 800190e:	f000 fd47 	bl	80023a0 <RCC_SetFlashLatencyFromMSIRange>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e343      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800191c:	f000 fc4a 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8001920:	4602      	mov	r2, r0
 8001922:	4b52      	ldr	r3, [pc, #328]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	4950      	ldr	r1, [pc, #320]	@ (8001a70 <HAL_RCC_OscConfig+0x274>)
 800192e:	5ccb      	ldrb	r3, [r1, r3]
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	4a4e      	ldr	r2, [pc, #312]	@ (8001a74 <HAL_RCC_OscConfig+0x278>)
 800193a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800193c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a78 <HAL_RCC_OscConfig+0x27c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff f9f1 	bl	8000d28 <HAL_InitTick>
 8001946:	4603      	mov	r3, r0
 8001948:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d052      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	e327      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d032      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800195c:	4b43      	ldr	r3, [pc, #268]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a42      	ldr	r2, [pc, #264]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001968:	f7ff fb80 	bl	800106c <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001970:	f7ff fb7c 	bl	800106c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e310      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001982:	4b3a      	ldr	r3, [pc, #232]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198e:	4b37      	ldr	r3, [pc, #220]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a36      	ldr	r2, [pc, #216]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001994:	f043 0308 	orr.w	r3, r3, #8
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b34      	ldr	r3, [pc, #208]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4931      	ldr	r1, [pc, #196]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ac:	4b2f      	ldr	r3, [pc, #188]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	021b      	lsls	r3, r3, #8
 80019ba:	492c      	ldr	r1, [pc, #176]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
 80019c0:	e01a      	b.n	80019f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a29      	ldr	r2, [pc, #164]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019c8:	f023 0301 	bic.w	r3, r3, #1
 80019cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019ce:	f7ff fb4d 	bl	800106c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d6:	f7ff fb49 	bl	800106c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e2dd      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019e8:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x1da>
 80019f4:	e000      	b.n	80019f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d074      	beq.n	8001aee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x21a>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b0c      	cmp	r3, #12
 8001a0e:	d10e      	bne.n	8001a2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d10b      	bne.n	8001a2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d064      	beq.n	8001aec <HAL_RCC_OscConfig+0x2f0>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d160      	bne.n	8001aec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e2ba      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a36:	d106      	bne.n	8001a46 <HAL_RCC_OscConfig+0x24a>
 8001a38:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	e026      	b.n	8001a94 <HAL_RCC_OscConfig+0x298>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a4e:	d115      	bne.n	8001a7c <HAL_RCC_OscConfig+0x280>
 8001a50:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]
 8001a5c:	4b03      	ldr	r3, [pc, #12]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a02      	ldr	r2, [pc, #8]	@ (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	e014      	b.n	8001a94 <HAL_RCC_OscConfig+0x298>
 8001a6a:	bf00      	nop
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	08008230 	.word	0x08008230
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	4ba0      	ldr	r3, [pc, #640]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a9f      	ldr	r2, [pc, #636]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b9d      	ldr	r3, [pc, #628]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a9c      	ldr	r2, [pc, #624]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fae6 	bl	800106c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fae2 	bl	800106c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e276      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	4b92      	ldr	r3, [pc, #584]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2a8>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fad2 	bl	800106c <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff face 	bl	800106c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e262      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ade:	4b88      	ldr	r3, [pc, #544]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x2d0>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d060      	beq.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_OscConfig+0x310>
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d119      	bne.n	8001b3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d116      	bne.n	8001b3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0c:	4b7c      	ldr	r3, [pc, #496]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_OscConfig+0x328>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e23f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b76      	ldr	r3, [pc, #472]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	061b      	lsls	r3, r3, #24
 8001b32:	4973      	ldr	r1, [pc, #460]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	e040      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d023      	beq.n	8001b8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b42:	4b6f      	ldr	r3, [pc, #444]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6e      	ldr	r2, [pc, #440]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fa8d 	bl	800106c <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff fa89 	bl	800106c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e21d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b68:	4b65      	ldr	r3, [pc, #404]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b62      	ldr	r3, [pc, #392]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	495f      	ldr	r1, [pc, #380]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e018      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5c      	ldr	r2, [pc, #368]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa69 	bl	800106c <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa65 	bl	800106c <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1f9      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb0:	4b53      	ldr	r3, [pc, #332]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d03c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd6:	4a4a      	ldr	r2, [pc, #296]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fa44 	bl	800106c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fa40 	bl	800106c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e1d4      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfa:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ef      	beq.n	8001be8 <HAL_RCC_OscConfig+0x3ec>
 8001c08:	e01b      	b.n	8001c42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c10:	4a3b      	ldr	r2, [pc, #236]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fa27 	bl	800106c <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c22:	f7ff fa23 	bl	800106c <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1b7      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c34:	4b32      	ldr	r3, [pc, #200]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ef      	bne.n	8001c22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a6 	beq.w	8001d9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c54:	4b2a      	ldr	r3, [pc, #168]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10d      	bne.n	8001c7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c64:	4a26      	ldr	r2, [pc, #152]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c6c:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <HAL_RCC_OscConfig+0x508>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d118      	bne.n	8001cba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c88:	4b1e      	ldr	r3, [pc, #120]	@ (8001d04 <HAL_RCC_OscConfig+0x508>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d04 <HAL_RCC_OscConfig+0x508>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c94:	f7ff f9ea 	bl	800106c <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9c:	f7ff f9e6 	bl	800106c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e17a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <HAL_RCC_OscConfig+0x508>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4d8>
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cd2:	e029      	b.n	8001d28 <HAL_RCC_OscConfig+0x52c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d115      	bne.n	8001d08 <HAL_RCC_OscConfig+0x50c>
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ce2:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cf2:	4a03      	ldr	r2, [pc, #12]	@ (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x52c>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
 8001d08:	4b9c      	ldr	r3, [pc, #624]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d0e:	4a9b      	ldr	r2, [pc, #620]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001d18:	4b98      	ldr	r3, [pc, #608]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d1e:	4a97      	ldr	r2, [pc, #604]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d016      	beq.n	8001d5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff f99c 	bl	800106c <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7ff f998 	bl	800106c <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e12a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ed      	beq.n	8001d38 <HAL_RCC_OscConfig+0x53c>
 8001d5c:	e015      	b.n	8001d8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5e:	f7ff f985 	bl	800106c <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff f981 	bl	800106c <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e113      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d7c:	4b7f      	ldr	r3, [pc, #508]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ed      	bne.n	8001d66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b7a      	ldr	r3, [pc, #488]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d94:	4a79      	ldr	r2, [pc, #484]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80fe 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	f040 80d0 	bne.w	8001f50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001db0:	4b72      	ldr	r3, [pc, #456]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 0203 	and.w	r2, r3, #3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d130      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d127      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d11f      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001df0:	2a07      	cmp	r2, #7
 8001df2:	bf14      	ite	ne
 8001df4:	2201      	movne	r2, #1
 8001df6:	2200      	moveq	r2, #0
 8001df8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d113      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d109      	bne.n	8001e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	085b      	lsrs	r3, r3, #1
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d06e      	beq.n	8001f04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	2b0c      	cmp	r3, #12
 8001e2a:	d069      	beq.n	8001f00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e2c:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e38:	4b50      	ldr	r3, [pc, #320]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0ad      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e48:	4b4c      	ldr	r3, [pc, #304]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e54:	f7ff f90a 	bl	800106c <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5c:	f7ff f906 	bl	800106c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e09a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6e:	4b43      	ldr	r3, [pc, #268]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f0      	bne.n	8001e5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e7a:	4b40      	ldr	r3, [pc, #256]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	4b40      	ldr	r3, [pc, #256]	@ (8001f80 <HAL_RCC_OscConfig+0x784>)
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001e8a:	3a01      	subs	r2, #1
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	4311      	orrs	r1, r2
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001e94:	0212      	lsls	r2, r2, #8
 8001e96:	4311      	orrs	r1, r2
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e9c:	0852      	lsrs	r2, r2, #1
 8001e9e:	3a01      	subs	r2, #1
 8001ea0:	0552      	lsls	r2, r2, #21
 8001ea2:	4311      	orrs	r1, r2
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ea8:	0852      	lsrs	r2, r2, #1
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	0652      	lsls	r2, r2, #25
 8001eae:	4311      	orrs	r1, r2
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001eb4:	0912      	lsrs	r2, r2, #4
 8001eb6:	0452      	lsls	r2, r2, #17
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	4930      	ldr	r1, [pc, #192]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a2d      	ldr	r2, [pc, #180]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001ed2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ed6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ed8:	f7ff f8c8 	bl	800106c <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff f8c4 	bl	800106c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e058      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ef2:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001efe:	e050      	b.n	8001fa2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e04f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d148      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f10:	4b1a      	ldr	r3, [pc, #104]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a19      	ldr	r2, [pc, #100]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001f16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f1c:	4b17      	ldr	r3, [pc, #92]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4a16      	ldr	r2, [pc, #88]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f28:	f7ff f8a0 	bl	800106c <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff f89c 	bl	800106c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e030      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f42:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x734>
 8001f4e:	e028      	b.n	8001fa2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	2b0c      	cmp	r3, #12
 8001f54:	d023      	beq.n	8001f9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a08      	ldr	r2, [pc, #32]	@ (8001f7c <HAL_RCC_OscConfig+0x780>)
 8001f5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff f883 	bl	800106c <HAL_GetTick>
 8001f66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f68:	e00c      	b.n	8001f84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6a:	f7ff f87f 	bl	800106c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d905      	bls.n	8001f84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e013      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_RCC_OscConfig+0x7b0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ec      	bne.n	8001f6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_RCC_OscConfig+0x7b0>)
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	4905      	ldr	r1, [pc, #20]	@ (8001fac <HAL_RCC_OscConfig+0x7b0>)
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_RCC_OscConfig+0x7b4>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60cb      	str	r3, [r1, #12]
 8001f9c:	e001      	b.n	8001fa2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e000      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3720      	adds	r7, #32
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	feeefffc 	.word	0xfeeefffc

08001fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0e7      	b.n	8002198 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b75      	ldr	r3, [pc, #468]	@ (80021a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d910      	bls.n	8001ff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b72      	ldr	r3, [pc, #456]	@ (80021a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 0207 	bic.w	r2, r3, #7
 8001fde:	4970      	ldr	r1, [pc, #448]	@ (80021a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b6e      	ldr	r3, [pc, #440]	@ (80021a0 <HAL_RCC_ClockConfig+0x1ec>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0cf      	b.n	8002198 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d010      	beq.n	8002026 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	4b66      	ldr	r3, [pc, #408]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002010:	429a      	cmp	r2, r3
 8002012:	d908      	bls.n	8002026 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002014:	4b63      	ldr	r3, [pc, #396]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4960      	ldr	r1, [pc, #384]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d04c      	beq.n	80020cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b03      	cmp	r3, #3
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	4b5a      	ldr	r3, [pc, #360]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d121      	bne.n	800208a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0a6      	b.n	8002198 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b02      	cmp	r3, #2
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002052:	4b54      	ldr	r3, [pc, #336]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d115      	bne.n	800208a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e09a      	b.n	8002198 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800206a:	4b4e      	ldr	r3, [pc, #312]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e08e      	b.n	8002198 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800207a:	4b4a      	ldr	r3, [pc, #296]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e086      	b.n	8002198 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800208a:	4b46      	ldr	r3, [pc, #280]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f023 0203 	bic.w	r2, r3, #3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4943      	ldr	r1, [pc, #268]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002098:	4313      	orrs	r3, r2
 800209a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800209c:	f7fe ffe6 	bl	800106c <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7fe ffe2 	bl	800106c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e06e      	b.n	8002198 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	4b3a      	ldr	r3, [pc, #232]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 020c 	and.w	r2, r3, #12
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d1eb      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4b31      	ldr	r3, [pc, #196]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d208      	bcs.n	80020fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b2e      	ldr	r3, [pc, #184]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	492b      	ldr	r1, [pc, #172]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fa:	4b29      	ldr	r3, [pc, #164]	@ (80021a0 <HAL_RCC_ClockConfig+0x1ec>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d210      	bcs.n	800212a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002108:	4b25      	ldr	r3, [pc, #148]	@ (80021a0 <HAL_RCC_ClockConfig+0x1ec>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 0207 	bic.w	r2, r3, #7
 8002110:	4923      	ldr	r1, [pc, #140]	@ (80021a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	4313      	orrs	r3, r2
 8002116:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002118:	4b21      	ldr	r3, [pc, #132]	@ (80021a0 <HAL_RCC_ClockConfig+0x1ec>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0307 	and.w	r3, r3, #7
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e036      	b.n	8002198 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002136:	4b1b      	ldr	r3, [pc, #108]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4918      	ldr	r1, [pc, #96]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b00      	cmp	r3, #0
 8002152:	d009      	beq.n	8002168 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002154:	4b13      	ldr	r3, [pc, #76]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	4910      	ldr	r1, [pc, #64]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002164:	4313      	orrs	r3, r2
 8002166:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002168:	f000 f824 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	490b      	ldr	r1, [pc, #44]	@ (80021a8 <HAL_RCC_ClockConfig+0x1f4>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
 8002184:	4a09      	ldr	r2, [pc, #36]	@ (80021ac <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002188:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_RCC_ClockConfig+0x1fc>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7fe fdcb 	bl	8000d28 <HAL_InitTick>
 8002192:	4603      	mov	r3, r0
 8002194:	72fb      	strb	r3, [r7, #11]

  return status;
 8002196:	7afb      	ldrb	r3, [r7, #11]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40022000 	.word	0x40022000
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08008230 	.word	0x08008230
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c2:	4b3e      	ldr	r3, [pc, #248]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021cc:	4b3b      	ldr	r3, [pc, #236]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d005      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x34>
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b0c      	cmp	r3, #12
 80021e0:	d121      	bne.n	8002226 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d11e      	bne.n	8002226 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021e8:	4b34      	ldr	r3, [pc, #208]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f4:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	61fb      	str	r3, [r7, #28]
 8002202:	e005      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002204:	4b2d      	ldr	r3, [pc, #180]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002210:	4a2b      	ldr	r2, [pc, #172]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002218:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10d      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002224:	e00a      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d102      	bne.n	8002232 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800222c:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800222e:	61bb      	str	r3, [r7, #24]
 8002230:	e004      	b.n	800223c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b08      	cmp	r3, #8
 8002236:	d101      	bne.n	800223c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002238:	4b23      	ldr	r3, [pc, #140]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800223a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	2b0c      	cmp	r3, #12
 8002240:	d134      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002242:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0xa6>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2b03      	cmp	r3, #3
 8002256:	d003      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0xac>
 8002258:	e005      	b.n	8002266 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800225a:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800225c:	617b      	str	r3, [r7, #20]
      break;
 800225e:	e005      	b.n	800226c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002262:	617b      	str	r3, [r7, #20]
      break;
 8002264:	e002      	b.n	800226c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	617b      	str	r3, [r7, #20]
      break;
 800226a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800226c:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	3301      	adds	r3, #1
 8002278:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	fb03 f202 	mul.w	r2, r3, r2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	0e5b      	lsrs	r3, r3, #25
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	3301      	adds	r3, #1
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022ac:	69bb      	ldr	r3, [r7, #24]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	@ 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	08008248 	.word	0x08008248
 80022c4:	00f42400 	.word	0x00f42400
 80022c8:	007a1200 	.word	0x007a1200

080022cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d0:	4b03      	ldr	r3, [pc, #12]	@ (80022e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022e8:	f7ff fff0 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4904      	ldr	r1, [pc, #16]	@ (800230c <HAL_RCC_GetPCLK1Freq+0x28>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	08008240 	.word	0x08008240

08002310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002314:	f7ff ffda 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 8002318:	4602      	mov	r2, r0
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	0adb      	lsrs	r3, r3, #11
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	4904      	ldr	r1, [pc, #16]	@ (8002338 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002326:	5ccb      	ldrb	r3, [r1, r3]
 8002328:	f003 031f 	and.w	r3, r3, #31
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40021000 	.word	0x40021000
 8002338:	08008240 	.word	0x08008240

0800233c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	220f      	movs	r2, #15
 800234a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0203 	and.w	r2, r3, #3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002358:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCC_GetClockConfig+0x5c>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	08db      	lsrs	r3, r3, #3
 8002376:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800237e:	4b07      	ldr	r3, [pc, #28]	@ (800239c <HAL_RCC_GetClockConfig+0x60>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0207 	and.w	r2, r3, #7
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	601a      	str	r2, [r3, #0]
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40022000 	.word	0x40022000

080023a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023b8:	f7ff f9bc 	bl	8001734 <HAL_PWREx_GetVoltageRange>
 80023bc:	6178      	str	r0, [r7, #20]
 80023be:	e014      	b.n	80023ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c4:	4a24      	ldr	r2, [pc, #144]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80023cc:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023d8:	f7ff f9ac 	bl	8001734 <HAL_PWREx_GetVoltageRange>
 80023dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023de:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002458 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f0:	d10b      	bne.n	800240a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b80      	cmp	r3, #128	@ 0x80
 80023f6:	d919      	bls.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80023fc:	d902      	bls.n	8002404 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023fe:	2302      	movs	r3, #2
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	e013      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002404:	2301      	movs	r3, #1
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	e010      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b80      	cmp	r3, #128	@ 0x80
 800240e:	d902      	bls.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002410:	2303      	movs	r3, #3
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e00a      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b80      	cmp	r3, #128	@ 0x80
 800241a:	d102      	bne.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800241c:	2302      	movs	r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e004      	b.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b70      	cmp	r3, #112	@ 0x70
 8002426:	d101      	bne.n	800242c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002428:	2301      	movs	r3, #1
 800242a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f023 0207 	bic.w	r2, r3, #7
 8002434:	4909      	ldr	r1, [pc, #36]	@ (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800243c:	4b07      	ldr	r3, [pc, #28]	@ (800245c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	429a      	cmp	r2, r3
 8002448:	d001      	beq.n	800244e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	40022000 	.word	0x40022000

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002468:	2300      	movs	r3, #0
 800246a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800246c:	2300      	movs	r3, #0
 800246e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002478:	2b00      	cmp	r3, #0
 800247a:	d041      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002480:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002484:	d02a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002486:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800248a:	d824      	bhi.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800248c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002490:	d008      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002492:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002496:	d81e      	bhi.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800249c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a0:	d010      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024a2:	e018      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024a4:	4b86      	ldr	r3, [pc, #536]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4a85      	ldr	r2, [pc, #532]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024b0:	e015      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 facb 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 80024be:	4603      	mov	r3, r0
 80024c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c2:	e00c      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3320      	adds	r3, #32
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 fbb6 	bl	8002c3c <RCCEx_PLLSAI2_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024d4:	e003      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	74fb      	strb	r3, [r7, #19]
      break;
 80024da:	e000      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80024dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e4:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024f2:	4973      	ldr	r1, [pc, #460]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80024fa:	e001      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d041      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002510:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002514:	d02a      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002516:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800251a:	d824      	bhi.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800251c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002520:	d008      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002522:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002526:	d81e      	bhi.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002530:	d010      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002532:	e018      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002534:	4b62      	ldr	r3, [pc, #392]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a61      	ldr	r2, [pc, #388]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800253a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002540:	e015      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fa83 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002552:	e00c      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3320      	adds	r3, #32
 8002558:	2100      	movs	r1, #0
 800255a:	4618      	mov	r0, r3
 800255c:	f000 fb6e 	bl	8002c3c <RCCEx_PLLSAI2_Config>
 8002560:	4603      	mov	r3, r0
 8002562:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002564:	e003      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	74fb      	strb	r3, [r7, #19]
      break;
 800256a:	e000      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800256c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256e:	7cfb      	ldrb	r3, [r7, #19]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10b      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002574:	4b52      	ldr	r3, [pc, #328]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002582:	494f      	ldr	r1, [pc, #316]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800258a:	e001      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800258c:	7cfb      	ldrb	r3, [r7, #19]
 800258e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a0 	beq.w	80026de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025b2:	2300      	movs	r3, #0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b8:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025bc:	4a40      	ldr	r2, [pc, #256]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80025c4:	4b3e      	ldr	r3, [pc, #248]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d4:	4b3b      	ldr	r3, [pc, #236]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3a      	ldr	r2, [pc, #232]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fd44 	bl	800106c <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025e6:	e009      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e8:	f7fe fd40 	bl	800106c <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d902      	bls.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	74fb      	strb	r3, [r7, #19]
        break;
 80025fa:	e005      	b.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025fc:	4b31      	ldr	r3, [pc, #196]	@ (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002608:	7cfb      	ldrb	r3, [r7, #19]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d15c      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800260e:	4b2c      	ldr	r3, [pc, #176]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002618:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01f      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	d019      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800262c:	4b24      	ldr	r3, [pc, #144]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002636:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002638:	4b21      	ldr	r3, [pc, #132]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	4a20      	ldr	r2, [pc, #128]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002648:	4b1d      	ldr	r3, [pc, #116]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264e:	4a1c      	ldr	r2, [pc, #112]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002658:	4a19      	ldr	r2, [pc, #100]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fcff 	bl	800106c <HAL_GetTick>
 800266e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002670:	e00b      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fcfb 	bl	800106c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d902      	bls.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	74fb      	strb	r3, [r7, #19]
            break;
 8002688:	e006      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0ec      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10c      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800269e:	4b08      	ldr	r3, [pc, #32]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80026ae:	4904      	ldr	r1, [pc, #16]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026b6:	e009      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b8:	7cfb      	ldrb	r3, [r7, #19]
 80026ba:	74bb      	strb	r3, [r7, #18]
 80026bc:	e006      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026cc:	7c7b      	ldrb	r3, [r7, #17]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4b9e      	ldr	r3, [pc, #632]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d6:	4a9d      	ldr	r2, [pc, #628]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ea:	4b98      	ldr	r3, [pc, #608]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f0:	f023 0203 	bic.w	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	4994      	ldr	r1, [pc, #592]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800270c:	4b8f      	ldr	r3, [pc, #572]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	f023 020c 	bic.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800271a:	498c      	ldr	r1, [pc, #560]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800272e:	4b87      	ldr	r3, [pc, #540]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002734:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	4983      	ldr	r1, [pc, #524]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002750:	4b7e      	ldr	r3, [pc, #504]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002756:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275e:	497b      	ldr	r1, [pc, #492]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0310 	and.w	r3, r3, #16
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002772:	4b76      	ldr	r3, [pc, #472]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002778:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002780:	4972      	ldr	r1, [pc, #456]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0320 	and.w	r3, r3, #32
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002794:	4b6d      	ldr	r3, [pc, #436]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a2:	496a      	ldr	r1, [pc, #424]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b6:	4b65      	ldr	r3, [pc, #404]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c4:	4961      	ldr	r1, [pc, #388]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027d8:	4b5c      	ldr	r3, [pc, #368]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027e6:	4959      	ldr	r1, [pc, #356]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fa:	4b54      	ldr	r3, [pc, #336]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002800:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002808:	4950      	ldr	r1, [pc, #320]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800281c:	4b4b      	ldr	r3, [pc, #300]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002822:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282a:	4948      	ldr	r1, [pc, #288]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800283e:	4b43      	ldr	r3, [pc, #268]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002844:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284c:	493f      	ldr	r1, [pc, #252]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d028      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002860:	4b3a      	ldr	r3, [pc, #232]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002866:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800286e:	4937      	ldr	r1, [pc, #220]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002870:	4313      	orrs	r3, r2
 8002872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800287a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800287e:	d106      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002880:	4b32      	ldr	r3, [pc, #200]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	4a31      	ldr	r2, [pc, #196]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800288a:	60d3      	str	r3, [r2, #12]
 800288c:	e011      	b.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002892:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002896:	d10c      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	2101      	movs	r1, #1
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f8d8 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d028      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028be:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028c4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	491f      	ldr	r1, [pc, #124]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028dc:	d106      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028de:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	4a1a      	ldr	r2, [pc, #104]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028e8:	60d3      	str	r3, [r2, #12]
 80028ea:	e011      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3304      	adds	r3, #4
 80028fa:	2101      	movs	r1, #1
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f8a9 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 8002902:	4603      	mov	r3, r0
 8002904:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02b      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002922:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800292a:	4908      	ldr	r1, [pc, #32]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002936:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800293a:	d109      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a02      	ldr	r2, [pc, #8]	@ (800294c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002946:	60d3      	str	r3, [r2, #12]
 8002948:	e014      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002954:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002958:	d10c      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3304      	adds	r3, #4
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f000 f877 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002970:	7cfb      	ldrb	r3, [r7, #19]
 8002972:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d02f      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002980:	4b2b      	ldr	r3, [pc, #172]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002986:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800298e:	4928      	ldr	r1, [pc, #160]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800299a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800299e:	d10d      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3304      	adds	r3, #4
 80029a4:	2102      	movs	r1, #2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f854 	bl	8002a54 <RCCEx_PLLSAI1_Config>
 80029ac:	4603      	mov	r3, r0
 80029ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	74bb      	strb	r3, [r7, #18]
 80029ba:	e011      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80029c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3320      	adds	r3, #32
 80029ca:	2102      	movs	r1, #2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f935 	bl	8002c3c <RCCEx_PLLSAI2_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00a      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80029ec:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80029fa:	490d      	ldr	r1, [pc, #52]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a1e:	4904      	ldr	r1, [pc, #16]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a26:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40021000 	.word	0x40021000

08002a34 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a04      	ldr	r2, [pc, #16]	@ (8002a50 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6013      	str	r3, [r2, #0]
}
 8002a44:	bf00      	nop
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000

08002a54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a62:	4b75      	ldr	r3, [pc, #468]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d018      	beq.n	8002aa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a6e:	4b72      	ldr	r3, [pc, #456]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0203 	and.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d10d      	bne.n	8002a9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
       ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002a86:	4b6c      	ldr	r3, [pc, #432]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	091b      	lsrs	r3, r3, #4
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
       ||
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d047      	beq.n	8002b2a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
 8002a9e:	e044      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d018      	beq.n	8002ada <RCCEx_PLLSAI1_Config+0x86>
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d825      	bhi.n	8002af8 <RCCEx_PLLSAI1_Config+0xa4>
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d002      	beq.n	8002ab6 <RCCEx_PLLSAI1_Config+0x62>
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d009      	beq.n	8002ac8 <RCCEx_PLLSAI1_Config+0x74>
 8002ab4:	e020      	b.n	8002af8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ab6:	4b60      	ldr	r3, [pc, #384]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d11d      	bne.n	8002afe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac6:	e01a      	b.n	8002afe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ac8:	4b5b      	ldr	r3, [pc, #364]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d116      	bne.n	8002b02 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad8:	e013      	b.n	8002b02 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ada:	4b57      	ldr	r3, [pc, #348]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ae6:	4b54      	ldr	r3, [pc, #336]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d109      	bne.n	8002b06 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002af6:	e006      	b.n	8002b06 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e004      	b.n	8002b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002afe:	bf00      	nop
 8002b00:	e002      	b.n	8002b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b02:	bf00      	nop
 8002b04:	e000      	b.n	8002b08 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b08:	7bfb      	ldrb	r3, [r7, #15]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10d      	bne.n	8002b2a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6819      	ldr	r1, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	430b      	orrs	r3, r1
 8002b24:	4944      	ldr	r1, [pc, #272]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d17d      	bne.n	8002c2c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b30:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a40      	ldr	r2, [pc, #256]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fa96 	bl	800106c <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b42:	e009      	b.n	8002b58 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b44:	f7fe fa92 	bl	800106c <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d902      	bls.n	8002b58 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	73fb      	strb	r3, [r7, #15]
        break;
 8002b56:	e005      	b.n	8002b64 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b58:	4b37      	ldr	r3, [pc, #220]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1ef      	bne.n	8002b44 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d160      	bne.n	8002c2c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d111      	bne.n	8002b94 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b70:	4b31      	ldr	r3, [pc, #196]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	6892      	ldr	r2, [r2, #8]
 8002b80:	0211      	lsls	r1, r2, #8
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68d2      	ldr	r2, [r2, #12]
 8002b86:	0912      	lsrs	r2, r2, #4
 8002b88:	0452      	lsls	r2, r2, #17
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	492a      	ldr	r1, [pc, #168]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	610b      	str	r3, [r1, #16]
 8002b92:	e027      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d112      	bne.n	8002bc0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b9a:	4b27      	ldr	r3, [pc, #156]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002ba2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6892      	ldr	r2, [r2, #8]
 8002baa:	0211      	lsls	r1, r2, #8
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6912      	ldr	r2, [r2, #16]
 8002bb0:	0852      	lsrs	r2, r2, #1
 8002bb2:	3a01      	subs	r2, #1
 8002bb4:	0552      	lsls	r2, r2, #21
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	491f      	ldr	r1, [pc, #124]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	610b      	str	r3, [r1, #16]
 8002bbe:	e011      	b.n	8002be4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002bc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6892      	ldr	r2, [r2, #8]
 8002bd0:	0211      	lsls	r1, r2, #8
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6952      	ldr	r2, [r2, #20]
 8002bd6:	0852      	lsrs	r2, r2, #1
 8002bd8:	3a01      	subs	r2, #1
 8002bda:	0652      	lsls	r2, r2, #25
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	4916      	ldr	r1, [pc, #88]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002be4:	4b14      	ldr	r3, [pc, #80]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a13      	ldr	r2, [pc, #76]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fa3c 	bl	800106c <HAL_GetTick>
 8002bf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bf6:	e009      	b.n	8002c0c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bf8:	f7fe fa38 	bl	800106c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d902      	bls.n	8002c0c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	73fb      	strb	r3, [r7, #15]
          break;
 8002c0a:	e005      	b.n	8002c18 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ef      	beq.n	8002bf8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d106      	bne.n	8002c2c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c1e:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	4904      	ldr	r1, [pc, #16]	@ (8002c38 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	40021000 	.word	0x40021000

08002c3c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d018      	beq.n	8002c88 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c56:	4b67      	ldr	r3, [pc, #412]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f003 0203 	and.w	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d10d      	bne.n	8002c82 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
       ||
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d009      	beq.n	8002c82 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c6e:	4b61      	ldr	r3, [pc, #388]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
       ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d047      	beq.n	8002d12 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	73fb      	strb	r3, [r7, #15]
 8002c86:	e044      	b.n	8002d12 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d018      	beq.n	8002cc2 <RCCEx_PLLSAI2_Config+0x86>
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d825      	bhi.n	8002ce0 <RCCEx_PLLSAI2_Config+0xa4>
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d002      	beq.n	8002c9e <RCCEx_PLLSAI2_Config+0x62>
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d009      	beq.n	8002cb0 <RCCEx_PLLSAI2_Config+0x74>
 8002c9c:	e020      	b.n	8002ce0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c9e:	4b55      	ldr	r3, [pc, #340]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d11d      	bne.n	8002ce6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cae:	e01a      	b.n	8002ce6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cb0:	4b50      	ldr	r3, [pc, #320]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d116      	bne.n	8002cea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc0:	e013      	b.n	8002cea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cc2:	4b4c      	ldr	r3, [pc, #304]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10f      	bne.n	8002cee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cce:	4b49      	ldr	r3, [pc, #292]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002cde:	e006      	b.n	8002cee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce4:	e004      	b.n	8002cf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e002      	b.n	8002cf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002cee:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10d      	bne.n	8002d12 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cf6:	4b3f      	ldr	r3, [pc, #252]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6819      	ldr	r1, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	4939      	ldr	r1, [pc, #228]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d167      	bne.n	8002de8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d18:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a35      	ldr	r2, [pc, #212]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d24:	f7fe f9a2 	bl	800106c <HAL_GetTick>
 8002d28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d2a:	e009      	b.n	8002d40 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d2c:	f7fe f99e 	bl	800106c <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d902      	bls.n	8002d40 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	73fb      	strb	r3, [r7, #15]
        break;
 8002d3e:	e005      	b.n	8002d4c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d40:	4b2c      	ldr	r3, [pc, #176]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1ef      	bne.n	8002d2c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d14a      	bne.n	8002de8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d111      	bne.n	8002d7c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d58:	4b26      	ldr	r3, [pc, #152]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6892      	ldr	r2, [r2, #8]
 8002d68:	0211      	lsls	r1, r2, #8
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68d2      	ldr	r2, [r2, #12]
 8002d6e:	0912      	lsrs	r2, r2, #4
 8002d70:	0452      	lsls	r2, r2, #17
 8002d72:	430a      	orrs	r2, r1
 8002d74:	491f      	ldr	r1, [pc, #124]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	614b      	str	r3, [r1, #20]
 8002d7a:	e011      	b.n	8002da0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d7e:	695b      	ldr	r3, [r3, #20]
 8002d80:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d84:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6892      	ldr	r2, [r2, #8]
 8002d8c:	0211      	lsls	r1, r2, #8
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6912      	ldr	r2, [r2, #16]
 8002d92:	0852      	lsrs	r2, r2, #1
 8002d94:	3a01      	subs	r2, #1
 8002d96:	0652      	lsls	r2, r2, #25
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	4916      	ldr	r1, [pc, #88]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002da0:	4b14      	ldr	r3, [pc, #80]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a13      	ldr	r2, [pc, #76]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002daa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dac:	f7fe f95e 	bl	800106c <HAL_GetTick>
 8002db0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002db2:	e009      	b.n	8002dc8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002db4:	f7fe f95a 	bl	800106c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d902      	bls.n	8002dc8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	73fb      	strb	r3, [r7, #15]
          break;
 8002dc6:	e005      	b.n	8002dd4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ef      	beq.n	8002db4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dda:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4904      	ldr	r1, [pc, #16]	@ (8002df4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40021000 	.word	0x40021000

08002df8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e049      	b.n	8002e9e <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	795b      	ldrb	r3, [r3, #5]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fd feea 	bl	8000bf4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 0204 	orr.w	r2, r2, #4
 8002e34:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e40:	2b40      	cmp	r3, #64	@ 0x40
 8002e42:	d104      	bne.n	8002e4e <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2204      	movs	r2, #4
 8002e48:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e027      	b.n	8002e9e <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8002e4e:	f7fe f90d 	bl	800106c <HAL_GetTick>
 8002e52:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8002e54:	e015      	b.n	8002e82 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002e56:	f7fe f909 	bl	800106c <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d90e      	bls.n	8002e82 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d007      	beq.n	8002e82 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e00d      	b.n	8002e9e <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d1e2      	bne.n	8002e56 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e049      	b.n	8002f4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 f841 	bl	8002f54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f000 f9df 	bl	80032a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d001      	beq.n	8002f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04f      	b.n	8003020 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	@ (800302c <HAL_TIM_Base_Start_IT+0xc4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x76>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002faa:	d018      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x76>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a1f      	ldr	r2, [pc, #124]	@ (8003030 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x76>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1e      	ldr	r2, [pc, #120]	@ (8003034 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x76>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8003038 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x76>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1b      	ldr	r2, [pc, #108]	@ (800303c <HAL_TIM_Base_Start_IT+0xd4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_TIM_Base_Start_IT+0x76>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a19      	ldr	r2, [pc, #100]	@ (8003040 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d115      	bne.n	800300a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d015      	beq.n	800301c <HAL_TIM_Base_Start_IT+0xb4>
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff6:	d011      	beq.n	800301c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0201 	orr.w	r2, r2, #1
 8003006:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003008:	e008      	b.n	800301c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e000      	b.n	800301e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40000400 	.word	0x40000400
 8003034:	40000800 	.word	0x40000800
 8003038:	40000c00 	.word	0x40000c00
 800303c:	40013400 	.word	0x40013400
 8003040:	40014000 	.word	0x40014000
 8003044:	00010007 	.word	0x00010007

08003048 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d020      	beq.n	80030ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01b      	beq.n	80030ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0202 	mvn.w	r2, #2
 800307c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8e9 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8003098:	e005      	b.n	80030a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f8db 	bl	8003256 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f8ec 	bl	800327e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d020      	beq.n	80030f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01b      	beq.n	80030f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0204 	mvn.w	r2, #4
 80030c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2202      	movs	r2, #2
 80030ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8c3 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8b5 	bl	8003256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8c6 	bl	800327e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0308 	and.w	r3, r3, #8
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0208 	mvn.w	r2, #8
 8003114:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2204      	movs	r2, #4
 800311a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f89d 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f88f 	bl	8003256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f8a0 	bl	800327e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d020      	beq.n	8003190 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01b      	beq.n	8003190 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0210 	mvn.w	r2, #16
 8003160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2208      	movs	r2, #8
 8003166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f877 	bl	800326a <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f869 	bl	8003256 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f87a 	bl	800327e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0201 	mvn.w	r2, #1
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd fce2 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d104      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00c      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d007      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f913 	bl	8003408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00c      	beq.n	8003206 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80031fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f90b 	bl	800341c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00c      	beq.n	800322a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d007      	beq.n	800322a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f834 	bl	8003292 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00c      	beq.n	800324e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f06f 0220 	mvn.w	r2, #32
 8003246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f8d3 	bl	80033f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a46      	ldr	r2, [pc, #280]	@ (80033d4 <TIM_Base_SetConfig+0x12c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d013      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c6:	d00f      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a43      	ldr	r2, [pc, #268]	@ (80033d8 <TIM_Base_SetConfig+0x130>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00b      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a42      	ldr	r2, [pc, #264]	@ (80033dc <TIM_Base_SetConfig+0x134>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d007      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a41      	ldr	r2, [pc, #260]	@ (80033e0 <TIM_Base_SetConfig+0x138>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d003      	beq.n	80032e8 <TIM_Base_SetConfig+0x40>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a40      	ldr	r2, [pc, #256]	@ (80033e4 <TIM_Base_SetConfig+0x13c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d108      	bne.n	80032fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a35      	ldr	r2, [pc, #212]	@ (80033d4 <TIM_Base_SetConfig+0x12c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003308:	d01b      	beq.n	8003342 <TIM_Base_SetConfig+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a32      	ldr	r2, [pc, #200]	@ (80033d8 <TIM_Base_SetConfig+0x130>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d017      	beq.n	8003342 <TIM_Base_SetConfig+0x9a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a31      	ldr	r2, [pc, #196]	@ (80033dc <TIM_Base_SetConfig+0x134>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0x9a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a30      	ldr	r2, [pc, #192]	@ (80033e0 <TIM_Base_SetConfig+0x138>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0x9a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2f      	ldr	r2, [pc, #188]	@ (80033e4 <TIM_Base_SetConfig+0x13c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0x9a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a2e      	ldr	r2, [pc, #184]	@ (80033e8 <TIM_Base_SetConfig+0x140>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0x9a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2d      	ldr	r2, [pc, #180]	@ (80033ec <TIM_Base_SetConfig+0x144>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0x9a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2c      	ldr	r2, [pc, #176]	@ (80033f0 <TIM_Base_SetConfig+0x148>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a16      	ldr	r2, [pc, #88]	@ (80033d4 <TIM_Base_SetConfig+0x12c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00f      	beq.n	80033a0 <TIM_Base_SetConfig+0xf8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a18      	ldr	r2, [pc, #96]	@ (80033e4 <TIM_Base_SetConfig+0x13c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00b      	beq.n	80033a0 <TIM_Base_SetConfig+0xf8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <TIM_Base_SetConfig+0x140>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <TIM_Base_SetConfig+0xf8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a16      	ldr	r2, [pc, #88]	@ (80033ec <TIM_Base_SetConfig+0x144>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_Base_SetConfig+0xf8>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a15      	ldr	r2, [pc, #84]	@ (80033f0 <TIM_Base_SetConfig+0x148>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d103      	bne.n	80033a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f023 0201 	bic.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	611a      	str	r2, [r3, #16]
  }
}
 80033c6:	bf00      	nop
 80033c8:	3714      	adds	r7, #20
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40000400 	.word	0x40000400
 80033dc:	40000800 	.word	0x40000800
 80033e0:	40000c00 	.word	0x40000c00
 80033e4:	40013400 	.word	0x40013400
 80033e8:	40014000 	.word	0x40014000
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800

080033f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e040      	b.n	80034c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fc04 	bl	8000c60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	@ 0x24
 800345c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fe90 	bl	800419c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fbd5 	bl	8003c2c <UART_SetConfig>
 8003482:	4603      	mov	r3, r0
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e01b      	b.n	80034c4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800349a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f000 ff0f 	bl	80042e0 <UART_CheckIdleState>
 80034c2:	4603      	mov	r3, r0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08a      	sub	sp, #40	@ 0x28
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	4613      	mov	r3, r2
 80034da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d177      	bne.n	80035d4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <HAL_UART_Transmit+0x24>
 80034ea:	88fb      	ldrh	r3, [r7, #6]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e070      	b.n	80035d6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2221      	movs	r2, #33	@ 0x21
 8003500:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003502:	f7fd fdb3 	bl	800106c <HAL_GetTick>
 8003506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	88fa      	ldrh	r2, [r7, #6]
 800350c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	88fa      	ldrh	r2, [r7, #6]
 8003514:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003520:	d108      	bne.n	8003534 <HAL_UART_Transmit+0x68>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e003      	b.n	800353c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003538:	2300      	movs	r3, #0
 800353a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800353c:	e02f      	b.n	800359e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2200      	movs	r2, #0
 8003546:	2180      	movs	r1, #128	@ 0x80
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 ff71 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d004      	beq.n	800355e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e03b      	b.n	80035d6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10b      	bne.n	800357c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	881a      	ldrh	r2, [r3, #0]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003570:	b292      	uxth	r2, r2
 8003572:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	3302      	adds	r3, #2
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e007      	b.n	800358c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	3301      	adds	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1c9      	bne.n	800353e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2200      	movs	r2, #0
 80035b2:	2140      	movs	r1, #64	@ 0x40
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 ff3b 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e005      	b.n	80035d6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3720      	adds	r7, #32
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b0ba      	sub	sp, #232	@ 0xe8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003606:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800360a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800360e:	4013      	ands	r3, r2
 8003610:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003614:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d115      	bne.n	8003648 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800361c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00f      	beq.n	8003648 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800362c:	f003 0320 	and.w	r3, r3, #32
 8003630:	2b00      	cmp	r3, #0
 8003632:	d009      	beq.n	8003648 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 82ca 	beq.w	8003bd2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
      }
      return;
 8003646:	e2c4      	b.n	8003bd2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003648:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 8117 	beq.w	8003880 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800365e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003662:	4b85      	ldr	r3, [pc, #532]	@ (8003878 <HAL_UART_IRQHandler+0x298>)
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 810a 	beq.w	8003880 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800366c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d011      	beq.n	800369c <HAL_UART_IRQHandler+0xbc>
 8003678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2201      	movs	r2, #1
 800368a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003692:	f043 0201 	orr.w	r2, r3, #1
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800369c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d011      	beq.n	80036cc <HAL_UART_IRQHandler+0xec>
 80036a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2202      	movs	r2, #2
 80036ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d011      	beq.n	80036fc <HAL_UART_IRQHandler+0x11c>
 80036d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2204      	movs	r2, #4
 80036ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036f2:	f043 0202 	orr.w	r2, r3, #2
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	d017      	beq.n	8003738 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003718:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2208      	movs	r2, #8
 8003726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800372e:	f043 0208 	orr.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003740:	2b00      	cmp	r3, #0
 8003742:	d012      	beq.n	800376a <HAL_UART_IRQHandler+0x18a>
 8003744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003748:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003758:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003760:	f043 0220 	orr.w	r2, r3, #32
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8230 	beq.w	8003bd6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b2:	2b40      	cmp	r3, #64	@ 0x40
 80037b4:	d005      	beq.n	80037c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d04f      	beq.n	8003862 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fea1 	bl	800450a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037d2:	2b40      	cmp	r3, #64	@ 0x40
 80037d4:	d141      	bne.n	800385a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3308      	adds	r3, #8
 80037dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800380e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003812:	e841 2300 	strex	r3, r2, [r1]
 8003816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800381a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1d9      	bne.n	80037d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382e:	4a13      	ldr	r2, [pc, #76]	@ (800387c <HAL_UART_IRQHandler+0x29c>)
 8003830:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fd44 	bl	80012c4 <HAL_DMA_Abort_IT>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d017      	beq.n	8003872 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800384c:	4610      	mov	r0, r2
 800384e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00f      	b.n	8003872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f9d4 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00b      	b.n	8003872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f9d0 	bl	8003c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e007      	b.n	8003872 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9cc 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003870:	e1b1      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003872:	bf00      	nop
    return;
 8003874:	e1af      	b.n	8003bd6 <HAL_UART_IRQHandler+0x5f6>
 8003876:	bf00      	nop
 8003878:	04000120 	.word	0x04000120
 800387c:	080045d3 	.word	0x080045d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003884:	2b01      	cmp	r3, #1
 8003886:	f040 816a 	bne.w	8003b5e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800388a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388e:	f003 0310 	and.w	r3, r3, #16
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 8163 	beq.w	8003b5e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 815c 	beq.w	8003b5e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2210      	movs	r2, #16
 80038ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b8:	2b40      	cmp	r3, #64	@ 0x40
 80038ba:	f040 80d4 	bne.w	8003a66 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80ad 	beq.w	8003a2e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038de:	429a      	cmp	r2, r3
 80038e0:	f080 80a5 	bcs.w	8003a2e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	f040 8086 	bne.w	8003a0c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003914:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003918:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800391c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800392a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800392e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003932:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003936:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800393a:	e841 2300 	strex	r3, r2, [r1]
 800393e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1da      	bne.n	8003900 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800395a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3308      	adds	r3, #8
 800396a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800396e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003972:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003976:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e1      	bne.n	800394a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3308      	adds	r3, #8
 800398c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003990:	e853 3f00 	ldrex	r3, [r3]
 8003994:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003996:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800399c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e3      	bne.n	8003986 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039dc:	f023 0310 	bic.w	r3, r3, #16
 80039e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	461a      	mov	r2, r3
 80039ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e4      	bne.n	80039cc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fc1e 	bl	8001248 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4619      	mov	r1, r3
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8f4 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003a2c:	e0d5      	b.n	8003bda <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f040 80ce 	bne.w	8003bda <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	f040 80c5 	bne.w	8003bda <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f8d8 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
      return;
 8003a64:	e0b9      	b.n	8003bda <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 80ab 	beq.w	8003bde <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80a6 	beq.w	8003bde <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003ab4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003aba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e4      	bne.n	8003a92 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3308      	adds	r3, #8
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aec:	633a      	str	r2, [r7, #48]	@ 0x30
 8003aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003af4:	e841 2300 	strex	r3, r2, [r1]
 8003af8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d1e3      	bne.n	8003ac8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f023 0310 	bic.w	r3, r3, #16
 8003b28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b36:	61fb      	str	r3, [r7, #28]
 8003b38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	69b9      	ldr	r1, [r7, #24]
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	617b      	str	r3, [r7, #20]
   return(result);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e4      	bne.n	8003b14 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f85c 	bl	8003c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b5c:	e03f      	b.n	8003bde <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00e      	beq.n	8003b88 <HAL_UART_IRQHandler+0x5a8>
 8003b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d008      	beq.n	8003b88 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003b7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fd66 	bl	8004652 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b86:	e02d      	b.n	8003be4 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00e      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01c      	beq.n	8003be2 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
    }
    return;
 8003bb0:	e017      	b.n	8003be2 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d012      	beq.n	8003be4 <HAL_UART_IRQHandler+0x604>
 8003bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00c      	beq.n	8003be4 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f000 fd17 	bl	80045fe <UART_EndTransmit_IT>
    return;
 8003bd0:	e008      	b.n	8003be4 <HAL_UART_IRQHandler+0x604>
      return;
 8003bd2:	bf00      	nop
 8003bd4:	e006      	b.n	8003be4 <HAL_UART_IRQHandler+0x604>
    return;
 8003bd6:	bf00      	nop
 8003bd8:	e004      	b.n	8003be4 <HAL_UART_IRQHandler+0x604>
      return;
 8003bda:	bf00      	nop
 8003bdc:	e002      	b.n	8003be4 <HAL_UART_IRQHandler+0x604>
      return;
 8003bde:	bf00      	nop
 8003be0:	e000      	b.n	8003be4 <HAL_UART_IRQHandler+0x604>
    return;
 8003be2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003be4:	37e8      	adds	r7, #232	@ 0xe8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop

08003bec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c30:	b08a      	sub	sp, #40	@ 0x28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	695b      	ldr	r3, [r3, #20]
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4ba4      	ldr	r3, [pc, #656]	@ (8003eec <UART_SetConfig+0x2c0>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	6812      	ldr	r2, [r2, #0]
 8003c62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68da      	ldr	r2, [r3, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a99      	ldr	r2, [pc, #612]	@ (8003ef0 <UART_SetConfig+0x2c4>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c94:	4313      	orrs	r3, r2
 8003c96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a90      	ldr	r2, [pc, #576]	@ (8003ef4 <UART_SetConfig+0x2c8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d126      	bne.n	8003d04 <UART_SetConfig+0xd8>
 8003cb6:	4b90      	ldr	r3, [pc, #576]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d81b      	bhi.n	8003cfc <UART_SetConfig+0xd0>
 8003cc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <UART_SetConfig+0xa0>)
 8003cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cca:	bf00      	nop
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	08003ce5 	.word	0x08003ce5
 8003cd8:	08003cf5 	.word	0x08003cf5
 8003cdc:	2301      	movs	r3, #1
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ce2:	e116      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cea:	e112      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003cec:	2304      	movs	r3, #4
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	e10e      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003cf4:	2308      	movs	r3, #8
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003cfa:	e10a      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d02:	e106      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a7c      	ldr	r2, [pc, #496]	@ (8003efc <UART_SetConfig+0x2d0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d138      	bne.n	8003d80 <UART_SetConfig+0x154>
 8003d0e:	4b7a      	ldr	r3, [pc, #488]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b0c      	cmp	r3, #12
 8003d1a:	d82d      	bhi.n	8003d78 <UART_SetConfig+0x14c>
 8003d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <UART_SetConfig+0xf8>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d59 	.word	0x08003d59
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d79 	.word	0x08003d79
 8003d30:	08003d79 	.word	0x08003d79
 8003d34:	08003d69 	.word	0x08003d69
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d79 	.word	0x08003d79
 8003d40:	08003d79 	.word	0x08003d79
 8003d44:	08003d61 	.word	0x08003d61
 8003d48:	08003d79 	.word	0x08003d79
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d71 	.word	0x08003d71
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d5e:	e0d8      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d60:	2302      	movs	r3, #2
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d66:	e0d4      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d68:	2304      	movs	r3, #4
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d6e:	e0d0      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d70:	2308      	movs	r3, #8
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d76:	e0cc      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d78:	2310      	movs	r3, #16
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003d7e:	e0c8      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5e      	ldr	r2, [pc, #376]	@ (8003f00 <UART_SetConfig+0x2d4>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d125      	bne.n	8003dd6 <UART_SetConfig+0x1aa>
 8003d8a:	4b5b      	ldr	r3, [pc, #364]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003d94:	2b30      	cmp	r3, #48	@ 0x30
 8003d96:	d016      	beq.n	8003dc6 <UART_SetConfig+0x19a>
 8003d98:	2b30      	cmp	r3, #48	@ 0x30
 8003d9a:	d818      	bhi.n	8003dce <UART_SetConfig+0x1a2>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d00a      	beq.n	8003db6 <UART_SetConfig+0x18a>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d814      	bhi.n	8003dce <UART_SetConfig+0x1a2>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <UART_SetConfig+0x182>
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d008      	beq.n	8003dbe <UART_SetConfig+0x192>
 8003dac:	e00f      	b.n	8003dce <UART_SetConfig+0x1a2>
 8003dae:	2300      	movs	r3, #0
 8003db0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003db4:	e0ad      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003db6:	2302      	movs	r3, #2
 8003db8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dbc:	e0a9      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003dbe:	2304      	movs	r3, #4
 8003dc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dc4:	e0a5      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dcc:	e0a1      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003dce:	2310      	movs	r3, #16
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003dd4:	e09d      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a4a      	ldr	r2, [pc, #296]	@ (8003f04 <UART_SetConfig+0x2d8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d125      	bne.n	8003e2c <UART_SetConfig+0x200>
 8003de0:	4b45      	ldr	r3, [pc, #276]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003dea:	2bc0      	cmp	r3, #192	@ 0xc0
 8003dec:	d016      	beq.n	8003e1c <UART_SetConfig+0x1f0>
 8003dee:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df0:	d818      	bhi.n	8003e24 <UART_SetConfig+0x1f8>
 8003df2:	2b80      	cmp	r3, #128	@ 0x80
 8003df4:	d00a      	beq.n	8003e0c <UART_SetConfig+0x1e0>
 8003df6:	2b80      	cmp	r3, #128	@ 0x80
 8003df8:	d814      	bhi.n	8003e24 <UART_SetConfig+0x1f8>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <UART_SetConfig+0x1d8>
 8003dfe:	2b40      	cmp	r3, #64	@ 0x40
 8003e00:	d008      	beq.n	8003e14 <UART_SetConfig+0x1e8>
 8003e02:	e00f      	b.n	8003e24 <UART_SetConfig+0x1f8>
 8003e04:	2300      	movs	r3, #0
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e0a:	e082      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e12:	e07e      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e14:	2304      	movs	r3, #4
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e1a:	e07a      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e1c:	2308      	movs	r3, #8
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e22:	e076      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e24:	2310      	movs	r3, #16
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2a:	e072      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a35      	ldr	r2, [pc, #212]	@ (8003f08 <UART_SetConfig+0x2dc>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d12a      	bne.n	8003e8c <UART_SetConfig+0x260>
 8003e36:	4b30      	ldr	r3, [pc, #192]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e44:	d01a      	beq.n	8003e7c <UART_SetConfig+0x250>
 8003e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e4a:	d81b      	bhi.n	8003e84 <UART_SetConfig+0x258>
 8003e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e50:	d00c      	beq.n	8003e6c <UART_SetConfig+0x240>
 8003e52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e56:	d815      	bhi.n	8003e84 <UART_SetConfig+0x258>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <UART_SetConfig+0x238>
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e60:	d008      	beq.n	8003e74 <UART_SetConfig+0x248>
 8003e62:	e00f      	b.n	8003e84 <UART_SetConfig+0x258>
 8003e64:	2300      	movs	r3, #0
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e6a:	e052      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e72:	e04e      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e74:	2304      	movs	r3, #4
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e7a:	e04a      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e7c:	2308      	movs	r3, #8
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e82:	e046      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e84:	2310      	movs	r3, #16
 8003e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e8a:	e042      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a17      	ldr	r2, [pc, #92]	@ (8003ef0 <UART_SetConfig+0x2c4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d13a      	bne.n	8003f0c <UART_SetConfig+0x2e0>
 8003e96:	4b18      	ldr	r3, [pc, #96]	@ (8003ef8 <UART_SetConfig+0x2cc>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ea0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ea4:	d01a      	beq.n	8003edc <UART_SetConfig+0x2b0>
 8003ea6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eaa:	d81b      	bhi.n	8003ee4 <UART_SetConfig+0x2b8>
 8003eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb0:	d00c      	beq.n	8003ecc <UART_SetConfig+0x2a0>
 8003eb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eb6:	d815      	bhi.n	8003ee4 <UART_SetConfig+0x2b8>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <UART_SetConfig+0x298>
 8003ebc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec0:	d008      	beq.n	8003ed4 <UART_SetConfig+0x2a8>
 8003ec2:	e00f      	b.n	8003ee4 <UART_SetConfig+0x2b8>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eca:	e022      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed2:	e01e      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eda:	e01a      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003edc:	2308      	movs	r3, #8
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee2:	e016      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eea:	e012      	b.n	8003f12 <UART_SetConfig+0x2e6>
 8003eec:	efff69f3 	.word	0xefff69f3
 8003ef0:	40008000 	.word	0x40008000
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40004400 	.word	0x40004400
 8003f00:	40004800 	.word	0x40004800
 8003f04:	40004c00 	.word	0x40004c00
 8003f08:	40005000 	.word	0x40005000
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a9f      	ldr	r2, [pc, #636]	@ (8004194 <UART_SetConfig+0x568>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d17a      	bne.n	8004012 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d824      	bhi.n	8003f6e <UART_SetConfig+0x342>
 8003f24:	a201      	add	r2, pc, #4	@ (adr r2, 8003f2c <UART_SetConfig+0x300>)
 8003f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2a:	bf00      	nop
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f6f 	.word	0x08003f6f
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f6f 	.word	0x08003f6f
 8003f3c:	08003f5f 	.word	0x08003f5f
 8003f40:	08003f6f 	.word	0x08003f6f
 8003f44:	08003f6f 	.word	0x08003f6f
 8003f48:	08003f6f 	.word	0x08003f6f
 8003f4c:	08003f67 	.word	0x08003f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f50:	f7fe f9c8 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8003f54:	61f8      	str	r0, [r7, #28]
        break;
 8003f56:	e010      	b.n	8003f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f58:	4b8f      	ldr	r3, [pc, #572]	@ (8004198 <UART_SetConfig+0x56c>)
 8003f5a:	61fb      	str	r3, [r7, #28]
        break;
 8003f5c:	e00d      	b.n	8003f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f5e:	f7fe f929 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8003f62:	61f8      	str	r0, [r7, #28]
        break;
 8003f64:	e009      	b.n	8003f7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6a:	61fb      	str	r3, [r7, #28]
        break;
 8003f6c:	e005      	b.n	8003f7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80fb 	beq.w	8004178 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	4413      	add	r3, r2
 8003f8c:	69fa      	ldr	r2, [r7, #28]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d305      	bcc.n	8003f9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d903      	bls.n	8003fa6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fa4:	e0e8      	b.n	8004178 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	461c      	mov	r4, r3
 8003fac:	4615      	mov	r5, r2
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	022b      	lsls	r3, r5, #8
 8003fb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fbc:	0222      	lsls	r2, r4, #8
 8003fbe:	68f9      	ldr	r1, [r7, #12]
 8003fc0:	6849      	ldr	r1, [r1, #4]
 8003fc2:	0849      	lsrs	r1, r1, #1
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	4688      	mov	r8, r1
 8003fc8:	4681      	mov	r9, r0
 8003fca:	eb12 0a08 	adds.w	sl, r2, r8
 8003fce:	eb43 0b09 	adc.w	fp, r3, r9
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	603b      	str	r3, [r7, #0]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fe0:	4650      	mov	r0, sl
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	f7fc f944 	bl	8000270 <__aeabi_uldivmod>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4613      	mov	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ff6:	d308      	bcc.n	800400a <UART_SetConfig+0x3de>
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ffe:	d204      	bcs.n	800400a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	60da      	str	r2, [r3, #12]
 8004008:	e0b6      	b.n	8004178 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004010:	e0b2      	b.n	8004178 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800401a:	d15e      	bne.n	80040da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800401c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004020:	2b08      	cmp	r3, #8
 8004022:	d828      	bhi.n	8004076 <UART_SetConfig+0x44a>
 8004024:	a201      	add	r2, pc, #4	@ (adr r2, 800402c <UART_SetConfig+0x400>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004051 	.word	0x08004051
 8004030:	08004059 	.word	0x08004059
 8004034:	08004061 	.word	0x08004061
 8004038:	08004077 	.word	0x08004077
 800403c:	08004067 	.word	0x08004067
 8004040:	08004077 	.word	0x08004077
 8004044:	08004077 	.word	0x08004077
 8004048:	08004077 	.word	0x08004077
 800404c:	0800406f 	.word	0x0800406f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe f948 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8004054:	61f8      	str	r0, [r7, #28]
        break;
 8004056:	e014      	b.n	8004082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fe f95a 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 800405c:	61f8      	str	r0, [r7, #28]
        break;
 800405e:	e010      	b.n	8004082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004060:	4b4d      	ldr	r3, [pc, #308]	@ (8004198 <UART_SetConfig+0x56c>)
 8004062:	61fb      	str	r3, [r7, #28]
        break;
 8004064:	e00d      	b.n	8004082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe f8a5 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 800406a:	61f8      	str	r0, [r7, #28]
        break;
 800406c:	e009      	b.n	8004082 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004072:	61fb      	str	r3, [r7, #28]
        break;
 8004074:	e005      	b.n	8004082 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004080:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d077      	beq.n	8004178 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005a      	lsls	r2, r3, #1
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	441a      	add	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b0f      	cmp	r3, #15
 80040a2:	d916      	bls.n	80040d2 <UART_SetConfig+0x4a6>
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040aa:	d212      	bcs.n	80040d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	f023 030f 	bic.w	r3, r3, #15
 80040b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	8afb      	ldrh	r3, [r7, #22]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	8afa      	ldrh	r2, [r7, #22]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e052      	b.n	8004178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040d8:	e04e      	b.n	8004178 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d827      	bhi.n	8004132 <UART_SetConfig+0x506>
 80040e2:	a201      	add	r2, pc, #4	@ (adr r2, 80040e8 <UART_SetConfig+0x4bc>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800410d 	.word	0x0800410d
 80040ec:	08004115 	.word	0x08004115
 80040f0:	0800411d 	.word	0x0800411d
 80040f4:	08004133 	.word	0x08004133
 80040f8:	08004123 	.word	0x08004123
 80040fc:	08004133 	.word	0x08004133
 8004100:	08004133 	.word	0x08004133
 8004104:	08004133 	.word	0x08004133
 8004108:	0800412b 	.word	0x0800412b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800410c:	f7fe f8ea 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8004110:	61f8      	str	r0, [r7, #28]
        break;
 8004112:	e014      	b.n	800413e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004114:	f7fe f8fc 	bl	8002310 <HAL_RCC_GetPCLK2Freq>
 8004118:	61f8      	str	r0, [r7, #28]
        break;
 800411a:	e010      	b.n	800413e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800411c:	4b1e      	ldr	r3, [pc, #120]	@ (8004198 <UART_SetConfig+0x56c>)
 800411e:	61fb      	str	r3, [r7, #28]
        break;
 8004120:	e00d      	b.n	800413e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004122:	f7fe f847 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8004126:	61f8      	str	r0, [r7, #28]
        break;
 8004128:	e009      	b.n	800413e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800412a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412e:	61fb      	str	r3, [r7, #28]
        break;
 8004130:	e005      	b.n	800413e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800413c:	bf00      	nop
    }

    if (pclk != 0U)
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d019      	beq.n	8004178 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	085a      	lsrs	r2, r3, #1
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	fbb2 f3f3 	udiv	r3, r2, r3
 8004156:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b0f      	cmp	r3, #15
 800415c:	d909      	bls.n	8004172 <UART_SetConfig+0x546>
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004164:	d205      	bcs.n	8004172 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	60da      	str	r2, [r3, #12]
 8004170:	e002      	b.n	8004178 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004184:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004188:	4618      	mov	r0, r3
 800418a:	3728      	adds	r7, #40	@ 0x28
 800418c:	46bd      	mov	sp, r7
 800418e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004192:	bf00      	nop
 8004194:	40008000 	.word	0x40008000
 8004198:	00f42400 	.word	0x00f42400

0800419c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	f003 0308 	and.w	r3, r3, #8
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00a      	beq.n	800420a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	f003 0304 	and.w	r3, r3, #4
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00a      	beq.n	800422c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	430a      	orrs	r2, r1
 800422a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004278:	2b00      	cmp	r3, #0
 800427a:	d01a      	beq.n	80042b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800429a:	d10a      	bne.n	80042b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	605a      	str	r2, [r3, #4]
  }
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b098      	sub	sp, #96	@ 0x60
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042f0:	f7fc febc 	bl	800106c <HAL_GetTick>
 80042f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b08      	cmp	r3, #8
 8004302:	d12e      	bne.n	8004362 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004304:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430c:	2200      	movs	r2, #0
 800430e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f88c 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d021      	beq.n	8004362 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800432c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800432e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004332:	653b      	str	r3, [r7, #80]	@ 0x50
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800433c:	647b      	str	r3, [r7, #68]	@ 0x44
 800433e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800434a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e6      	bne.n	800431e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e062      	b.n	8004428 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b04      	cmp	r3, #4
 800436e:	d149      	bne.n	8004404 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004378:	2200      	movs	r2, #0
 800437a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 f856 	bl	8004430 <UART_WaitOnFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d03c      	beq.n	8004404 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	e853 3f00 	ldrex	r3, [r3]
 8004396:	623b      	str	r3, [r7, #32]
   return(result);
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b0:	e841 2300 	strex	r3, r2, [r1]
 80043b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d1e6      	bne.n	800438a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	3308      	adds	r3, #8
 80043c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3308      	adds	r3, #8
 80043da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043dc:	61fa      	str	r2, [r7, #28]
 80043de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	69b9      	ldr	r1, [r7, #24]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e011      	b.n	8004428 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3758      	adds	r7, #88	@ 0x58
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	603b      	str	r3, [r7, #0]
 800443c:	4613      	mov	r3, r2
 800443e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004440:	e04f      	b.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d04b      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800444a:	f7fc fe0f 	bl	800106c <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	429a      	cmp	r2, r3
 8004458:	d302      	bcc.n	8004460 <UART_WaitOnFlagUntilTimeout+0x30>
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e04e      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d037      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b80      	cmp	r3, #128	@ 0x80
 8004476:	d034      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b40      	cmp	r3, #64	@ 0x40
 800447c:	d031      	beq.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69db      	ldr	r3, [r3, #28]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d110      	bne.n	80044ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2208      	movs	r2, #8
 8004492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f838 	bl	800450a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2208      	movs	r2, #8
 800449e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e029      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044bc:	d111      	bne.n	80044e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f81e 	bl	800450a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e00f      	b.n	8004502 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4013      	ands	r3, r2
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	bf0c      	ite	eq
 80044f2:	2301      	moveq	r3, #1
 80044f4:	2300      	movne	r3, #0
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	461a      	mov	r2, r3
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d0a0      	beq.n	8004442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b095      	sub	sp, #84	@ 0x54
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	461a      	mov	r2, r3
 800452e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004530:	643b      	str	r3, [r7, #64]	@ 0x40
 8004532:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004536:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e6      	bne.n	8004512 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	3308      	adds	r3, #8
 800454a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	61fb      	str	r3, [r7, #28]
   return(result);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004564:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004566:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800456a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e5      	bne.n	8004544 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800457c:	2b01      	cmp	r3, #1
 800457e:	d118      	bne.n	80045b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	60bb      	str	r3, [r7, #8]
   return(result);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f023 0310 	bic.w	r3, r3, #16
 8004594:	647b      	str	r3, [r7, #68]	@ 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	6979      	ldr	r1, [r7, #20]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	613b      	str	r3, [r7, #16]
   return(result);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e6      	bne.n	8004580 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80045c6:	bf00      	nop
 80045c8:	3754      	adds	r7, #84	@ 0x54
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr

080045d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f7ff fb05 	bl	8003c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b088      	sub	sp, #32
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60bb      	str	r3, [r7, #8]
   return(result);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800461a:	61fb      	str	r3, [r7, #28]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6979      	ldr	r1, [r7, #20]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	613b      	str	r3, [r7, #16]
   return(result);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e6      	bne.n	8004606 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fad1 	bl	8003bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800464a:	bf00      	nop
 800464c:	3720      	adds	r7, #32
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004652:	b480      	push	{r7}
 8004654:	b083      	sub	sp, #12
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <__NVIC_SetPriority>:
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	4603      	mov	r3, r0
 8004670:	6039      	str	r1, [r7, #0]
 8004672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004678:	2b00      	cmp	r3, #0
 800467a:	db0a      	blt.n	8004692 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	490c      	ldr	r1, [pc, #48]	@ (80046b4 <__NVIC_SetPriority+0x4c>)
 8004682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004686:	0112      	lsls	r2, r2, #4
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	440b      	add	r3, r1
 800468c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004690:	e00a      	b.n	80046a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4908      	ldr	r1, [pc, #32]	@ (80046b8 <__NVIC_SetPriority+0x50>)
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	3b04      	subs	r3, #4
 80046a0:	0112      	lsls	r2, r2, #4
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	440b      	add	r3, r1
 80046a6:	761a      	strb	r2, [r3, #24]
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	e000e100 	.word	0xe000e100
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <SysTick_Handler+0x1c>)
 80046c2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80046c4:	f001 fec0 	bl	8006448 <xTaskGetSchedulerState>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d001      	beq.n	80046d2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80046ce:	f002 fdbb 	bl	8007248 <xPortSysTickHandler>
  }
}
 80046d2:	bf00      	nop
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	e000e010 	.word	0xe000e010

080046dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046dc:	b580      	push	{r7, lr}
 80046de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046e0:	2100      	movs	r1, #0
 80046e2:	f06f 0004 	mvn.w	r0, #4
 80046e6:	f7ff ffbf 	bl	8004668 <__NVIC_SetPriority>
#endif
}
 80046ea:	bf00      	nop
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f6:	f3ef 8305 	mrs	r3, IPSR
 80046fa:	603b      	str	r3, [r7, #0]
  return(result);
 80046fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004702:	f06f 0305 	mvn.w	r3, #5
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	e00c      	b.n	8004724 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <osKernelInitialize+0x44>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d105      	bne.n	800471e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004712:	4b08      	ldr	r3, [pc, #32]	@ (8004734 <osKernelInitialize+0x44>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004718:	2300      	movs	r3, #0
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e002      	b.n	8004724 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004724:	687b      	ldr	r3, [r7, #4]
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000210 	.word	0x20000210

08004738 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800473e:	f3ef 8305 	mrs	r3, IPSR
 8004742:	603b      	str	r3, [r7, #0]
  return(result);
 8004744:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <osKernelStart+0x1a>
    stat = osErrorISR;
 800474a:	f06f 0305 	mvn.w	r3, #5
 800474e:	607b      	str	r3, [r7, #4]
 8004750:	e010      	b.n	8004774 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004752:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <osKernelStart+0x48>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d109      	bne.n	800476e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800475a:	f7ff ffbf 	bl	80046dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800475e:	4b08      	ldr	r3, [pc, #32]	@ (8004780 <osKernelStart+0x48>)
 8004760:	2202      	movs	r2, #2
 8004762:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004764:	f001 fa0c 	bl	8005b80 <vTaskStartScheduler>
      stat = osOK;
 8004768:	2300      	movs	r3, #0
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	e002      	b.n	8004774 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004774:	687b      	ldr	r3, [r7, #4]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	20000210 	.word	0x20000210

08004784 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b08e      	sub	sp, #56	@ 0x38
 8004788:	af04      	add	r7, sp, #16
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004794:	f3ef 8305 	mrs	r3, IPSR
 8004798:	617b      	str	r3, [r7, #20]
  return(result);
 800479a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800479c:	2b00      	cmp	r3, #0
 800479e:	d17e      	bne.n	800489e <osThreadNew+0x11a>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d07b      	beq.n	800489e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80047a6:	2380      	movs	r3, #128	@ 0x80
 80047a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80047aa:	2318      	movs	r3, #24
 80047ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d045      	beq.n	800484a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <osThreadNew+0x48>
        name = attr->name;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <osThreadNew+0x6e>
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b38      	cmp	r3, #56	@ 0x38
 80047e4:	d805      	bhi.n	80047f2 <osThreadNew+0x6e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d001      	beq.n	80047f6 <osThreadNew+0x72>
        return (NULL);
 80047f2:	2300      	movs	r3, #0
 80047f4:	e054      	b.n	80048a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	089b      	lsrs	r3, r3, #2
 8004804:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00e      	beq.n	800482c <osThreadNew+0xa8>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	2ba7      	cmp	r3, #167	@ 0xa7
 8004814:	d90a      	bls.n	800482c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800481a:	2b00      	cmp	r3, #0
 800481c:	d006      	beq.n	800482c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <osThreadNew+0xa8>
        mem = 1;
 8004826:	2301      	movs	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	e010      	b.n	800484e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10c      	bne.n	800484e <osThreadNew+0xca>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d108      	bne.n	800484e <osThreadNew+0xca>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d104      	bne.n	800484e <osThreadNew+0xca>
          mem = 0;
 8004844:	2300      	movs	r3, #0
 8004846:	61bb      	str	r3, [r7, #24]
 8004848:	e001      	b.n	800484e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d110      	bne.n	8004876 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800485c:	9202      	str	r2, [sp, #8]
 800485e:	9301      	str	r3, [sp, #4]
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	9300      	str	r3, [sp, #0]
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	6a3a      	ldr	r2, [r7, #32]
 8004868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 ff94 	bl	8005798 <xTaskCreateStatic>
 8004870:	4603      	mov	r3, r0
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	e013      	b.n	800489e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d110      	bne.n	800489e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	b29a      	uxth	r2, r3
 8004880:	f107 0310 	add.w	r3, r7, #16
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 ffe2 	bl	8005858 <xTaskCreate>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d001      	beq.n	800489e <osThreadNew+0x11a>
            hTask = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800489e:	693b      	ldr	r3, [r7, #16]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3728      	adds	r7, #40	@ 0x28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4a07      	ldr	r2, [pc, #28]	@ (80048d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80048b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	4a06      	ldr	r2, [pc, #24]	@ (80048d8 <vApplicationGetIdleTaskMemory+0x30>)
 80048be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2280      	movs	r2, #128	@ 0x80
 80048c4:	601a      	str	r2, [r3, #0]
}
 80048c6:	bf00      	nop
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	20000214 	.word	0x20000214
 80048d8:	200002bc 	.word	0x200002bc

080048dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4a07      	ldr	r2, [pc, #28]	@ (8004908 <vApplicationGetTimerTaskMemory+0x2c>)
 80048ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	4a06      	ldr	r2, [pc, #24]	@ (800490c <vApplicationGetTimerTaskMemory+0x30>)
 80048f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048fa:	601a      	str	r2, [r3, #0]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	200004bc 	.word	0x200004bc
 800490c:	20000564 	.word	0x20000564

08004910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f103 0208 	add.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f04f 32ff 	mov.w	r2, #4294967295
 8004928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f103 0208 	add.w	r2, r3, #8
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f103 0208 	add.w	r2, r3, #8
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	601a      	str	r2, [r3, #0]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c8:	d103      	bne.n	80049d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e00c      	b.n	80049ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3308      	adds	r3, #8
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e002      	b.n	80049e0 <vListInsert+0x2e>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d2f6      	bcs.n	80049da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685a      	ldr	r2, [r3, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	601a      	str	r2, [r3, #0]
}
 8004a18:	bf00      	nop
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6892      	ldr	r2, [r2, #8]
 8004a3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	687a      	ldr	r2, [r7, #4]
 8004a42:	6852      	ldr	r2, [r2, #4]
 8004a44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d103      	bne.n	8004a58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	1e5a      	subs	r2, r3, #1
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10b      	bne.n	8004aa4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a9e:	bf00      	nop
 8004aa0:	bf00      	nop
 8004aa2:	e7fd      	b.n	8004aa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004aa4:	f002 fb40 	bl	8007128 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ab4:	fb01 f303 	mul.w	r3, r1, r3
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ada:	fb01 f303 	mul.w	r3, r1, r3
 8004ade:	441a      	add	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	22ff      	movs	r2, #255	@ 0xff
 8004ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	22ff      	movs	r2, #255	@ 0xff
 8004af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d114      	bne.n	8004b24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d01a      	beq.n	8004b38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3310      	adds	r3, #16
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fad8 	bl	80060bc <xTaskRemoveFromEventList>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d012      	beq.n	8004b38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b12:	4b0d      	ldr	r3, [pc, #52]	@ (8004b48 <xQueueGenericReset+0xd0>)
 8004b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b18:	601a      	str	r2, [r3, #0]
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	e009      	b.n	8004b38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3310      	adds	r3, #16
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7ff fef1 	bl	8004910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3324      	adds	r3, #36	@ 0x24
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff feec 	bl	8004910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b38:	f002 fb28 	bl	800718c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b3c:	2301      	movs	r3, #1
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	@ 0x38
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	e7fd      	b.n	8004b74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10b      	bne.n	8004b96 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	e7fd      	b.n	8004b92 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <xQueueGenericCreateStatic+0x56>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <xQueueGenericCreateStatic+0x5a>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <xQueueGenericCreateStatic+0x5c>
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	623b      	str	r3, [r7, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d102      	bne.n	8004bd0 <xQueueGenericCreateStatic+0x84>
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <xQueueGenericCreateStatic+0x88>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e000      	b.n	8004bd6 <xQueueGenericCreateStatic+0x8a>
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	61fb      	str	r3, [r7, #28]
}
 8004bec:	bf00      	nop
 8004bee:	bf00      	nop
 8004bf0:	e7fd      	b.n	8004bee <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bf2:	2350      	movs	r3, #80	@ 0x50
 8004bf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b50      	cmp	r3, #80	@ 0x50
 8004bfa:	d00b      	beq.n	8004c14 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c00:	f383 8811 	msr	BASEPRI, r3
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	f3bf 8f4f 	dsb	sy
 8004c0c:	61bb      	str	r3, [r7, #24]
}
 8004c0e:	bf00      	nop
 8004c10:	bf00      	nop
 8004c12:	e7fd      	b.n	8004c10 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00d      	beq.n	8004c3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c28:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f840 	bl	8004cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3730      	adds	r7, #48	@ 0x30
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b08a      	sub	sp, #40	@ 0x28
 8004c4a:	af02      	add	r7, sp, #8
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	4613      	mov	r3, r2
 8004c52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	613b      	str	r3, [r7, #16]
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	e7fd      	b.n	8004c6e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	3350      	adds	r3, #80	@ 0x50
 8004c80:	4618      	mov	r0, r3
 8004c82:	f002 fb73 	bl	800736c <pvPortMalloc>
 8004c86:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d011      	beq.n	8004cb2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	3350      	adds	r3, #80	@ 0x50
 8004c96:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ca0:	79fa      	ldrb	r2, [r7, #7]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f805 	bl	8004cbc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
	}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d103      	bne.n	8004cd8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e002      	b.n	8004cde <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cea:	2101      	movs	r1, #1
 8004cec:	69b8      	ldr	r0, [r7, #24]
 8004cee:	f7ff fec3 	bl	8004a78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00e      	beq.n	8004d2e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004d22:	2300      	movs	r3, #0
 8004d24:	2200      	movs	r2, #0
 8004d26:	2100      	movs	r1, #0
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 f81d 	bl	8004d68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d40:	2301      	movs	r3, #1
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6939      	ldr	r1, [r7, #16]
 8004d4e:	6978      	ldr	r0, [r7, #20]
 8004d50:	f7ff ff79 	bl	8004c46 <xQueueGenericCreate>
 8004d54:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff ffd3 	bl	8004d02 <prvInitialiseMutex>

		return xNewQueue;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
	}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08e      	sub	sp, #56	@ 0x38
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d76:	2300      	movs	r3, #0
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <xQueueGenericSend+0x34>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d103      	bne.n	8004daa <xQueueGenericSend+0x42>
 8004da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <xQueueGenericSend+0x46>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <xQueueGenericSend+0x48>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <xQueueGenericSend+0x64>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	e7fd      	b.n	8004dc8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d103      	bne.n	8004dda <xQueueGenericSend+0x72>
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <xQueueGenericSend+0x76>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <xQueueGenericSend+0x78>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10b      	bne.n	8004dfc <xQueueGenericSend+0x94>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	623b      	str	r3, [r7, #32]
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	e7fd      	b.n	8004df8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dfc:	f001 fb24 	bl	8006448 <xTaskGetSchedulerState>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <xQueueGenericSend+0xa4>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <xQueueGenericSend+0xa8>
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e000      	b.n	8004e12 <xQueueGenericSend+0xaa>
 8004e10:	2300      	movs	r3, #0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <xQueueGenericSend+0xc6>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	61fb      	str	r3, [r7, #28]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e2e:	f002 f97b 	bl	8007128 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d302      	bcc.n	8004e44 <xQueueGenericSend+0xdc>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d129      	bne.n	8004e98 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e4a:	f000 fb37 	bl	80054bc <prvCopyDataToQueue>
 8004e4e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d010      	beq.n	8004e7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5a:	3324      	adds	r3, #36	@ 0x24
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 f92d 	bl	80060bc <xTaskRemoveFromEventList>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d013      	beq.n	8004e90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e68:	4b3f      	ldr	r3, [pc, #252]	@ (8004f68 <xQueueGenericSend+0x200>)
 8004e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	e00a      	b.n	8004e90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d007      	beq.n	8004e90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e80:	4b39      	ldr	r3, [pc, #228]	@ (8004f68 <xQueueGenericSend+0x200>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e90:	f002 f97c 	bl	800718c <vPortExitCritical>
				return pdPASS;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e063      	b.n	8004f60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d103      	bne.n	8004ea6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e9e:	f002 f975 	bl	800718c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e05c      	b.n	8004f60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eac:	f107 0314 	add.w	r3, r7, #20
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f001 f967 	bl	8006184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004eba:	f002 f967 	bl	800718c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ebe:	f000 fecf 	bl	8005c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ec2:	f002 f931 	bl	8007128 <vPortEnterCritical>
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ecc:	b25b      	sxtb	r3, r3
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d103      	bne.n	8004edc <xQueueGenericSend+0x174>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ee2:	b25b      	sxtb	r3, r3
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee8:	d103      	bne.n	8004ef2 <xQueueGenericSend+0x18a>
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ef2:	f002 f94b 	bl	800718c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ef6:	1d3a      	adds	r2, r7, #4
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 f956 	bl	80061b0 <xTaskCheckForTimeOut>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d124      	bne.n	8004f54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f0c:	f000 fbce 	bl	80056ac <prvIsQueueFull>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d018      	beq.n	8004f48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	3310      	adds	r3, #16
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f001 f87a 	bl	8006018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f26:	f000 fb59 	bl	80055dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f2a:	f000 fea7 	bl	8005c7c <xTaskResumeAll>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f47f af7c 	bne.w	8004e2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004f36:	4b0c      	ldr	r3, [pc, #48]	@ (8004f68 <xQueueGenericSend+0x200>)
 8004f38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	e772      	b.n	8004e2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f4a:	f000 fb47 	bl	80055dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f4e:	f000 fe95 	bl	8005c7c <xTaskResumeAll>
 8004f52:	e76c      	b.n	8004e2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004f56:	f000 fb41 	bl	80055dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f5a:	f000 fe8f 	bl	8005c7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3738      	adds	r7, #56	@ 0x38
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b090      	sub	sp, #64	@ 0x40
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
 8004f78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10b      	bne.n	8004f9c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f88:	f383 8811 	msr	BASEPRI, r3
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f3bf 8f4f 	dsb	sy
 8004f94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
 8004f9a:	e7fd      	b.n	8004f98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d103      	bne.n	8004faa <xQueueGenericSendFromISR+0x3e>
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <xQueueGenericSendFromISR+0x42>
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <xQueueGenericSendFromISR+0x44>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d103      	bne.n	8004fda <xQueueGenericSendFromISR+0x6e>
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <xQueueGenericSendFromISR+0x72>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <xQueueGenericSendFromISR+0x74>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10b      	bne.n	8004ffc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	623b      	str	r3, [r7, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	bf00      	nop
 8004ffa:	e7fd      	b.n	8004ff8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ffc:	f002 f974 	bl	80072e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005000:	f3ef 8211 	mrs	r2, BASEPRI
 8005004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005008:	f383 8811 	msr	BASEPRI, r3
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f3bf 8f4f 	dsb	sy
 8005014:	61fa      	str	r2, [r7, #28]
 8005016:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005018:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800501a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800501c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	429a      	cmp	r2, r3
 8005026:	d302      	bcc.n	800502e <xQueueGenericSendFromISR+0xc2>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d12f      	bne.n	800508e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800502e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005030:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005034:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005044:	f000 fa3a 	bl	80054bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005048:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d112      	bne.n	8005078 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	3324      	adds	r3, #36	@ 0x24
 800505e:	4618      	mov	r0, r3
 8005060:	f001 f82c 	bl	80060bc <xTaskRemoveFromEventList>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00e      	beq.n	8005088 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00b      	beq.n	8005088 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	e007      	b.n	8005088 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005078:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800507c:	3301      	adds	r3, #1
 800507e:	b2db      	uxtb	r3, r3
 8005080:	b25a      	sxtb	r2, r3
 8005082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005084:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800508c:	e001      	b.n	8005092 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800508e:	2300      	movs	r3, #0
 8005090:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005094:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800509c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800509e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3740      	adds	r7, #64	@ 0x40
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08c      	sub	sp, #48	@ 0x30
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050b4:	2300      	movs	r3, #0
 80050b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <xQueueReceive+0x32>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	623b      	str	r3, [r7, #32]
}
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	e7fd      	b.n	80050d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d103      	bne.n	80050e8 <xQueueReceive+0x40>
 80050e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <xQueueReceive+0x44>
 80050e8:	2301      	movs	r3, #1
 80050ea:	e000      	b.n	80050ee <xQueueReceive+0x46>
 80050ec:	2300      	movs	r3, #0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <xQueueReceive+0x62>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	61fb      	str	r3, [r7, #28]
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800510a:	f001 f99d 	bl	8006448 <xTaskGetSchedulerState>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <xQueueReceive+0x72>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <xQueueReceive+0x76>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <xQueueReceive+0x78>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <xQueueReceive+0x94>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	61bb      	str	r3, [r7, #24]
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800513c:	f001 fff4 	bl	8007128 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005144:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01f      	beq.n	800518c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005150:	f000 fa1e 	bl	8005590 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	1e5a      	subs	r2, r3, #1
 8005158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800515c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00f      	beq.n	8005184 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	3310      	adds	r3, #16
 8005168:	4618      	mov	r0, r3
 800516a:	f000 ffa7 	bl	80060bc <xTaskRemoveFromEventList>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d007      	beq.n	8005184 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005174:	4b3c      	ldr	r3, [pc, #240]	@ (8005268 <xQueueReceive+0x1c0>)
 8005176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005184:	f002 f802 	bl	800718c <vPortExitCritical>
				return pdPASS;
 8005188:	2301      	movs	r3, #1
 800518a:	e069      	b.n	8005260 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005192:	f001 fffb 	bl	800718c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005196:	2300      	movs	r3, #0
 8005198:	e062      	b.n	8005260 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800519a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519c:	2b00      	cmp	r3, #0
 800519e:	d106      	bne.n	80051ae <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051a0:	f107 0310 	add.w	r3, r7, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 ffed 	bl	8006184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ae:	f001 ffed 	bl	800718c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051b2:	f000 fd55 	bl	8005c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051b6:	f001 ffb7 	bl	8007128 <vPortEnterCritical>
 80051ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d103      	bne.n	80051d0 <xQueueReceive+0x128>
 80051c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051d6:	b25b      	sxtb	r3, r3
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d103      	bne.n	80051e6 <xQueueReceive+0x13e>
 80051de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051e6:	f001 ffd1 	bl	800718c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051ea:	1d3a      	adds	r2, r7, #4
 80051ec:	f107 0310 	add.w	r3, r7, #16
 80051f0:	4611      	mov	r1, r2
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 ffdc 	bl	80061b0 <xTaskCheckForTimeOut>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d123      	bne.n	8005246 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005200:	f000 fa3e 	bl	8005680 <prvIsQueueEmpty>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d017      	beq.n	800523a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800520a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520c:	3324      	adds	r3, #36	@ 0x24
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f000 ff00 	bl	8006018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800521a:	f000 f9df 	bl	80055dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800521e:	f000 fd2d 	bl	8005c7c <xTaskResumeAll>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d189      	bne.n	800513c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005228:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <xQueueReceive+0x1c0>)
 800522a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	e780      	b.n	800513c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800523a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800523c:	f000 f9ce 	bl	80055dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005240:	f000 fd1c 	bl	8005c7c <xTaskResumeAll>
 8005244:	e77a      	b.n	800513c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005248:	f000 f9c8 	bl	80055dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800524c:	f000 fd16 	bl	8005c7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005252:	f000 fa15 	bl	8005680 <prvIsQueueEmpty>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	f43f af6f 	beq.w	800513c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800525e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005260:	4618      	mov	r0, r3
 8005262:	3730      	adds	r7, #48	@ 0x30
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08e      	sub	sp, #56	@ 0x38
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005276:	2300      	movs	r3, #0
 8005278:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10b      	bne.n	80052a0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528c:	f383 8811 	msr	BASEPRI, r3
 8005290:	f3bf 8f6f 	isb	sy
 8005294:	f3bf 8f4f 	dsb	sy
 8005298:	623b      	str	r3, [r7, #32]
}
 800529a:	bf00      	nop
 800529c:	bf00      	nop
 800529e:	e7fd      	b.n	800529c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	61fb      	str	r3, [r7, #28]
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052c0:	f001 f8c2 	bl	8006448 <xTaskGetSchedulerState>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d102      	bne.n	80052d0 <xQueueSemaphoreTake+0x64>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <xQueueSemaphoreTake+0x68>
 80052d0:	2301      	movs	r3, #1
 80052d2:	e000      	b.n	80052d6 <xQueueSemaphoreTake+0x6a>
 80052d4:	2300      	movs	r3, #0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10b      	bne.n	80052f2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	61bb      	str	r3, [r7, #24]
}
 80052ec:	bf00      	nop
 80052ee:	bf00      	nop
 80052f0:	e7fd      	b.n	80052ee <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052f2:	f001 ff19 	bl	8007128 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80052f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052fa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80052fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d024      	beq.n	800534c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	1e5a      	subs	r2, r3, #1
 8005306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005308:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800530a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d104      	bne.n	800531c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005312:	f001 fa13 	bl	800673c <pvTaskIncrementMutexHeldCount>
 8005316:	4602      	mov	r2, r0
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d00f      	beq.n	8005344 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	3310      	adds	r3, #16
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fec7 	bl	80060bc <xTaskRemoveFromEventList>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005334:	4b54      	ldr	r3, [pc, #336]	@ (8005488 <xQueueSemaphoreTake+0x21c>)
 8005336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005344:	f001 ff22 	bl	800718c <vPortExitCritical>
				return pdPASS;
 8005348:	2301      	movs	r3, #1
 800534a:	e098      	b.n	800547e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d112      	bne.n	8005378 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800535c:	f383 8811 	msr	BASEPRI, r3
 8005360:	f3bf 8f6f 	isb	sy
 8005364:	f3bf 8f4f 	dsb	sy
 8005368:	617b      	str	r3, [r7, #20]
}
 800536a:	bf00      	nop
 800536c:	bf00      	nop
 800536e:	e7fd      	b.n	800536c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005370:	f001 ff0c 	bl	800718c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005374:	2300      	movs	r3, #0
 8005376:	e082      	b.n	800547e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800537e:	f107 030c 	add.w	r3, r7, #12
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fefe 	bl	8006184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005388:	2301      	movs	r3, #1
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800538c:	f001 fefe 	bl	800718c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005390:	f000 fc66 	bl	8005c60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005394:	f001 fec8 	bl	8007128 <vPortEnterCritical>
 8005398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800539a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800539e:	b25b      	sxtb	r3, r3
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a4:	d103      	bne.n	80053ae <xQueueSemaphoreTake+0x142>
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053b4:	b25b      	sxtb	r3, r3
 80053b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ba:	d103      	bne.n	80053c4 <xQueueSemaphoreTake+0x158>
 80053bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053c4:	f001 fee2 	bl	800718c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053c8:	463a      	mov	r2, r7
 80053ca:	f107 030c 	add.w	r3, r7, #12
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 feed 	bl	80061b0 <xTaskCheckForTimeOut>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d132      	bne.n	8005442 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80053de:	f000 f94f 	bl	8005680 <prvIsQueueEmpty>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d026      	beq.n	8005436 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80053f0:	f001 fe9a 	bl	8007128 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f001 f843 	bl	8006484 <xTaskPriorityInherit>
 80053fe:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005400:	f001 fec4 	bl	800718c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	3324      	adds	r3, #36	@ 0x24
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	4611      	mov	r1, r2
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fe03 	bl	8006018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005412:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005414:	f000 f8e2 	bl	80055dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005418:	f000 fc30 	bl	8005c7c <xTaskResumeAll>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	f47f af67 	bne.w	80052f2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005424:	4b18      	ldr	r3, [pc, #96]	@ (8005488 <xQueueSemaphoreTake+0x21c>)
 8005426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	e75d      	b.n	80052f2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005436:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005438:	f000 f8d0 	bl	80055dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800543c:	f000 fc1e 	bl	8005c7c <xTaskResumeAll>
 8005440:	e757      	b.n	80052f2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005442:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005444:	f000 f8ca 	bl	80055dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005448:	f000 fc18 	bl	8005c7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800544c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800544e:	f000 f917 	bl	8005680 <prvIsQueueEmpty>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	f43f af4c 	beq.w	80052f2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00d      	beq.n	800547c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005460:	f001 fe62 	bl	8007128 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005464:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005466:	f000 f811 	bl	800548c <prvGetDisinheritPriorityAfterTimeout>
 800546a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800546c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005472:	4618      	mov	r0, r3
 8005474:	f001 f8de 	bl	8006634 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005478:	f001 fe88 	bl	800718c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800547c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800547e:	4618      	mov	r0, r3
 8005480:	3738      	adds	r7, #56	@ 0x38
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e001      	b.n	80054ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80054aa:	2300      	movs	r3, #0
 80054ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80054ae:	68fb      	ldr	r3, [r7, #12]
	}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10d      	bne.n	80054f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d14d      	bne.n	800557e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 f834 	bl	8006554 <xTaskPriorityDisinherit>
 80054ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	609a      	str	r2, [r3, #8]
 80054f4:	e043      	b.n	800557e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d119      	bne.n	8005530 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6858      	ldr	r0, [r3, #4]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	461a      	mov	r2, r3
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	f002 f9e8 	bl	80078dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005514:	441a      	add	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	429a      	cmp	r2, r3
 8005524:	d32b      	bcc.n	800557e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
 800552e:	e026      	b.n	800557e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68d8      	ldr	r0, [r3, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	461a      	mov	r2, r3
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	f002 f9ce 	bl	80078dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	425b      	negs	r3, r3
 800554a:	441a      	add	r2, r3
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d207      	bcs.n	800556c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005564:	425b      	negs	r3, r3
 8005566:	441a      	add	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b02      	cmp	r3, #2
 8005570:	d105      	bne.n	800557e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d002      	beq.n	800557e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	3b01      	subs	r3, #1
 800557c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005586:	697b      	ldr	r3, [r7, #20]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3718      	adds	r7, #24
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d018      	beq.n	80055d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	441a      	add	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	68da      	ldr	r2, [r3, #12]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d303      	bcc.n	80055c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68d9      	ldr	r1, [r3, #12]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055cc:	461a      	mov	r2, r3
 80055ce:	6838      	ldr	r0, [r7, #0]
 80055d0:	f002 f984 	bl	80078dc <memcpy>
	}
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055e4:	f001 fda0 	bl	8007128 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055f0:	e011      	b.n	8005616 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d012      	beq.n	8005620 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3324      	adds	r3, #36	@ 0x24
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fd5c 	bl	80060bc <xTaskRemoveFromEventList>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800560a:	f000 fe35 	bl	8006278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	3b01      	subs	r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800561a:	2b00      	cmp	r3, #0
 800561c:	dce9      	bgt.n	80055f2 <prvUnlockQueue+0x16>
 800561e:	e000      	b.n	8005622 <prvUnlockQueue+0x46>
					break;
 8005620:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	22ff      	movs	r2, #255	@ 0xff
 8005626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800562a:	f001 fdaf 	bl	800718c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800562e:	f001 fd7b 	bl	8007128 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005638:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800563a:	e011      	b.n	8005660 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d012      	beq.n	800566a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3310      	adds	r3, #16
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fd37 	bl	80060bc <xTaskRemoveFromEventList>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005654:	f000 fe10 	bl	8006278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005658:	7bbb      	ldrb	r3, [r7, #14]
 800565a:	3b01      	subs	r3, #1
 800565c:	b2db      	uxtb	r3, r3
 800565e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005660:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005664:	2b00      	cmp	r3, #0
 8005666:	dce9      	bgt.n	800563c <prvUnlockQueue+0x60>
 8005668:	e000      	b.n	800566c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800566a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	22ff      	movs	r2, #255	@ 0xff
 8005670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005674:	f001 fd8a 	bl	800718c <vPortExitCritical>
}
 8005678:	bf00      	nop
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005688:	f001 fd4e 	bl	8007128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005694:	2301      	movs	r3, #1
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e001      	b.n	800569e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800569e:	f001 fd75 	bl	800718c <vPortExitCritical>

	return xReturn;
 80056a2:	68fb      	ldr	r3, [r7, #12]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056b4:	f001 fd38 	bl	8007128 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d102      	bne.n	80056ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	e001      	b.n	80056ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056ce:	f001 fd5d 	bl	800718c <vPortExitCritical>

	return xReturn;
 80056d2:	68fb      	ldr	r3, [r7, #12]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}

080056dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056e6:	2300      	movs	r3, #0
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	e014      	b.n	8005716 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056ec:	4a0f      	ldr	r2, [pc, #60]	@ (800572c <vQueueAddToRegistry+0x50>)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d10b      	bne.n	8005710 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056f8:	490c      	ldr	r1, [pc, #48]	@ (800572c <vQueueAddToRegistry+0x50>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005702:	4a0a      	ldr	r2, [pc, #40]	@ (800572c <vQueueAddToRegistry+0x50>)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4413      	add	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800570e:	e006      	b.n	800571e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b07      	cmp	r3, #7
 800571a:	d9e7      	bls.n	80056ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	20000964 	.word	0x20000964

08005730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005740:	f001 fcf2 	bl	8007128 <vPortEnterCritical>
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800574a:	b25b      	sxtb	r3, r3
 800574c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005750:	d103      	bne.n	800575a <vQueueWaitForMessageRestricted+0x2a>
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005760:	b25b      	sxtb	r3, r3
 8005762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005766:	d103      	bne.n	8005770 <vQueueWaitForMessageRestricted+0x40>
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005770:	f001 fd0c 	bl	800718c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d106      	bne.n	800578a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	3324      	adds	r3, #36	@ 0x24
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fc6d 	bl	8006064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800578a:	6978      	ldr	r0, [r7, #20]
 800578c:	f7ff ff26 	bl	80055dc <prvUnlockQueue>
	}
 8005790:	bf00      	nop
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	@ 0x38
 800579c:	af04      	add	r7, sp, #16
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
 80057a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80057ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b0:	f383 8811 	msr	BASEPRI, r3
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	623b      	str	r3, [r7, #32]
}
 80057be:	bf00      	nop
 80057c0:	bf00      	nop
 80057c2:	e7fd      	b.n	80057c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10b      	bne.n	80057e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	61fb      	str	r3, [r7, #28]
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	e7fd      	b.n	80057de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057e2:	23a8      	movs	r3, #168	@ 0xa8
 80057e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2ba8      	cmp	r3, #168	@ 0xa8
 80057ea:	d00b      	beq.n	8005804 <xTaskCreateStatic+0x6c>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	61bb      	str	r3, [r7, #24]
}
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005804:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01e      	beq.n	800584a <xTaskCreateStatic+0xb2>
 800580c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580e:	2b00      	cmp	r3, #0
 8005810:	d01b      	beq.n	800584a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800581a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800581c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581e:	2202      	movs	r2, #2
 8005820:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005824:	2300      	movs	r3, #0
 8005826:	9303      	str	r3, [sp, #12]
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	9302      	str	r3, [sp, #8]
 800582c:	f107 0314 	add.w	r3, r7, #20
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005834:	9300      	str	r3, [sp, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f851 	bl	80058e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005842:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005844:	f000 f8f6 	bl	8005a34 <prvAddNewTaskToReadyList>
 8005848:	e001      	b.n	800584e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800584e:	697b      	ldr	r3, [r7, #20]
	}
 8005850:	4618      	mov	r0, r3
 8005852:	3728      	adds	r7, #40	@ 0x28
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08c      	sub	sp, #48	@ 0x30
 800585c:	af04      	add	r7, sp, #16
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fd7d 	bl	800736c <pvPortMalloc>
 8005872:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00e      	beq.n	8005898 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800587a:	20a8      	movs	r0, #168	@ 0xa8
 800587c:	f001 fd76 	bl	800736c <pvPortMalloc>
 8005880:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	631a      	str	r2, [r3, #48]	@ 0x30
 800588e:	e005      	b.n	800589c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005890:	6978      	ldr	r0, [r7, #20]
 8005892:	f001 fe39 	bl	8007508 <vPortFree>
 8005896:	e001      	b.n	800589c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d017      	beq.n	80058d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	2300      	movs	r3, #0
 80058ae:	9303      	str	r3, [sp, #12]
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	68b9      	ldr	r1, [r7, #8]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f000 f80f 	bl	80058e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058c6:	69f8      	ldr	r0, [r7, #28]
 80058c8:	f000 f8b4 	bl	8005a34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058cc:	2301      	movs	r3, #1
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	e002      	b.n	80058d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295
 80058d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058d8:	69bb      	ldr	r3, [r7, #24]
	}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
	...

080058e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	461a      	mov	r2, r3
 80058fc:	21a5      	movs	r1, #165	@ 0xa5
 80058fe:	f001 ff63 	bl	80077c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005904:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800590c:	3b01      	subs	r3, #1
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	f023 0307 	bic.w	r3, r3, #7
 800591a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	617b      	str	r3, [r7, #20]
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	e7fd      	b.n	800593a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01f      	beq.n	8005984 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005944:	2300      	movs	r3, #0
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	e012      	b.n	8005970 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	4413      	add	r3, r2
 8005950:	7819      	ldrb	r1, [r3, #0]
 8005952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	4413      	add	r3, r2
 8005958:	3334      	adds	r3, #52	@ 0x34
 800595a:	460a      	mov	r2, r1
 800595c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d006      	beq.n	8005978 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2b0f      	cmp	r3, #15
 8005974:	d9e9      	bls.n	800594a <prvInitialiseNewTask+0x66>
 8005976:	e000      	b.n	800597a <prvInitialiseNewTask+0x96>
			{
				break;
 8005978:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800597a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005982:	e003      	b.n	800598c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800598c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598e:	2b37      	cmp	r3, #55	@ 0x37
 8005990:	d901      	bls.n	8005996 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005992:	2337      	movs	r3, #55	@ 0x37
 8005994:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800599a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	2200      	movs	r2, #0
 80059a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059aa:	3304      	adds	r3, #4
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe ffcf 	bl	8004950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	3318      	adds	r3, #24
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe ffca 	bl	8004950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	3354      	adds	r3, #84	@ 0x54
 80059e6:	224c      	movs	r2, #76	@ 0x4c
 80059e8:	2100      	movs	r1, #0
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 feec 	bl	80077c8 <memset>
 80059f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005a28 <prvInitialiseNewTask+0x144>)
 80059f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	4a0c      	ldr	r2, [pc, #48]	@ (8005a2c <prvInitialiseNewTask+0x148>)
 80059fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	4a0c      	ldr	r2, [pc, #48]	@ (8005a30 <prvInitialiseNewTask+0x14c>)
 8005a00:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	68f9      	ldr	r1, [r7, #12]
 8005a06:	69b8      	ldr	r0, [r7, #24]
 8005a08:	f001 fa5a 	bl	8006ec0 <pxPortInitialiseStack>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a1e:	bf00      	nop
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20005e18 	.word	0x20005e18
 8005a2c:	20005e80 	.word	0x20005e80
 8005a30:	20005ee8 	.word	0x20005ee8

08005a34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a3c:	f001 fb74 	bl	8007128 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a40:	4b2d      	ldr	r3, [pc, #180]	@ (8005af8 <prvAddNewTaskToReadyList+0xc4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3301      	adds	r3, #1
 8005a46:	4a2c      	ldr	r2, [pc, #176]	@ (8005af8 <prvAddNewTaskToReadyList+0xc4>)
 8005a48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8005afc <prvAddNewTaskToReadyList+0xc8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d109      	bne.n	8005a66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a52:	4a2a      	ldr	r2, [pc, #168]	@ (8005afc <prvAddNewTaskToReadyList+0xc8>)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a58:	4b27      	ldr	r3, [pc, #156]	@ (8005af8 <prvAddNewTaskToReadyList+0xc4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d110      	bne.n	8005a82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a60:	f000 fc2e 	bl	80062c0 <prvInitialiseTaskLists>
 8005a64:	e00d      	b.n	8005a82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a66:	4b26      	ldr	r3, [pc, #152]	@ (8005b00 <prvAddNewTaskToReadyList+0xcc>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a6e:	4b23      	ldr	r3, [pc, #140]	@ (8005afc <prvAddNewTaskToReadyList+0xc8>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d802      	bhi.n	8005a82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8005afc <prvAddNewTaskToReadyList+0xc8>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a82:	4b20      	ldr	r3, [pc, #128]	@ (8005b04 <prvAddNewTaskToReadyList+0xd0>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3301      	adds	r3, #1
 8005a88:	4a1e      	ldr	r2, [pc, #120]	@ (8005b04 <prvAddNewTaskToReadyList+0xd0>)
 8005a8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8005b04 <prvAddNewTaskToReadyList+0xd0>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a98:	4b1b      	ldr	r3, [pc, #108]	@ (8005b08 <prvAddNewTaskToReadyList+0xd4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d903      	bls.n	8005aa8 <prvAddNewTaskToReadyList+0x74>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa4:	4a18      	ldr	r2, [pc, #96]	@ (8005b08 <prvAddNewTaskToReadyList+0xd4>)
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4a15      	ldr	r2, [pc, #84]	@ (8005b0c <prvAddNewTaskToReadyList+0xd8>)
 8005ab6:	441a      	add	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	3304      	adds	r3, #4
 8005abc:	4619      	mov	r1, r3
 8005abe:	4610      	mov	r0, r2
 8005ac0:	f7fe ff53 	bl	800496a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ac4:	f001 fb62 	bl	800718c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8005b00 <prvAddNewTaskToReadyList+0xcc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00e      	beq.n	8005aee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <prvAddNewTaskToReadyList+0xc8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d207      	bcs.n	8005aee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ade:	4b0c      	ldr	r3, [pc, #48]	@ (8005b10 <prvAddNewTaskToReadyList+0xdc>)
 8005ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aee:	bf00      	nop
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000e78 	.word	0x20000e78
 8005afc:	200009a4 	.word	0x200009a4
 8005b00:	20000e84 	.word	0x20000e84
 8005b04:	20000e94 	.word	0x20000e94
 8005b08:	20000e80 	.word	0x20000e80
 8005b0c:	200009a8 	.word	0x200009a8
 8005b10:	e000ed04 	.word	0xe000ed04

08005b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d018      	beq.n	8005b58 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b26:	4b14      	ldr	r3, [pc, #80]	@ (8005b78 <vTaskDelay+0x64>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <vTaskDelay+0x32>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	60bb      	str	r3, [r7, #8]
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	e7fd      	b.n	8005b42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b46:	f000 f88b 	bl	8005c60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fe09 	bl	8006764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b52:	f000 f893 	bl	8005c7c <xTaskResumeAll>
 8005b56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d107      	bne.n	8005b6e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b5e:	4b07      	ldr	r3, [pc, #28]	@ (8005b7c <vTaskDelay+0x68>)
 8005b60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000ea0 	.word	0x20000ea0
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08a      	sub	sp, #40	@ 0x28
 8005b84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b8e:	463a      	mov	r2, r7
 8005b90:	1d39      	adds	r1, r7, #4
 8005b92:	f107 0308 	add.w	r3, r7, #8
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fe86 	bl	80048a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b9c:	6839      	ldr	r1, [r7, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	9202      	str	r2, [sp, #8]
 8005ba4:	9301      	str	r3, [sp, #4]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	2300      	movs	r3, #0
 8005bac:	460a      	mov	r2, r1
 8005bae:	4924      	ldr	r1, [pc, #144]	@ (8005c40 <vTaskStartScheduler+0xc0>)
 8005bb0:	4824      	ldr	r0, [pc, #144]	@ (8005c44 <vTaskStartScheduler+0xc4>)
 8005bb2:	f7ff fdf1 	bl	8005798 <xTaskCreateStatic>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4a23      	ldr	r2, [pc, #140]	@ (8005c48 <vTaskStartScheduler+0xc8>)
 8005bba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bbc:	4b22      	ldr	r3, [pc, #136]	@ (8005c48 <vTaskStartScheduler+0xc8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d002      	beq.n	8005bca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	e001      	b.n	8005bce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d102      	bne.n	8005bda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bd4:	f000 fe1a 	bl	800680c <xTimerCreateTimerTask>
 8005bd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d11b      	bne.n	8005c18 <vTaskStartScheduler+0x98>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	613b      	str	r3, [r7, #16]
}
 8005bf2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bf4:	4b15      	ldr	r3, [pc, #84]	@ (8005c4c <vTaskStartScheduler+0xcc>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3354      	adds	r3, #84	@ 0x54
 8005bfa:	4a15      	ldr	r2, [pc, #84]	@ (8005c50 <vTaskStartScheduler+0xd0>)
 8005bfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bfe:	4b15      	ldr	r3, [pc, #84]	@ (8005c54 <vTaskStartScheduler+0xd4>)
 8005c00:	f04f 32ff 	mov.w	r2, #4294967295
 8005c04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c06:	4b14      	ldr	r3, [pc, #80]	@ (8005c58 <vTaskStartScheduler+0xd8>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c0c:	4b13      	ldr	r3, [pc, #76]	@ (8005c5c <vTaskStartScheduler+0xdc>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c12:	f001 f9e5 	bl	8006fe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c16:	e00f      	b.n	8005c38 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1e:	d10b      	bne.n	8005c38 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	60fb      	str	r3, [r7, #12]
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <vTaskStartScheduler+0xb4>
}
 8005c38:	bf00      	nop
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	08008218 	.word	0x08008218
 8005c44:	08006291 	.word	0x08006291
 8005c48:	20000e9c 	.word	0x20000e9c
 8005c4c:	200009a4 	.word	0x200009a4
 8005c50:	20000010 	.word	0x20000010
 8005c54:	20000e98 	.word	0x20000e98
 8005c58:	20000e84 	.word	0x20000e84
 8005c5c:	20000e7c 	.word	0x20000e7c

08005c60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c60:	b480      	push	{r7}
 8005c62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c64:	4b04      	ldr	r3, [pc, #16]	@ (8005c78 <vTaskSuspendAll+0x18>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3301      	adds	r3, #1
 8005c6a:	4a03      	ldr	r2, [pc, #12]	@ (8005c78 <vTaskSuspendAll+0x18>)
 8005c6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c6e:	bf00      	nop
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr
 8005c78:	20000ea0 	.word	0x20000ea0

08005c7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c8a:	4b42      	ldr	r3, [pc, #264]	@ (8005d94 <xTaskResumeAll+0x118>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10b      	bne.n	8005caa <xTaskResumeAll+0x2e>
	__asm volatile
 8005c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c96:	f383 8811 	msr	BASEPRI, r3
 8005c9a:	f3bf 8f6f 	isb	sy
 8005c9e:	f3bf 8f4f 	dsb	sy
 8005ca2:	603b      	str	r3, [r7, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	bf00      	nop
 8005ca8:	e7fd      	b.n	8005ca6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005caa:	f001 fa3d 	bl	8007128 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cae:	4b39      	ldr	r3, [pc, #228]	@ (8005d94 <xTaskResumeAll+0x118>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	4a37      	ldr	r2, [pc, #220]	@ (8005d94 <xTaskResumeAll+0x118>)
 8005cb6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cb8:	4b36      	ldr	r3, [pc, #216]	@ (8005d94 <xTaskResumeAll+0x118>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d162      	bne.n	8005d86 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cc0:	4b35      	ldr	r3, [pc, #212]	@ (8005d98 <xTaskResumeAll+0x11c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d05e      	beq.n	8005d86 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cc8:	e02f      	b.n	8005d2a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cca:	4b34      	ldr	r3, [pc, #208]	@ (8005d9c <xTaskResumeAll+0x120>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fea4 	bl	8004a24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	3304      	adds	r3, #4
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fe fe9f 	bl	8004a24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cea:	4b2d      	ldr	r3, [pc, #180]	@ (8005da0 <xTaskResumeAll+0x124>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d903      	bls.n	8005cfa <xTaskResumeAll+0x7e>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8005da0 <xTaskResumeAll+0x124>)
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a27      	ldr	r2, [pc, #156]	@ (8005da4 <xTaskResumeAll+0x128>)
 8005d08:	441a      	add	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4610      	mov	r0, r2
 8005d12:	f7fe fe2a 	bl	800496a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d1a:	4b23      	ldr	r3, [pc, #140]	@ (8005da8 <xTaskResumeAll+0x12c>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005d24:	4b21      	ldr	r3, [pc, #132]	@ (8005dac <xTaskResumeAll+0x130>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8005d9c <xTaskResumeAll+0x120>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1cb      	bne.n	8005cca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d38:	f000 fb66 	bl	8006408 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d3c:	4b1c      	ldr	r3, [pc, #112]	@ (8005db0 <xTaskResumeAll+0x134>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d48:	f000 f846 	bl	8005dd8 <xTaskIncrementTick>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005d52:	4b16      	ldr	r3, [pc, #88]	@ (8005dac <xTaskResumeAll+0x130>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1f1      	bne.n	8005d48 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005d64:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <xTaskResumeAll+0x134>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d6a:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <xTaskResumeAll+0x130>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d009      	beq.n	8005d86 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d76:	4b0f      	ldr	r3, [pc, #60]	@ (8005db4 <xTaskResumeAll+0x138>)
 8005d78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d86:	f001 fa01 	bl	800718c <vPortExitCritical>

	return xAlreadyYielded;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20000ea0 	.word	0x20000ea0
 8005d98:	20000e78 	.word	0x20000e78
 8005d9c:	20000e38 	.word	0x20000e38
 8005da0:	20000e80 	.word	0x20000e80
 8005da4:	200009a8 	.word	0x200009a8
 8005da8:	200009a4 	.word	0x200009a4
 8005dac:	20000e8c 	.word	0x20000e8c
 8005db0:	20000e88 	.word	0x20000e88
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dbe:	4b05      	ldr	r3, [pc, #20]	@ (8005dd4 <xTaskGetTickCount+0x1c>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005dc4:	687b      	ldr	r3, [r7, #4]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000e7c 	.word	0x20000e7c

08005dd8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b086      	sub	sp, #24
 8005ddc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005de2:	4b4f      	ldr	r3, [pc, #316]	@ (8005f20 <xTaskIncrementTick+0x148>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8090 	bne.w	8005f0c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dec:	4b4d      	ldr	r3, [pc, #308]	@ (8005f24 <xTaskIncrementTick+0x14c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	3301      	adds	r3, #1
 8005df2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005df4:	4a4b      	ldr	r2, [pc, #300]	@ (8005f24 <xTaskIncrementTick+0x14c>)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d121      	bne.n	8005e44 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e00:	4b49      	ldr	r3, [pc, #292]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	603b      	str	r3, [r7, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	e7fd      	b.n	8005e1e <xTaskIncrementTick+0x46>
 8005e22:	4b41      	ldr	r3, [pc, #260]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	4b40      	ldr	r3, [pc, #256]	@ (8005f2c <xTaskIncrementTick+0x154>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	4a3e      	ldr	r2, [pc, #248]	@ (8005f2c <xTaskIncrementTick+0x154>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	4b3e      	ldr	r3, [pc, #248]	@ (8005f30 <xTaskIncrementTick+0x158>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <xTaskIncrementTick+0x158>)
 8005e3e:	6013      	str	r3, [r2, #0]
 8005e40:	f000 fae2 	bl	8006408 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e44:	4b3b      	ldr	r3, [pc, #236]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d349      	bcc.n	8005ee2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e4e:	4b36      	ldr	r3, [pc, #216]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d104      	bne.n	8005e62 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e58:	4b36      	ldr	r3, [pc, #216]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e5e:	601a      	str	r2, [r3, #0]
					break;
 8005e60:	e03f      	b.n	8005ee2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e62:	4b31      	ldr	r3, [pc, #196]	@ (8005f28 <xTaskIncrementTick+0x150>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d203      	bcs.n	8005e82 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8005f34 <xTaskIncrementTick+0x15c>)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e80:	e02f      	b.n	8005ee2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fe fdcc 	bl	8004a24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	3318      	adds	r3, #24
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7fe fdc3 	bl	8004a24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea2:	4b25      	ldr	r3, [pc, #148]	@ (8005f38 <xTaskIncrementTick+0x160>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d903      	bls.n	8005eb2 <xTaskIncrementTick+0xda>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eae:	4a22      	ldr	r2, [pc, #136]	@ (8005f38 <xTaskIncrementTick+0x160>)
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4a1f      	ldr	r2, [pc, #124]	@ (8005f3c <xTaskIncrementTick+0x164>)
 8005ec0:	441a      	add	r2, r3
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	4610      	mov	r0, r2
 8005eca:	f7fe fd4e 	bl	800496a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f40 <xTaskIncrementTick+0x168>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d3b8      	bcc.n	8005e4e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005edc:	2301      	movs	r3, #1
 8005ede:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee0:	e7b5      	b.n	8005e4e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ee2:	4b17      	ldr	r3, [pc, #92]	@ (8005f40 <xTaskIncrementTick+0x168>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee8:	4914      	ldr	r1, [pc, #80]	@ (8005f3c <xTaskIncrementTick+0x164>)
 8005eea:	4613      	mov	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4413      	add	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	440b      	add	r3, r1
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d901      	bls.n	8005efe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005efa:	2301      	movs	r3, #1
 8005efc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005efe:	4b11      	ldr	r3, [pc, #68]	@ (8005f44 <xTaskIncrementTick+0x16c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d007      	beq.n	8005f16 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e004      	b.n	8005f16 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f48 <xTaskIncrementTick+0x170>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	3301      	adds	r3, #1
 8005f12:	4a0d      	ldr	r2, [pc, #52]	@ (8005f48 <xTaskIncrementTick+0x170>)
 8005f14:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f16:	697b      	ldr	r3, [r7, #20]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000ea0 	.word	0x20000ea0
 8005f24:	20000e7c 	.word	0x20000e7c
 8005f28:	20000e30 	.word	0x20000e30
 8005f2c:	20000e34 	.word	0x20000e34
 8005f30:	20000e90 	.word	0x20000e90
 8005f34:	20000e98 	.word	0x20000e98
 8005f38:	20000e80 	.word	0x20000e80
 8005f3c:	200009a8 	.word	0x200009a8
 8005f40:	200009a4 	.word	0x200009a4
 8005f44:	20000e8c 	.word	0x20000e8c
 8005f48:	20000e88 	.word	0x20000e88

08005f4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f52:	4b2b      	ldr	r3, [pc, #172]	@ (8006000 <vTaskSwitchContext+0xb4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8006004 <vTaskSwitchContext+0xb8>)
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f60:	e047      	b.n	8005ff2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005f62:	4b28      	ldr	r3, [pc, #160]	@ (8006004 <vTaskSwitchContext+0xb8>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f68:	4b27      	ldr	r3, [pc, #156]	@ (8006008 <vTaskSwitchContext+0xbc>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	e011      	b.n	8005f94 <vTaskSwitchContext+0x48>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10b      	bne.n	8005f8e <vTaskSwitchContext+0x42>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	607b      	str	r3, [r7, #4]
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	e7fd      	b.n	8005f8a <vTaskSwitchContext+0x3e>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	3b01      	subs	r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	491d      	ldr	r1, [pc, #116]	@ (800600c <vTaskSwitchContext+0xc0>)
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	4613      	mov	r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	009b      	lsls	r3, r3, #2
 8005fa0:	440b      	add	r3, r1
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0e3      	beq.n	8005f70 <vTaskSwitchContext+0x24>
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4a16      	ldr	r2, [pc, #88]	@ (800600c <vTaskSwitchContext+0xc0>)
 8005fb4:	4413      	add	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	3308      	adds	r3, #8
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d104      	bne.n	8005fd8 <vTaskSwitchContext+0x8c>
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	4a0c      	ldr	r2, [pc, #48]	@ (8006010 <vTaskSwitchContext+0xc4>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	4a09      	ldr	r2, [pc, #36]	@ (8006008 <vTaskSwitchContext+0xbc>)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fe8:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <vTaskSwitchContext+0xc4>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	3354      	adds	r3, #84	@ 0x54
 8005fee:	4a09      	ldr	r2, [pc, #36]	@ (8006014 <vTaskSwitchContext+0xc8>)
 8005ff0:	6013      	str	r3, [r2, #0]
}
 8005ff2:	bf00      	nop
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	20000ea0 	.word	0x20000ea0
 8006004:	20000e8c 	.word	0x20000e8c
 8006008:	20000e80 	.word	0x20000e80
 800600c:	200009a8 	.word	0x200009a8
 8006010:	200009a4 	.word	0x200009a4
 8006014:	20000010 	.word	0x20000010

08006018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10b      	bne.n	8006040 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	60fb      	str	r3, [r7, #12]
}
 800603a:	bf00      	nop
 800603c:	bf00      	nop
 800603e:	e7fd      	b.n	800603c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006040:	4b07      	ldr	r3, [pc, #28]	@ (8006060 <vTaskPlaceOnEventList+0x48>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3318      	adds	r3, #24
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7fe fcb2 	bl	80049b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800604e:	2101      	movs	r1, #1
 8006050:	6838      	ldr	r0, [r7, #0]
 8006052:	f000 fb87 	bl	8006764 <prvAddCurrentTaskToDelayedList>
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	200009a4 	.word	0x200009a4

08006064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	617b      	str	r3, [r7, #20]
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	e7fd      	b.n	800608a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800608e:	4b0a      	ldr	r3, [pc, #40]	@ (80060b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3318      	adds	r3, #24
 8006094:	4619      	mov	r1, r3
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f7fe fc67 	bl	800496a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
 80060a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	68b8      	ldr	r0, [r7, #8]
 80060ac:	f000 fb5a 	bl	8006764 <prvAddCurrentTaskToDelayedList>
	}
 80060b0:	bf00      	nop
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	200009a4 	.word	0x200009a4

080060bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b086      	sub	sp, #24
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	60fb      	str	r3, [r7, #12]
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	e7fd      	b.n	80060e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	3318      	adds	r3, #24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fe fc98 	bl	8004a24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060f4:	4b1d      	ldr	r3, [pc, #116]	@ (800616c <xTaskRemoveFromEventList+0xb0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d11d      	bne.n	8006138 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	3304      	adds	r3, #4
 8006100:	4618      	mov	r0, r3
 8006102:	f7fe fc8f 	bl	8004a24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800610a:	4b19      	ldr	r3, [pc, #100]	@ (8006170 <xTaskRemoveFromEventList+0xb4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d903      	bls.n	800611a <xTaskRemoveFromEventList+0x5e>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006116:	4a16      	ldr	r2, [pc, #88]	@ (8006170 <xTaskRemoveFromEventList+0xb4>)
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4a13      	ldr	r2, [pc, #76]	@ (8006174 <xTaskRemoveFromEventList+0xb8>)
 8006128:	441a      	add	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fe fc1a 	bl	800496a <vListInsertEnd>
 8006136:	e005      	b.n	8006144 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	3318      	adds	r3, #24
 800613c:	4619      	mov	r1, r3
 800613e:	480e      	ldr	r0, [pc, #56]	@ (8006178 <xTaskRemoveFromEventList+0xbc>)
 8006140:	f7fe fc13 	bl	800496a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006148:	4b0c      	ldr	r3, [pc, #48]	@ (800617c <xTaskRemoveFromEventList+0xc0>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800614e:	429a      	cmp	r2, r3
 8006150:	d905      	bls.n	800615e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006152:	2301      	movs	r3, #1
 8006154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006156:	4b0a      	ldr	r3, [pc, #40]	@ (8006180 <xTaskRemoveFromEventList+0xc4>)
 8006158:	2201      	movs	r2, #1
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e001      	b.n	8006162 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800615e:	2300      	movs	r3, #0
 8006160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006162:	697b      	ldr	r3, [r7, #20]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3718      	adds	r7, #24
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000ea0 	.word	0x20000ea0
 8006170:	20000e80 	.word	0x20000e80
 8006174:	200009a8 	.word	0x200009a8
 8006178:	20000e38 	.word	0x20000e38
 800617c:	200009a4 	.word	0x200009a4
 8006180:	20000e8c 	.word	0x20000e8c

08006184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800618c:	4b06      	ldr	r3, [pc, #24]	@ (80061a8 <vTaskInternalSetTimeOutState+0x24>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006194:	4b05      	ldr	r3, [pc, #20]	@ (80061ac <vTaskInternalSetTimeOutState+0x28>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	605a      	str	r2, [r3, #4]
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	20000e90 	.word	0x20000e90
 80061ac:	20000e7c 	.word	0x20000e7c

080061b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b088      	sub	sp, #32
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10b      	bne.n	80061d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	613b      	str	r3, [r7, #16]
}
 80061d2:	bf00      	nop
 80061d4:	bf00      	nop
 80061d6:	e7fd      	b.n	80061d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10b      	bne.n	80061f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60fb      	str	r3, [r7, #12]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80061f6:	f000 ff97 	bl	8007128 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <xTaskCheckForTimeOut+0xc0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006212:	d102      	bne.n	800621a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e023      	b.n	8006262 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	4b15      	ldr	r3, [pc, #84]	@ (8006274 <xTaskCheckForTimeOut+0xc4>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	429a      	cmp	r2, r3
 8006224:	d007      	beq.n	8006236 <xTaskCheckForTimeOut+0x86>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	429a      	cmp	r2, r3
 800622e:	d302      	bcc.n	8006236 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006230:	2301      	movs	r3, #1
 8006232:	61fb      	str	r3, [r7, #28]
 8006234:	e015      	b.n	8006262 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	429a      	cmp	r2, r3
 800623e:	d20b      	bcs.n	8006258 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad2      	subs	r2, r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff ff99 	bl	8006184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006252:	2300      	movs	r3, #0
 8006254:	61fb      	str	r3, [r7, #28]
 8006256:	e004      	b.n	8006262 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800625e:	2301      	movs	r3, #1
 8006260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006262:	f000 ff93 	bl	800718c <vPortExitCritical>

	return xReturn;
 8006266:	69fb      	ldr	r3, [r7, #28]
}
 8006268:	4618      	mov	r0, r3
 800626a:	3720      	adds	r7, #32
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000e7c 	.word	0x20000e7c
 8006274:	20000e90 	.word	0x20000e90

08006278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800627c:	4b03      	ldr	r3, [pc, #12]	@ (800628c <vTaskMissedYield+0x14>)
 800627e:	2201      	movs	r2, #1
 8006280:	601a      	str	r2, [r3, #0]
}
 8006282:	bf00      	nop
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	20000e8c 	.word	0x20000e8c

08006290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006298:	f000 f852 	bl	8006340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800629c:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <prvIdleTask+0x28>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d9f9      	bls.n	8006298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062a4:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <prvIdleTask+0x2c>)
 80062a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062b4:	e7f0      	b.n	8006298 <prvIdleTask+0x8>
 80062b6:	bf00      	nop
 80062b8:	200009a8 	.word	0x200009a8
 80062bc:	e000ed04 	.word	0xe000ed04

080062c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062c6:	2300      	movs	r3, #0
 80062c8:	607b      	str	r3, [r7, #4]
 80062ca:	e00c      	b.n	80062e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4a12      	ldr	r2, [pc, #72]	@ (8006320 <prvInitialiseTaskLists+0x60>)
 80062d8:	4413      	add	r3, r2
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fe fb18 	bl	8004910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3301      	adds	r3, #1
 80062e4:	607b      	str	r3, [r7, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b37      	cmp	r3, #55	@ 0x37
 80062ea:	d9ef      	bls.n	80062cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062ec:	480d      	ldr	r0, [pc, #52]	@ (8006324 <prvInitialiseTaskLists+0x64>)
 80062ee:	f7fe fb0f 	bl	8004910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062f2:	480d      	ldr	r0, [pc, #52]	@ (8006328 <prvInitialiseTaskLists+0x68>)
 80062f4:	f7fe fb0c 	bl	8004910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062f8:	480c      	ldr	r0, [pc, #48]	@ (800632c <prvInitialiseTaskLists+0x6c>)
 80062fa:	f7fe fb09 	bl	8004910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062fe:	480c      	ldr	r0, [pc, #48]	@ (8006330 <prvInitialiseTaskLists+0x70>)
 8006300:	f7fe fb06 	bl	8004910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006304:	480b      	ldr	r0, [pc, #44]	@ (8006334 <prvInitialiseTaskLists+0x74>)
 8006306:	f7fe fb03 	bl	8004910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800630a:	4b0b      	ldr	r3, [pc, #44]	@ (8006338 <prvInitialiseTaskLists+0x78>)
 800630c:	4a05      	ldr	r2, [pc, #20]	@ (8006324 <prvInitialiseTaskLists+0x64>)
 800630e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006310:	4b0a      	ldr	r3, [pc, #40]	@ (800633c <prvInitialiseTaskLists+0x7c>)
 8006312:	4a05      	ldr	r2, [pc, #20]	@ (8006328 <prvInitialiseTaskLists+0x68>)
 8006314:	601a      	str	r2, [r3, #0]
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	200009a8 	.word	0x200009a8
 8006324:	20000e08 	.word	0x20000e08
 8006328:	20000e1c 	.word	0x20000e1c
 800632c:	20000e38 	.word	0x20000e38
 8006330:	20000e4c 	.word	0x20000e4c
 8006334:	20000e64 	.word	0x20000e64
 8006338:	20000e30 	.word	0x20000e30
 800633c:	20000e34 	.word	0x20000e34

08006340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006346:	e019      	b.n	800637c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006348:	f000 feee 	bl	8007128 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634c:	4b10      	ldr	r3, [pc, #64]	@ (8006390 <prvCheckTasksWaitingTermination+0x50>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3304      	adds	r3, #4
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fb63 	bl	8004a24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <prvCheckTasksWaitingTermination+0x54>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3b01      	subs	r3, #1
 8006364:	4a0b      	ldr	r2, [pc, #44]	@ (8006394 <prvCheckTasksWaitingTermination+0x54>)
 8006366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006368:	4b0b      	ldr	r3, [pc, #44]	@ (8006398 <prvCheckTasksWaitingTermination+0x58>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3b01      	subs	r3, #1
 800636e:	4a0a      	ldr	r2, [pc, #40]	@ (8006398 <prvCheckTasksWaitingTermination+0x58>)
 8006370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006372:	f000 ff0b 	bl	800718c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f000 f810 	bl	800639c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800637c:	4b06      	ldr	r3, [pc, #24]	@ (8006398 <prvCheckTasksWaitingTermination+0x58>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e1      	bne.n	8006348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000e4c 	.word	0x20000e4c
 8006394:	20000e78 	.word	0x20000e78
 8006398:	20000e60 	.word	0x20000e60

0800639c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3354      	adds	r3, #84	@ 0x54
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fa15 	bl	80077d8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d108      	bne.n	80063ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	4618      	mov	r0, r3
 80063be:	f001 f8a3 	bl	8007508 <vPortFree>
				vPortFree( pxTCB );
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f001 f8a0 	bl	8007508 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063c8:	e019      	b.n	80063fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d103      	bne.n	80063dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 f897 	bl	8007508 <vPortFree>
	}
 80063da:	e010      	b.n	80063fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d00b      	beq.n	80063fe <prvDeleteTCB+0x62>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60fb      	str	r3, [r7, #12]
}
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <prvDeleteTCB+0x5e>
	}
 80063fe:	bf00      	nop
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800640e:	4b0c      	ldr	r3, [pc, #48]	@ (8006440 <prvResetNextTaskUnblockTime+0x38>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d104      	bne.n	8006422 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006418:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <prvResetNextTaskUnblockTime+0x3c>)
 800641a:	f04f 32ff 	mov.w	r2, #4294967295
 800641e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006420:	e008      	b.n	8006434 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006422:	4b07      	ldr	r3, [pc, #28]	@ (8006440 <prvResetNextTaskUnblockTime+0x38>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	4a04      	ldr	r2, [pc, #16]	@ (8006444 <prvResetNextTaskUnblockTime+0x3c>)
 8006432:	6013      	str	r3, [r2, #0]
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000e30 	.word	0x20000e30
 8006444:	20000e98 	.word	0x20000e98

08006448 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800644e:	4b0b      	ldr	r3, [pc, #44]	@ (800647c <xTaskGetSchedulerState+0x34>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006456:	2301      	movs	r3, #1
 8006458:	607b      	str	r3, [r7, #4]
 800645a:	e008      	b.n	800646e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800645c:	4b08      	ldr	r3, [pc, #32]	@ (8006480 <xTaskGetSchedulerState+0x38>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006464:	2302      	movs	r3, #2
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	e001      	b.n	800646e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800646a:	2300      	movs	r3, #0
 800646c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800646e:	687b      	ldr	r3, [r7, #4]
	}
 8006470:	4618      	mov	r0, r3
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20000e84 	.word	0x20000e84
 8006480:	20000ea0 	.word	0x20000ea0

08006484 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d051      	beq.n	800653e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649e:	4b2a      	ldr	r3, [pc, #168]	@ (8006548 <xTaskPriorityInherit+0xc4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d241      	bcs.n	800652c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	db06      	blt.n	80064be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b0:	4b25      	ldr	r3, [pc, #148]	@ (8006548 <xTaskPriorityInherit+0xc4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6959      	ldr	r1, [r3, #20]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4a1f      	ldr	r2, [pc, #124]	@ (800654c <xTaskPriorityInherit+0xc8>)
 80064d0:	4413      	add	r3, r2
 80064d2:	4299      	cmp	r1, r3
 80064d4:	d122      	bne.n	800651c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	3304      	adds	r3, #4
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fe faa2 	bl	8004a24 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064e0:	4b19      	ldr	r3, [pc, #100]	@ (8006548 <xTaskPriorityInherit+0xc4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ee:	4b18      	ldr	r3, [pc, #96]	@ (8006550 <xTaskPriorityInherit+0xcc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d903      	bls.n	80064fe <xTaskPriorityInherit+0x7a>
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fa:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <xTaskPriorityInherit+0xcc>)
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4a10      	ldr	r2, [pc, #64]	@ (800654c <xTaskPriorityInherit+0xc8>)
 800650c:	441a      	add	r2, r3
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	3304      	adds	r3, #4
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7fe fa28 	bl	800496a <vListInsertEnd>
 800651a:	e004      	b.n	8006526 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800651c:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <xTaskPriorityInherit+0xc4>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006526:	2301      	movs	r3, #1
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e008      	b.n	800653e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <xTaskPriorityInherit+0xc4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006536:	429a      	cmp	r2, r3
 8006538:	d201      	bcs.n	800653e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800653a:	2301      	movs	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800653e:	68fb      	ldr	r3, [r7, #12]
	}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	200009a4 	.word	0x200009a4
 800654c:	200009a8 	.word	0x200009a8
 8006550:	20000e80 	.word	0x20000e80

08006554 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006560:	2300      	movs	r3, #0
 8006562:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d058      	beq.n	800661c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800656a:	4b2f      	ldr	r3, [pc, #188]	@ (8006628 <xTaskPriorityDisinherit+0xd4>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	429a      	cmp	r2, r3
 8006572:	d00b      	beq.n	800658c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	60fb      	str	r3, [r7, #12]
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	e7fd      	b.n	8006588 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10b      	bne.n	80065ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	60bb      	str	r3, [r7, #8]
}
 80065a6:	bf00      	nop
 80065a8:	bf00      	nop
 80065aa:	e7fd      	b.n	80065a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b0:	1e5a      	subs	r2, r3, #1
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065be:	429a      	cmp	r2, r3
 80065c0:	d02c      	beq.n	800661c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d128      	bne.n	800661c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	3304      	adds	r3, #4
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fa28 	bl	8004a24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ec:	4b0f      	ldr	r3, [pc, #60]	@ (800662c <xTaskPriorityDisinherit+0xd8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d903      	bls.n	80065fc <xTaskPriorityDisinherit+0xa8>
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	4a0c      	ldr	r2, [pc, #48]	@ (800662c <xTaskPriorityDisinherit+0xd8>)
 80065fa:	6013      	str	r3, [r2, #0]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4a09      	ldr	r2, [pc, #36]	@ (8006630 <xTaskPriorityDisinherit+0xdc>)
 800660a:	441a      	add	r2, r3
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f7fe f9a9 	bl	800496a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800661c:	697b      	ldr	r3, [r7, #20]
	}
 800661e:	4618      	mov	r0, r3
 8006620:	3718      	adds	r7, #24
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	200009a4 	.word	0x200009a4
 800662c:	20000e80 	.word	0x20000e80
 8006630:	200009a8 	.word	0x200009a8

08006634 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006634:	b580      	push	{r7, lr}
 8006636:	b088      	sub	sp, #32
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006642:	2301      	movs	r3, #1
 8006644:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d06c      	beq.n	8006726 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10b      	bne.n	800666c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60fb      	str	r3, [r7, #12]
}
 8006666:	bf00      	nop
 8006668:	bf00      	nop
 800666a:	e7fd      	b.n	8006668 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	429a      	cmp	r2, r3
 8006674:	d902      	bls.n	800667c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	61fb      	str	r3, [r7, #28]
 800667a:	e002      	b.n	8006682 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006680:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	69fa      	ldr	r2, [r7, #28]
 8006688:	429a      	cmp	r2, r3
 800668a:	d04c      	beq.n	8006726 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	429a      	cmp	r2, r3
 8006694:	d147      	bne.n	8006726 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006696:	4b26      	ldr	r3, [pc, #152]	@ (8006730 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	429a      	cmp	r2, r3
 800669e:	d10b      	bne.n	80066b8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80066a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	60bb      	str	r3, [r7, #8]
}
 80066b2:	bf00      	nop
 80066b4:	bf00      	nop
 80066b6:	e7fd      	b.n	80066b4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	db04      	blt.n	80066d6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	6959      	ldr	r1, [r3, #20]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4a13      	ldr	r2, [pc, #76]	@ (8006734 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066e6:	4413      	add	r3, r2
 80066e8:	4299      	cmp	r1, r3
 80066ea:	d11c      	bne.n	8006726 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe f997 	bl	8004a24 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fa:	4b0f      	ldr	r3, [pc, #60]	@ (8006738 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d903      	bls.n	800670a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006706:	4a0c      	ldr	r2, [pc, #48]	@ (8006738 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4a07      	ldr	r2, [pc, #28]	@ (8006734 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006718:	441a      	add	r2, r3
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fe f922 	bl	800496a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006726:	bf00      	nop
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200009a4 	.word	0x200009a4
 8006734:	200009a8 	.word	0x200009a8
 8006738:	20000e80 	.word	0x20000e80

0800673c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006740:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <pvTaskIncrementMutexHeldCount+0x24>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006748:	4b05      	ldr	r3, [pc, #20]	@ (8006760 <pvTaskIncrementMutexHeldCount+0x24>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800674e:	3201      	adds	r2, #1
 8006750:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006752:	4b03      	ldr	r3, [pc, #12]	@ (8006760 <pvTaskIncrementMutexHeldCount+0x24>)
 8006754:	681b      	ldr	r3, [r3, #0]
	}
 8006756:	4618      	mov	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	200009a4 	.word	0x200009a4

08006764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800676e:	4b21      	ldr	r3, [pc, #132]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006774:	4b20      	ldr	r3, [pc, #128]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3304      	adds	r3, #4
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe f952 	bl	8004a24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d10a      	bne.n	800679e <prvAddCurrentTaskToDelayedList+0x3a>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678e:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4819      	ldr	r0, [pc, #100]	@ (80067fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006798:	f7fe f8e7 	bl	800496a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800679c:	e026      	b.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067a6:	4b14      	ldr	r3, [pc, #80]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d209      	bcs.n	80067ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067b6:	4b12      	ldr	r3, [pc, #72]	@ (8006800 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fe f8f5 	bl	80049b2 <vListInsert>
}
 80067c8:	e010      	b.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006804 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fe f8eb 	bl	80049b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d202      	bcs.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067e6:	4a08      	ldr	r2, [pc, #32]	@ (8006808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6013      	str	r3, [r2, #0]
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000e7c 	.word	0x20000e7c
 80067f8:	200009a4 	.word	0x200009a4
 80067fc:	20000e64 	.word	0x20000e64
 8006800:	20000e34 	.word	0x20000e34
 8006804:	20000e30 	.word	0x20000e30
 8006808:	20000e98 	.word	0x20000e98

0800680c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	@ 0x28
 8006810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006816:	f000 fb13 	bl	8006e40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800681a:	4b1d      	ldr	r3, [pc, #116]	@ (8006890 <xTimerCreateTimerTask+0x84>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d021      	beq.n	8006866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800682a:	1d3a      	adds	r2, r7, #4
 800682c:	f107 0108 	add.w	r1, r7, #8
 8006830:	f107 030c 	add.w	r3, r7, #12
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe f851 	bl	80048dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	9202      	str	r2, [sp, #8]
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	2302      	movs	r3, #2
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	460a      	mov	r2, r1
 800684c:	4911      	ldr	r1, [pc, #68]	@ (8006894 <xTimerCreateTimerTask+0x88>)
 800684e:	4812      	ldr	r0, [pc, #72]	@ (8006898 <xTimerCreateTimerTask+0x8c>)
 8006850:	f7fe ffa2 	bl	8005798 <xTaskCreateStatic>
 8006854:	4603      	mov	r3, r0
 8006856:	4a11      	ldr	r2, [pc, #68]	@ (800689c <xTimerCreateTimerTask+0x90>)
 8006858:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800685a:	4b10      	ldr	r3, [pc, #64]	@ (800689c <xTimerCreateTimerTask+0x90>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006862:	2301      	movs	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10b      	bne.n	8006884 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	613b      	str	r3, [r7, #16]
}
 800687e:	bf00      	nop
 8006880:	bf00      	nop
 8006882:	e7fd      	b.n	8006880 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006884:	697b      	ldr	r3, [r7, #20]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000ed4 	.word	0x20000ed4
 8006894:	08008220 	.word	0x08008220
 8006898:	080069d9 	.word	0x080069d9
 800689c:	20000ed8 	.word	0x20000ed8

080068a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	@ 0x28
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	623b      	str	r3, [r7, #32]
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	e7fd      	b.n	80068cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068d0:	4b19      	ldr	r3, [pc, #100]	@ (8006938 <xTimerGenericCommand+0x98>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d02a      	beq.n	800692e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2b05      	cmp	r3, #5
 80068e8:	dc18      	bgt.n	800691c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068ea:	f7ff fdad 	bl	8006448 <xTaskGetSchedulerState>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d109      	bne.n	8006908 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068f4:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <xTimerGenericCommand+0x98>)
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	f107 0110 	add.w	r1, r7, #16
 80068fc:	2300      	movs	r3, #0
 80068fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006900:	f7fe fa32 	bl	8004d68 <xQueueGenericSend>
 8006904:	6278      	str	r0, [r7, #36]	@ 0x24
 8006906:	e012      	b.n	800692e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006908:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <xTimerGenericCommand+0x98>)
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	f107 0110 	add.w	r1, r7, #16
 8006910:	2300      	movs	r3, #0
 8006912:	2200      	movs	r2, #0
 8006914:	f7fe fa28 	bl	8004d68 <xQueueGenericSend>
 8006918:	6278      	str	r0, [r7, #36]	@ 0x24
 800691a:	e008      	b.n	800692e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800691c:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <xTimerGenericCommand+0x98>)
 800691e:	6818      	ldr	r0, [r3, #0]
 8006920:	f107 0110 	add.w	r1, r7, #16
 8006924:	2300      	movs	r3, #0
 8006926:	683a      	ldr	r2, [r7, #0]
 8006928:	f7fe fb20 	bl	8004f6c <xQueueGenericSendFromISR>
 800692c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006930:	4618      	mov	r0, r3
 8006932:	3728      	adds	r7, #40	@ 0x28
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000ed4 	.word	0x20000ed4

0800693c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af02      	add	r7, sp, #8
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006946:	4b23      	ldr	r3, [pc, #140]	@ (80069d4 <prvProcessExpiredTimer+0x98>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	3304      	adds	r3, #4
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe f865 	bl	8004a24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d023      	beq.n	80069b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	699a      	ldr	r2, [r3, #24]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	18d1      	adds	r1, r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	6978      	ldr	r0, [r7, #20]
 8006976:	f000 f8d5 	bl	8006b24 <prvInsertTimerInActiveList>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d020      	beq.n	80069c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006980:	2300      	movs	r3, #0
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	2300      	movs	r3, #0
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	2100      	movs	r1, #0
 800698a:	6978      	ldr	r0, [r7, #20]
 800698c:	f7ff ff88 	bl	80068a0 <xTimerGenericCommand>
 8006990:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d114      	bne.n	80069c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	60fb      	str	r3, [r7, #12]
}
 80069aa:	bf00      	nop
 80069ac:	bf00      	nop
 80069ae:	e7fd      	b.n	80069ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	6978      	ldr	r0, [r7, #20]
 80069c8:	4798      	blx	r3
}
 80069ca:	bf00      	nop
 80069cc:	3718      	adds	r7, #24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20000ecc 	.word	0x20000ecc

080069d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069e0:	f107 0308 	add.w	r3, r7, #8
 80069e4:	4618      	mov	r0, r3
 80069e6:	f000 f859 	bl	8006a9c <prvGetNextExpireTime>
 80069ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	4619      	mov	r1, r3
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f000 f805 	bl	8006a00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069f6:	f000 f8d7 	bl	8006ba8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069fa:	bf00      	nop
 80069fc:	e7f0      	b.n	80069e0 <prvTimerTask+0x8>
	...

08006a00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a0a:	f7ff f929 	bl	8005c60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 f866 	bl	8006ae4 <prvSampleTimeNow>
 8006a18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d130      	bne.n	8006a82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10a      	bne.n	8006a3c <prvProcessTimerOrBlockTask+0x3c>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d806      	bhi.n	8006a3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a2e:	f7ff f925 	bl	8005c7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f7ff ff81 	bl	800693c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a3a:	e024      	b.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a42:	4b13      	ldr	r3, [pc, #76]	@ (8006a90 <prvProcessTimerOrBlockTask+0x90>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <prvProcessTimerOrBlockTask+0x50>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <prvProcessTimerOrBlockTask+0x52>
 8006a50:	2300      	movs	r3, #0
 8006a52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a54:	4b0f      	ldr	r3, [pc, #60]	@ (8006a94 <prvProcessTimerOrBlockTask+0x94>)
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	1ad3      	subs	r3, r2, r3
 8006a5e:	683a      	ldr	r2, [r7, #0]
 8006a60:	4619      	mov	r1, r3
 8006a62:	f7fe fe65 	bl	8005730 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a66:	f7ff f909 	bl	8005c7c <xTaskResumeAll>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10a      	bne.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a70:	4b09      	ldr	r3, [pc, #36]	@ (8006a98 <prvProcessTimerOrBlockTask+0x98>)
 8006a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	f3bf 8f6f 	isb	sy
}
 8006a80:	e001      	b.n	8006a86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a82:	f7ff f8fb 	bl	8005c7c <xTaskResumeAll>
}
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000ed0 	.word	0x20000ed0
 8006a94:	20000ed4 	.word	0x20000ed4
 8006a98:	e000ed04 	.word	0xe000ed04

08006a9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae0 <prvGetNextExpireTime+0x44>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <prvGetNextExpireTime+0x16>
 8006aae:	2201      	movs	r2, #1
 8006ab0:	e000      	b.n	8006ab4 <prvGetNextExpireTime+0x18>
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d105      	bne.n	8006acc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ac0:	4b07      	ldr	r3, [pc, #28]	@ (8006ae0 <prvGetNextExpireTime+0x44>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e001      	b.n	8006ad0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000ecc 	.word	0x20000ecc

08006ae4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006aec:	f7ff f964 	bl	8005db8 <xTaskGetTickCount>
 8006af0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <prvSampleTimeNow+0x3c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d205      	bcs.n	8006b08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006afc:	f000 f93a 	bl	8006d74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e002      	b.n	8006b0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b0e:	4a04      	ldr	r2, [pc, #16]	@ (8006b20 <prvSampleTimeNow+0x3c>)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b14:	68fb      	ldr	r3, [r7, #12]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3710      	adds	r7, #16
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20000edc 	.word	0x20000edc

08006b24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d812      	bhi.n	8006b70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d302      	bcc.n	8006b5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e01b      	b.n	8006b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b5e:	4b10      	ldr	r3, [pc, #64]	@ (8006ba0 <prvInsertTimerInActiveList+0x7c>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f7fd ff22 	bl	80049b2 <vListInsert>
 8006b6e:	e012      	b.n	8006b96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d206      	bcs.n	8006b86 <prvInsertTimerInActiveList+0x62>
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d302      	bcc.n	8006b86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b80:	2301      	movs	r3, #1
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e007      	b.n	8006b96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b86:	4b07      	ldr	r3, [pc, #28]	@ (8006ba4 <prvInsertTimerInActiveList+0x80>)
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	4610      	mov	r0, r2
 8006b92:	f7fd ff0e 	bl	80049b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b96:	697b      	ldr	r3, [r7, #20]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000ed0 	.word	0x20000ed0
 8006ba4:	20000ecc 	.word	0x20000ecc

08006ba8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08e      	sub	sp, #56	@ 0x38
 8006bac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bae:	e0ce      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da19      	bge.n	8006bea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bb6:	1d3b      	adds	r3, r7, #4
 8006bb8:	3304      	adds	r3, #4
 8006bba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10b      	bne.n	8006bda <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	61fb      	str	r3, [r7, #28]
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be0:	6850      	ldr	r0, [r2, #4]
 8006be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006be4:	6892      	ldr	r2, [r2, #8]
 8006be6:	4611      	mov	r1, r2
 8006be8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f2c0 80ae 	blt.w	8006d4e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c00:	3304      	adds	r3, #4
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fd ff0e 	bl	8004a24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c08:	463b      	mov	r3, r7
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7ff ff6a 	bl	8006ae4 <prvSampleTimeNow>
 8006c10:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b09      	cmp	r3, #9
 8006c16:	f200 8097 	bhi.w	8006d48 <prvProcessReceivedCommands+0x1a0>
 8006c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c20 <prvProcessReceivedCommands+0x78>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c49 	.word	0x08006c49
 8006c24:	08006c49 	.word	0x08006c49
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006cbf 	.word	0x08006cbf
 8006c30:	08006cd3 	.word	0x08006cd3
 8006c34:	08006d1f 	.word	0x08006d1f
 8006c38:	08006c49 	.word	0x08006c49
 8006c3c:	08006c49 	.word	0x08006c49
 8006c40:	08006cbf 	.word	0x08006cbf
 8006c44:	08006cd3 	.word	0x08006cd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c4e:	f043 0301 	orr.w	r3, r3, #1
 8006c52:	b2da      	uxtb	r2, r3
 8006c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	18d1      	adds	r1, r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c68:	f7ff ff5c 	bl	8006b24 <prvInsertTimerInActiveList>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d06c      	beq.n	8006d4c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c80:	f003 0304 	and.w	r3, r3, #4
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d061      	beq.n	8006d4c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	441a      	add	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	2300      	movs	r3, #0
 8006c96:	2100      	movs	r1, #0
 8006c98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c9a:	f7ff fe01 	bl	80068a0 <xTimerGenericCommand>
 8006c9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d152      	bne.n	8006d4c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	61bb      	str	r3, [r7, #24]
}
 8006cb8:	bf00      	nop
 8006cba:	bf00      	nop
 8006cbc:	e7fd      	b.n	8006cba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cc4:	f023 0301 	bic.w	r3, r3, #1
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cd0:	e03d      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cd8:	f043 0301 	orr.w	r3, r3, #1
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10b      	bne.n	8006d0a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	617b      	str	r3, [r7, #20]
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop
 8006d08:	e7fd      	b.n	8006d06 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d0c:	699a      	ldr	r2, [r3, #24]
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	18d1      	adds	r1, r2, r3
 8006d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d18:	f7ff ff04 	bl	8006b24 <prvInsertTimerInActiveList>
					break;
 8006d1c:	e017      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d2e:	f000 fbeb 	bl	8007508 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d32:	e00c      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	b2da      	uxtb	r2, r3
 8006d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d46:	e002      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d48:	bf00      	nop
 8006d4a:	e000      	b.n	8006d4e <prvProcessReceivedCommands+0x1a6>
					break;
 8006d4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d4e:	4b08      	ldr	r3, [pc, #32]	@ (8006d70 <prvProcessReceivedCommands+0x1c8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	1d39      	adds	r1, r7, #4
 8006d54:	2200      	movs	r2, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe f9a6 	bl	80050a8 <xQueueReceive>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f47f af26 	bne.w	8006bb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3730      	adds	r7, #48	@ 0x30
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000ed4 	.word	0x20000ed4

08006d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d7a:	e049      	b.n	8006e10 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d86:	4b2c      	ldr	r3, [pc, #176]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fd fe45 	bl	8004a24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d02f      	beq.n	8006e10 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4413      	add	r3, r2
 8006db8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d90e      	bls.n	8006de0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dce:	4b1a      	ldr	r3, [pc, #104]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f7fd fdea 	bl	80049b2 <vListInsert>
 8006dde:	e017      	b.n	8006e10 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006de0:	2300      	movs	r3, #0
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	2100      	movs	r1, #0
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fd58 	bl	80068a0 <xTimerGenericCommand>
 8006df0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	603b      	str	r3, [r7, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	bf00      	nop
 8006e0e:	e7fd      	b.n	8006e0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e10:	4b09      	ldr	r3, [pc, #36]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1b0      	bne.n	8006d7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e20:	4b06      	ldr	r3, [pc, #24]	@ (8006e3c <prvSwitchTimerLists+0xc8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a04      	ldr	r2, [pc, #16]	@ (8006e38 <prvSwitchTimerLists+0xc4>)
 8006e26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e28:	4a04      	ldr	r2, [pc, #16]	@ (8006e3c <prvSwitchTimerLists+0xc8>)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	6013      	str	r3, [r2, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000ecc 	.word	0x20000ecc
 8006e3c:	20000ed0 	.word	0x20000ed0

08006e40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e46:	f000 f96f 	bl	8007128 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e4a:	4b15      	ldr	r3, [pc, #84]	@ (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d120      	bne.n	8006e94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e52:	4814      	ldr	r0, [pc, #80]	@ (8006ea4 <prvCheckForValidListAndQueue+0x64>)
 8006e54:	f7fd fd5c 	bl	8004910 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e58:	4813      	ldr	r0, [pc, #76]	@ (8006ea8 <prvCheckForValidListAndQueue+0x68>)
 8006e5a:	f7fd fd59 	bl	8004910 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e5e:	4b13      	ldr	r3, [pc, #76]	@ (8006eac <prvCheckForValidListAndQueue+0x6c>)
 8006e60:	4a10      	ldr	r2, [pc, #64]	@ (8006ea4 <prvCheckForValidListAndQueue+0x64>)
 8006e62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e64:	4b12      	ldr	r3, [pc, #72]	@ (8006eb0 <prvCheckForValidListAndQueue+0x70>)
 8006e66:	4a10      	ldr	r2, [pc, #64]	@ (8006ea8 <prvCheckForValidListAndQueue+0x68>)
 8006e68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4b11      	ldr	r3, [pc, #68]	@ (8006eb4 <prvCheckForValidListAndQueue+0x74>)
 8006e70:	4a11      	ldr	r2, [pc, #68]	@ (8006eb8 <prvCheckForValidListAndQueue+0x78>)
 8006e72:	2110      	movs	r1, #16
 8006e74:	200a      	movs	r0, #10
 8006e76:	f7fd fe69 	bl	8004b4c <xQueueGenericCreateStatic>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	4a08      	ldr	r2, [pc, #32]	@ (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e80:	4b07      	ldr	r3, [pc, #28]	@ (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e88:	4b05      	ldr	r3, [pc, #20]	@ (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	490b      	ldr	r1, [pc, #44]	@ (8006ebc <prvCheckForValidListAndQueue+0x7c>)
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fc24 	bl	80056dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e94:	f000 f97a 	bl	800718c <vPortExitCritical>
}
 8006e98:	bf00      	nop
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000ed4 	.word	0x20000ed4
 8006ea4:	20000ea4 	.word	0x20000ea4
 8006ea8:	20000eb8 	.word	0x20000eb8
 8006eac:	20000ecc 	.word	0x20000ecc
 8006eb0:	20000ed0 	.word	0x20000ed0
 8006eb4:	20000f80 	.word	0x20000f80
 8006eb8:	20000ee0 	.word	0x20000ee0
 8006ebc:	08008228 	.word	0x08008228

08006ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b04      	subs	r3, #4
 8006ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f023 0201 	bic.w	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b04      	subs	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f24 <pxPortInitialiseStack+0x64>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b14      	subs	r3, #20
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f06f 0202 	mvn.w	r2, #2
 8006f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3b20      	subs	r3, #32
 8006f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	08006f29 	.word	0x08006f29

08006f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f32:	4b13      	ldr	r3, [pc, #76]	@ (8006f80 <prvTaskExitError+0x58>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d00b      	beq.n	8006f54 <prvTaskExitError+0x2c>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	e7fd      	b.n	8006f50 <prvTaskExitError+0x28>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60bb      	str	r3, [r7, #8]
}
 8006f66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f68:	bf00      	nop
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d0fc      	beq.n	8006f6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f70:	bf00      	nop
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	2000000c 	.word	0x2000000c
	...

08006f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f90:	4b07      	ldr	r3, [pc, #28]	@ (8006fb0 <pxCurrentTCBConst2>)
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	6808      	ldr	r0, [r1, #0]
 8006f96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9a:	f380 8809 	msr	PSP, r0
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8811 	msr	BASEPRI, r0
 8006faa:	4770      	bx	lr
 8006fac:	f3af 8000 	nop.w

08006fb0 <pxCurrentTCBConst2>:
 8006fb0:	200009a4 	.word	0x200009a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop

08006fb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fb8:	4808      	ldr	r0, [pc, #32]	@ (8006fdc <prvPortStartFirstTask+0x24>)
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	6800      	ldr	r0, [r0, #0]
 8006fbe:	f380 8808 	msr	MSP, r0
 8006fc2:	f04f 0000 	mov.w	r0, #0
 8006fc6:	f380 8814 	msr	CONTROL, r0
 8006fca:	b662      	cpsie	i
 8006fcc:	b661      	cpsie	f
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	df00      	svc	0
 8006fd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fda:	bf00      	nop
 8006fdc:	e000ed08 	.word	0xe000ed08

08006fe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fe6:	4b47      	ldr	r3, [pc, #284]	@ (8007104 <xPortStartScheduler+0x124>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a47      	ldr	r2, [pc, #284]	@ (8007108 <xPortStartScheduler+0x128>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10b      	bne.n	8007008 <xPortStartScheduler+0x28>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	613b      	str	r3, [r7, #16]
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	e7fd      	b.n	8007004 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007008:	4b3e      	ldr	r3, [pc, #248]	@ (8007104 <xPortStartScheduler+0x124>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a3f      	ldr	r2, [pc, #252]	@ (800710c <xPortStartScheduler+0x12c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10b      	bne.n	800702a <xPortStartScheduler+0x4a>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	60fb      	str	r3, [r7, #12]
}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	e7fd      	b.n	8007026 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800702a:	4b39      	ldr	r3, [pc, #228]	@ (8007110 <xPortStartScheduler+0x130>)
 800702c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	22ff      	movs	r2, #255	@ 0xff
 800703a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800704c:	b2da      	uxtb	r2, r3
 800704e:	4b31      	ldr	r3, [pc, #196]	@ (8007114 <xPortStartScheduler+0x134>)
 8007050:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007052:	4b31      	ldr	r3, [pc, #196]	@ (8007118 <xPortStartScheduler+0x138>)
 8007054:	2207      	movs	r2, #7
 8007056:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007058:	e009      	b.n	800706e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800705a:	4b2f      	ldr	r3, [pc, #188]	@ (8007118 <xPortStartScheduler+0x138>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3b01      	subs	r3, #1
 8007060:	4a2d      	ldr	r2, [pc, #180]	@ (8007118 <xPortStartScheduler+0x138>)
 8007062:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007064:	78fb      	ldrb	r3, [r7, #3]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	005b      	lsls	r3, r3, #1
 800706a:	b2db      	uxtb	r3, r3
 800706c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007076:	2b80      	cmp	r3, #128	@ 0x80
 8007078:	d0ef      	beq.n	800705a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800707a:	4b27      	ldr	r3, [pc, #156]	@ (8007118 <xPortStartScheduler+0x138>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f1c3 0307 	rsb	r3, r3, #7
 8007082:	2b04      	cmp	r3, #4
 8007084:	d00b      	beq.n	800709e <xPortStartScheduler+0xbe>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	60bb      	str	r3, [r7, #8]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800709e:	4b1e      	ldr	r3, [pc, #120]	@ (8007118 <xPortStartScheduler+0x138>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	021b      	lsls	r3, r3, #8
 80070a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007118 <xPortStartScheduler+0x138>)
 80070a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007118 <xPortStartScheduler+0x138>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070b0:	4a19      	ldr	r2, [pc, #100]	@ (8007118 <xPortStartScheduler+0x138>)
 80070b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070bc:	4b17      	ldr	r3, [pc, #92]	@ (800711c <xPortStartScheduler+0x13c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a16      	ldr	r2, [pc, #88]	@ (800711c <xPortStartScheduler+0x13c>)
 80070c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070c8:	4b14      	ldr	r3, [pc, #80]	@ (800711c <xPortStartScheduler+0x13c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a13      	ldr	r2, [pc, #76]	@ (800711c <xPortStartScheduler+0x13c>)
 80070ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070d4:	f000 f8da 	bl	800728c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070d8:	4b11      	ldr	r3, [pc, #68]	@ (8007120 <xPortStartScheduler+0x140>)
 80070da:	2200      	movs	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070de:	f000 f8f9 	bl	80072d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070e2:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <xPortStartScheduler+0x144>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007124 <xPortStartScheduler+0x144>)
 80070e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070ee:	f7ff ff63 	bl	8006fb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070f2:	f7fe ff2b 	bl	8005f4c <vTaskSwitchContext>
	prvTaskExitError();
 80070f6:	f7ff ff17 	bl	8006f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	e000ed00 	.word	0xe000ed00
 8007108:	410fc271 	.word	0x410fc271
 800710c:	410fc270 	.word	0x410fc270
 8007110:	e000e400 	.word	0xe000e400
 8007114:	20000fd0 	.word	0x20000fd0
 8007118:	20000fd4 	.word	0x20000fd4
 800711c:	e000ed20 	.word	0xe000ed20
 8007120:	2000000c 	.word	0x2000000c
 8007124:	e000ef34 	.word	0xe000ef34

08007128 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	607b      	str	r3, [r7, #4]
}
 8007140:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007142:	4b10      	ldr	r3, [pc, #64]	@ (8007184 <vPortEnterCritical+0x5c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3301      	adds	r3, #1
 8007148:	4a0e      	ldr	r2, [pc, #56]	@ (8007184 <vPortEnterCritical+0x5c>)
 800714a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800714c:	4b0d      	ldr	r3, [pc, #52]	@ (8007184 <vPortEnterCritical+0x5c>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d110      	bne.n	8007176 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007154:	4b0c      	ldr	r3, [pc, #48]	@ (8007188 <vPortEnterCritical+0x60>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <vPortEnterCritical+0x4e>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007162:	f383 8811 	msr	BASEPRI, r3
 8007166:	f3bf 8f6f 	isb	sy
 800716a:	f3bf 8f4f 	dsb	sy
 800716e:	603b      	str	r3, [r7, #0]
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	e7fd      	b.n	8007172 <vPortEnterCritical+0x4a>
	}
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	2000000c 	.word	0x2000000c
 8007188:	e000ed04 	.word	0xe000ed04

0800718c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007192:	4b12      	ldr	r3, [pc, #72]	@ (80071dc <vPortExitCritical+0x50>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10b      	bne.n	80071b2 <vPortExitCritical+0x26>
	__asm volatile
 800719a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719e:	f383 8811 	msr	BASEPRI, r3
 80071a2:	f3bf 8f6f 	isb	sy
 80071a6:	f3bf 8f4f 	dsb	sy
 80071aa:	607b      	str	r3, [r7, #4]
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	e7fd      	b.n	80071ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071b2:	4b0a      	ldr	r3, [pc, #40]	@ (80071dc <vPortExitCritical+0x50>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3b01      	subs	r3, #1
 80071b8:	4a08      	ldr	r2, [pc, #32]	@ (80071dc <vPortExitCritical+0x50>)
 80071ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071bc:	4b07      	ldr	r3, [pc, #28]	@ (80071dc <vPortExitCritical+0x50>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d105      	bne.n	80071d0 <vPortExitCritical+0x44>
 80071c4:	2300      	movs	r3, #0
 80071c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f383 8811 	msr	BASEPRI, r3
}
 80071ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	2000000c 	.word	0x2000000c

080071e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071e0:	f3ef 8009 	mrs	r0, PSP
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	4b15      	ldr	r3, [pc, #84]	@ (8007240 <pxCurrentTCBConst>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	f01e 0f10 	tst.w	lr, #16
 80071f0:	bf08      	it	eq
 80071f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fa:	6010      	str	r0, [r2, #0]
 80071fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007200:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007204:	f380 8811 	msr	BASEPRI, r0
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f7fe fe9c 	bl	8005f4c <vTaskSwitchContext>
 8007214:	f04f 0000 	mov.w	r0, #0
 8007218:	f380 8811 	msr	BASEPRI, r0
 800721c:	bc09      	pop	{r0, r3}
 800721e:	6819      	ldr	r1, [r3, #0]
 8007220:	6808      	ldr	r0, [r1, #0]
 8007222:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007226:	f01e 0f10 	tst.w	lr, #16
 800722a:	bf08      	it	eq
 800722c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007230:	f380 8809 	msr	PSP, r0
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	f3af 8000 	nop.w

08007240 <pxCurrentTCBConst>:
 8007240:	200009a4 	.word	0x200009a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007244:	bf00      	nop
 8007246:	bf00      	nop

08007248 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	607b      	str	r3, [r7, #4]
}
 8007260:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007262:	f7fe fdb9 	bl	8005dd8 <xTaskIncrementTick>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d003      	beq.n	8007274 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800726c:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <xPortSysTickHandler+0x40>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	2300      	movs	r3, #0
 8007276:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f383 8811 	msr	BASEPRI, r3
}
 800727e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	e000ed04 	.word	0xe000ed04

0800728c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007290:	4b0b      	ldr	r3, [pc, #44]	@ (80072c0 <vPortSetupTimerInterrupt+0x34>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007296:	4b0b      	ldr	r3, [pc, #44]	@ (80072c4 <vPortSetupTimerInterrupt+0x38>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800729c:	4b0a      	ldr	r3, [pc, #40]	@ (80072c8 <vPortSetupTimerInterrupt+0x3c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a0a      	ldr	r2, [pc, #40]	@ (80072cc <vPortSetupTimerInterrupt+0x40>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	099b      	lsrs	r3, r3, #6
 80072a8:	4a09      	ldr	r2, [pc, #36]	@ (80072d0 <vPortSetupTimerInterrupt+0x44>)
 80072aa:	3b01      	subs	r3, #1
 80072ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072ae:	4b04      	ldr	r3, [pc, #16]	@ (80072c0 <vPortSetupTimerInterrupt+0x34>)
 80072b0:	2207      	movs	r2, #7
 80072b2:	601a      	str	r2, [r3, #0]
}
 80072b4:	bf00      	nop
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	e000e010 	.word	0xe000e010
 80072c4:	e000e018 	.word	0xe000e018
 80072c8:	20000000 	.word	0x20000000
 80072cc:	10624dd3 	.word	0x10624dd3
 80072d0:	e000e014 	.word	0xe000e014

080072d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072e4 <vPortEnableVFP+0x10>
 80072d8:	6801      	ldr	r1, [r0, #0]
 80072da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072de:	6001      	str	r1, [r0, #0]
 80072e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072e2:	bf00      	nop
 80072e4:	e000ed88 	.word	0xe000ed88

080072e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072ee:	f3ef 8305 	mrs	r3, IPSR
 80072f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2b0f      	cmp	r3, #15
 80072f8:	d915      	bls.n	8007326 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072fa:	4a18      	ldr	r2, [pc, #96]	@ (800735c <vPortValidateInterruptPriority+0x74>)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007304:	4b16      	ldr	r3, [pc, #88]	@ (8007360 <vPortValidateInterruptPriority+0x78>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	7afa      	ldrb	r2, [r7, #11]
 800730a:	429a      	cmp	r2, r3
 800730c:	d20b      	bcs.n	8007326 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
 8007322:	bf00      	nop
 8007324:	e7fd      	b.n	8007322 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007326:	4b0f      	ldr	r3, [pc, #60]	@ (8007364 <vPortValidateInterruptPriority+0x7c>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800732e:	4b0e      	ldr	r3, [pc, #56]	@ (8007368 <vPortValidateInterruptPriority+0x80>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	429a      	cmp	r2, r3
 8007334:	d90b      	bls.n	800734e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800733a:	f383 8811 	msr	BASEPRI, r3
 800733e:	f3bf 8f6f 	isb	sy
 8007342:	f3bf 8f4f 	dsb	sy
 8007346:	603b      	str	r3, [r7, #0]
}
 8007348:	bf00      	nop
 800734a:	bf00      	nop
 800734c:	e7fd      	b.n	800734a <vPortValidateInterruptPriority+0x62>
	}
 800734e:	bf00      	nop
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	e000e3f0 	.word	0xe000e3f0
 8007360:	20000fd0 	.word	0x20000fd0
 8007364:	e000ed0c 	.word	0xe000ed0c
 8007368:	20000fd4 	.word	0x20000fd4

0800736c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08a      	sub	sp, #40	@ 0x28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007374:	2300      	movs	r3, #0
 8007376:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007378:	f7fe fc72 	bl	8005c60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800737c:	4b5c      	ldr	r3, [pc, #368]	@ (80074f0 <pvPortMalloc+0x184>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d101      	bne.n	8007388 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007384:	f000 f924 	bl	80075d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007388:	4b5a      	ldr	r3, [pc, #360]	@ (80074f4 <pvPortMalloc+0x188>)
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4013      	ands	r3, r2
 8007390:	2b00      	cmp	r3, #0
 8007392:	f040 8095 	bne.w	80074c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01e      	beq.n	80073da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800739c:	2208      	movs	r2, #8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d015      	beq.n	80073da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f023 0307 	bic.w	r3, r3, #7
 80073b4:	3308      	adds	r3, #8
 80073b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <pvPortMalloc+0x6e>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	617b      	str	r3, [r7, #20]
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	e7fd      	b.n	80073d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d06f      	beq.n	80074c0 <pvPortMalloc+0x154>
 80073e0:	4b45      	ldr	r3, [pc, #276]	@ (80074f8 <pvPortMalloc+0x18c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	687a      	ldr	r2, [r7, #4]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d86a      	bhi.n	80074c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073ea:	4b44      	ldr	r3, [pc, #272]	@ (80074fc <pvPortMalloc+0x190>)
 80073ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073ee:	4b43      	ldr	r3, [pc, #268]	@ (80074fc <pvPortMalloc+0x190>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073f4:	e004      	b.n	8007400 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d903      	bls.n	8007412 <pvPortMalloc+0xa6>
 800740a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1f1      	bne.n	80073f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007412:	4b37      	ldr	r3, [pc, #220]	@ (80074f0 <pvPortMalloc+0x184>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007418:	429a      	cmp	r2, r3
 800741a:	d051      	beq.n	80074c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800741c:	6a3b      	ldr	r3, [r7, #32]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2208      	movs	r2, #8
 8007422:	4413      	add	r3, r2
 8007424:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	1ad2      	subs	r2, r2, r3
 8007436:	2308      	movs	r3, #8
 8007438:	005b      	lsls	r3, r3, #1
 800743a:	429a      	cmp	r2, r3
 800743c:	d920      	bls.n	8007480 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800743e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4413      	add	r3, r2
 8007444:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00b      	beq.n	8007468 <pvPortMalloc+0xfc>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	613b      	str	r3, [r7, #16]
}
 8007462:	bf00      	nop
 8007464:	bf00      	nop
 8007466:	e7fd      	b.n	8007464 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	1ad2      	subs	r2, r2, r3
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800747a:	69b8      	ldr	r0, [r7, #24]
 800747c:	f000 f90a 	bl	8007694 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007480:	4b1d      	ldr	r3, [pc, #116]	@ (80074f8 <pvPortMalloc+0x18c>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	4a1b      	ldr	r2, [pc, #108]	@ (80074f8 <pvPortMalloc+0x18c>)
 800748c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800748e:	4b1a      	ldr	r3, [pc, #104]	@ (80074f8 <pvPortMalloc+0x18c>)
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b1b      	ldr	r3, [pc, #108]	@ (8007500 <pvPortMalloc+0x194>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d203      	bcs.n	80074a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800749a:	4b17      	ldr	r3, [pc, #92]	@ (80074f8 <pvPortMalloc+0x18c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4a18      	ldr	r2, [pc, #96]	@ (8007500 <pvPortMalloc+0x194>)
 80074a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <pvPortMalloc+0x188>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	2200      	movs	r2, #0
 80074b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074b6:	4b13      	ldr	r3, [pc, #76]	@ (8007504 <pvPortMalloc+0x198>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	4a11      	ldr	r2, [pc, #68]	@ (8007504 <pvPortMalloc+0x198>)
 80074be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074c0:	f7fe fbdc 	bl	8005c7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d00b      	beq.n	80074e6 <pvPortMalloc+0x17a>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	60fb      	str	r3, [r7, #12]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <pvPortMalloc+0x176>
	return pvReturn;
 80074e6:	69fb      	ldr	r3, [r7, #28]
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3728      	adds	r7, #40	@ 0x28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	20005e00 	.word	0x20005e00
 80074f4:	20005e14 	.word	0x20005e14
 80074f8:	20005e04 	.word	0x20005e04
 80074fc:	20005df8 	.word	0x20005df8
 8007500:	20005e08 	.word	0x20005e08
 8007504:	20005e0c 	.word	0x20005e0c

08007508 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d04f      	beq.n	80075ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800751a:	2308      	movs	r3, #8
 800751c:	425b      	negs	r3, r3
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4413      	add	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	4b25      	ldr	r3, [pc, #148]	@ (80075c4 <vPortFree+0xbc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4013      	ands	r3, r2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d10b      	bne.n	800754e <vPortFree+0x46>
	__asm volatile
 8007536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753a:	f383 8811 	msr	BASEPRI, r3
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	60fb      	str	r3, [r7, #12]
}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	e7fd      	b.n	800754a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <vPortFree+0x66>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	60bb      	str	r3, [r7, #8]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	4b14      	ldr	r3, [pc, #80]	@ (80075c4 <vPortFree+0xbc>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4013      	ands	r3, r2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d01e      	beq.n	80075ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11a      	bne.n	80075ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	4b0e      	ldr	r3, [pc, #56]	@ (80075c4 <vPortFree+0xbc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	43db      	mvns	r3, r3
 800758e:	401a      	ands	r2, r3
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007594:	f7fe fb64 	bl	8005c60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	4b0a      	ldr	r3, [pc, #40]	@ (80075c8 <vPortFree+0xc0>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4413      	add	r3, r2
 80075a2:	4a09      	ldr	r2, [pc, #36]	@ (80075c8 <vPortFree+0xc0>)
 80075a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075a6:	6938      	ldr	r0, [r7, #16]
 80075a8:	f000 f874 	bl	8007694 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80075ac:	4b07      	ldr	r3, [pc, #28]	@ (80075cc <vPortFree+0xc4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3301      	adds	r3, #1
 80075b2:	4a06      	ldr	r2, [pc, #24]	@ (80075cc <vPortFree+0xc4>)
 80075b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075b6:	f7fe fb61 	bl	8005c7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075ba:	bf00      	nop
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	20005e14 	.word	0x20005e14
 80075c8:	20005e04 	.word	0x20005e04
 80075cc:	20005e10 	.word	0x20005e10

080075d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075d6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80075da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075dc:	4b27      	ldr	r3, [pc, #156]	@ (800767c <prvHeapInit+0xac>)
 80075de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00c      	beq.n	8007604 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3307      	adds	r3, #7
 80075ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0307 	bic.w	r3, r3, #7
 80075f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075f8:	68ba      	ldr	r2, [r7, #8]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	4a1f      	ldr	r2, [pc, #124]	@ (800767c <prvHeapInit+0xac>)
 8007600:	4413      	add	r3, r2
 8007602:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007608:	4a1d      	ldr	r2, [pc, #116]	@ (8007680 <prvHeapInit+0xb0>)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800760e:	4b1c      	ldr	r3, [pc, #112]	@ (8007680 <prvHeapInit+0xb0>)
 8007610:	2200      	movs	r2, #0
 8007612:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4413      	add	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800761c:	2208      	movs	r2, #8
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	1a9b      	subs	r3, r3, r2
 8007622:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f023 0307 	bic.w	r3, r3, #7
 800762a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a15      	ldr	r2, [pc, #84]	@ (8007684 <prvHeapInit+0xb4>)
 8007630:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007632:	4b14      	ldr	r3, [pc, #80]	@ (8007684 <prvHeapInit+0xb4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2200      	movs	r2, #0
 8007638:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800763a:	4b12      	ldr	r3, [pc, #72]	@ (8007684 <prvHeapInit+0xb4>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2200      	movs	r2, #0
 8007640:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	1ad2      	subs	r2, r2, r3
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007650:	4b0c      	ldr	r3, [pc, #48]	@ (8007684 <prvHeapInit+0xb4>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	4a0a      	ldr	r2, [pc, #40]	@ (8007688 <prvHeapInit+0xb8>)
 800765e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	4a09      	ldr	r2, [pc, #36]	@ (800768c <prvHeapInit+0xbc>)
 8007666:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007668:	4b09      	ldr	r3, [pc, #36]	@ (8007690 <prvHeapInit+0xc0>)
 800766a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800766e:	601a      	str	r2, [r3, #0]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	20000fd8 	.word	0x20000fd8
 8007680:	20005df8 	.word	0x20005df8
 8007684:	20005e00 	.word	0x20005e00
 8007688:	20005e08 	.word	0x20005e08
 800768c:	20005e04 	.word	0x20005e04
 8007690:	20005e14 	.word	0x20005e14

08007694 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800769c:	4b28      	ldr	r3, [pc, #160]	@ (8007740 <prvInsertBlockIntoFreeList+0xac>)
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	e002      	b.n	80076a8 <prvInsertBlockIntoFreeList+0x14>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d8f7      	bhi.n	80076a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	4413      	add	r3, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d108      	bne.n	80076d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	441a      	add	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d118      	bne.n	800771c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	4b15      	ldr	r3, [pc, #84]	@ (8007744 <prvInsertBlockIntoFreeList+0xb0>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d00d      	beq.n	8007712 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	441a      	add	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e008      	b.n	8007724 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007712:	4b0c      	ldr	r3, [pc, #48]	@ (8007744 <prvInsertBlockIntoFreeList+0xb0>)
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	e003      	b.n	8007724 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007724:	68fa      	ldr	r2, [r7, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	429a      	cmp	r2, r3
 800772a:	d002      	beq.n	8007732 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007732:	bf00      	nop
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	20005df8 	.word	0x20005df8
 8007744:	20005e00 	.word	0x20005e00

08007748 <siprintf>:
 8007748:	b40e      	push	{r1, r2, r3}
 800774a:	b500      	push	{lr}
 800774c:	b09c      	sub	sp, #112	@ 0x70
 800774e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007750:	9002      	str	r0, [sp, #8]
 8007752:	9006      	str	r0, [sp, #24]
 8007754:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007758:	4809      	ldr	r0, [pc, #36]	@ (8007780 <siprintf+0x38>)
 800775a:	9107      	str	r1, [sp, #28]
 800775c:	9104      	str	r1, [sp, #16]
 800775e:	4909      	ldr	r1, [pc, #36]	@ (8007784 <siprintf+0x3c>)
 8007760:	f853 2b04 	ldr.w	r2, [r3], #4
 8007764:	9105      	str	r1, [sp, #20]
 8007766:	6800      	ldr	r0, [r0, #0]
 8007768:	9301      	str	r3, [sp, #4]
 800776a:	a902      	add	r1, sp, #8
 800776c:	f000 fa18 	bl	8007ba0 <_svfiprintf_r>
 8007770:	9b02      	ldr	r3, [sp, #8]
 8007772:	2200      	movs	r2, #0
 8007774:	701a      	strb	r2, [r3, #0]
 8007776:	b01c      	add	sp, #112	@ 0x70
 8007778:	f85d eb04 	ldr.w	lr, [sp], #4
 800777c:	b003      	add	sp, #12
 800777e:	4770      	bx	lr
 8007780:	20000010 	.word	0x20000010
 8007784:	ffff0208 	.word	0xffff0208

08007788 <_vsiprintf_r>:
 8007788:	b500      	push	{lr}
 800778a:	b09b      	sub	sp, #108	@ 0x6c
 800778c:	9100      	str	r1, [sp, #0]
 800778e:	9104      	str	r1, [sp, #16]
 8007790:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007794:	9105      	str	r1, [sp, #20]
 8007796:	9102      	str	r1, [sp, #8]
 8007798:	4905      	ldr	r1, [pc, #20]	@ (80077b0 <_vsiprintf_r+0x28>)
 800779a:	9103      	str	r1, [sp, #12]
 800779c:	4669      	mov	r1, sp
 800779e:	f000 f9ff 	bl	8007ba0 <_svfiprintf_r>
 80077a2:	9b00      	ldr	r3, [sp, #0]
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
 80077a8:	b01b      	add	sp, #108	@ 0x6c
 80077aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80077ae:	bf00      	nop
 80077b0:	ffff0208 	.word	0xffff0208

080077b4 <vsiprintf>:
 80077b4:	4613      	mov	r3, r2
 80077b6:	460a      	mov	r2, r1
 80077b8:	4601      	mov	r1, r0
 80077ba:	4802      	ldr	r0, [pc, #8]	@ (80077c4 <vsiprintf+0x10>)
 80077bc:	6800      	ldr	r0, [r0, #0]
 80077be:	f7ff bfe3 	b.w	8007788 <_vsiprintf_r>
 80077c2:	bf00      	nop
 80077c4:	20000010 	.word	0x20000010

080077c8 <memset>:
 80077c8:	4402      	add	r2, r0
 80077ca:	4603      	mov	r3, r0
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d100      	bne.n	80077d2 <memset+0xa>
 80077d0:	4770      	bx	lr
 80077d2:	f803 1b01 	strb.w	r1, [r3], #1
 80077d6:	e7f9      	b.n	80077cc <memset+0x4>

080077d8 <_reclaim_reent>:
 80077d8:	4b29      	ldr	r3, [pc, #164]	@ (8007880 <_reclaim_reent+0xa8>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4283      	cmp	r3, r0
 80077de:	b570      	push	{r4, r5, r6, lr}
 80077e0:	4604      	mov	r4, r0
 80077e2:	d04b      	beq.n	800787c <_reclaim_reent+0xa4>
 80077e4:	69c3      	ldr	r3, [r0, #28]
 80077e6:	b1ab      	cbz	r3, 8007814 <_reclaim_reent+0x3c>
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	b16b      	cbz	r3, 8007808 <_reclaim_reent+0x30>
 80077ec:	2500      	movs	r5, #0
 80077ee:	69e3      	ldr	r3, [r4, #28]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	5959      	ldr	r1, [r3, r5]
 80077f4:	2900      	cmp	r1, #0
 80077f6:	d13b      	bne.n	8007870 <_reclaim_reent+0x98>
 80077f8:	3504      	adds	r5, #4
 80077fa:	2d80      	cmp	r5, #128	@ 0x80
 80077fc:	d1f7      	bne.n	80077ee <_reclaim_reent+0x16>
 80077fe:	69e3      	ldr	r3, [r4, #28]
 8007800:	4620      	mov	r0, r4
 8007802:	68d9      	ldr	r1, [r3, #12]
 8007804:	f000 f878 	bl	80078f8 <_free_r>
 8007808:	69e3      	ldr	r3, [r4, #28]
 800780a:	6819      	ldr	r1, [r3, #0]
 800780c:	b111      	cbz	r1, 8007814 <_reclaim_reent+0x3c>
 800780e:	4620      	mov	r0, r4
 8007810:	f000 f872 	bl	80078f8 <_free_r>
 8007814:	6961      	ldr	r1, [r4, #20]
 8007816:	b111      	cbz	r1, 800781e <_reclaim_reent+0x46>
 8007818:	4620      	mov	r0, r4
 800781a:	f000 f86d 	bl	80078f8 <_free_r>
 800781e:	69e1      	ldr	r1, [r4, #28]
 8007820:	b111      	cbz	r1, 8007828 <_reclaim_reent+0x50>
 8007822:	4620      	mov	r0, r4
 8007824:	f000 f868 	bl	80078f8 <_free_r>
 8007828:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800782a:	b111      	cbz	r1, 8007832 <_reclaim_reent+0x5a>
 800782c:	4620      	mov	r0, r4
 800782e:	f000 f863 	bl	80078f8 <_free_r>
 8007832:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007834:	b111      	cbz	r1, 800783c <_reclaim_reent+0x64>
 8007836:	4620      	mov	r0, r4
 8007838:	f000 f85e 	bl	80078f8 <_free_r>
 800783c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800783e:	b111      	cbz	r1, 8007846 <_reclaim_reent+0x6e>
 8007840:	4620      	mov	r0, r4
 8007842:	f000 f859 	bl	80078f8 <_free_r>
 8007846:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007848:	b111      	cbz	r1, 8007850 <_reclaim_reent+0x78>
 800784a:	4620      	mov	r0, r4
 800784c:	f000 f854 	bl	80078f8 <_free_r>
 8007850:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007852:	b111      	cbz	r1, 800785a <_reclaim_reent+0x82>
 8007854:	4620      	mov	r0, r4
 8007856:	f000 f84f 	bl	80078f8 <_free_r>
 800785a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800785c:	b111      	cbz	r1, 8007864 <_reclaim_reent+0x8c>
 800785e:	4620      	mov	r0, r4
 8007860:	f000 f84a 	bl	80078f8 <_free_r>
 8007864:	6a23      	ldr	r3, [r4, #32]
 8007866:	b14b      	cbz	r3, 800787c <_reclaim_reent+0xa4>
 8007868:	4620      	mov	r0, r4
 800786a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800786e:	4718      	bx	r3
 8007870:	680e      	ldr	r6, [r1, #0]
 8007872:	4620      	mov	r0, r4
 8007874:	f000 f840 	bl	80078f8 <_free_r>
 8007878:	4631      	mov	r1, r6
 800787a:	e7bb      	b.n	80077f4 <_reclaim_reent+0x1c>
 800787c:	bd70      	pop	{r4, r5, r6, pc}
 800787e:	bf00      	nop
 8007880:	20000010 	.word	0x20000010

08007884 <__errno>:
 8007884:	4b01      	ldr	r3, [pc, #4]	@ (800788c <__errno+0x8>)
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	20000010 	.word	0x20000010

08007890 <__libc_init_array>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	4d0d      	ldr	r5, [pc, #52]	@ (80078c8 <__libc_init_array+0x38>)
 8007894:	4c0d      	ldr	r4, [pc, #52]	@ (80078cc <__libc_init_array+0x3c>)
 8007896:	1b64      	subs	r4, r4, r5
 8007898:	10a4      	asrs	r4, r4, #2
 800789a:	2600      	movs	r6, #0
 800789c:	42a6      	cmp	r6, r4
 800789e:	d109      	bne.n	80078b4 <__libc_init_array+0x24>
 80078a0:	4d0b      	ldr	r5, [pc, #44]	@ (80078d0 <__libc_init_array+0x40>)
 80078a2:	4c0c      	ldr	r4, [pc, #48]	@ (80078d4 <__libc_init_array+0x44>)
 80078a4:	f000 fc66 	bl	8008174 <_init>
 80078a8:	1b64      	subs	r4, r4, r5
 80078aa:	10a4      	asrs	r4, r4, #2
 80078ac:	2600      	movs	r6, #0
 80078ae:	42a6      	cmp	r6, r4
 80078b0:	d105      	bne.n	80078be <__libc_init_array+0x2e>
 80078b2:	bd70      	pop	{r4, r5, r6, pc}
 80078b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b8:	4798      	blx	r3
 80078ba:	3601      	adds	r6, #1
 80078bc:	e7ee      	b.n	800789c <__libc_init_array+0xc>
 80078be:	f855 3b04 	ldr.w	r3, [r5], #4
 80078c2:	4798      	blx	r3
 80078c4:	3601      	adds	r6, #1
 80078c6:	e7f2      	b.n	80078ae <__libc_init_array+0x1e>
 80078c8:	080082b4 	.word	0x080082b4
 80078cc:	080082b4 	.word	0x080082b4
 80078d0:	080082b4 	.word	0x080082b4
 80078d4:	080082b8 	.word	0x080082b8

080078d8 <__retarget_lock_acquire_recursive>:
 80078d8:	4770      	bx	lr

080078da <__retarget_lock_release_recursive>:
 80078da:	4770      	bx	lr

080078dc <memcpy>:
 80078dc:	440a      	add	r2, r1
 80078de:	4291      	cmp	r1, r2
 80078e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80078e4:	d100      	bne.n	80078e8 <memcpy+0xc>
 80078e6:	4770      	bx	lr
 80078e8:	b510      	push	{r4, lr}
 80078ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078f2:	4291      	cmp	r1, r2
 80078f4:	d1f9      	bne.n	80078ea <memcpy+0xe>
 80078f6:	bd10      	pop	{r4, pc}

080078f8 <_free_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	4605      	mov	r5, r0
 80078fc:	2900      	cmp	r1, #0
 80078fe:	d041      	beq.n	8007984 <_free_r+0x8c>
 8007900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007904:	1f0c      	subs	r4, r1, #4
 8007906:	2b00      	cmp	r3, #0
 8007908:	bfb8      	it	lt
 800790a:	18e4      	addlt	r4, r4, r3
 800790c:	f000 f8e0 	bl	8007ad0 <__malloc_lock>
 8007910:	4a1d      	ldr	r2, [pc, #116]	@ (8007988 <_free_r+0x90>)
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	b933      	cbnz	r3, 8007924 <_free_r+0x2c>
 8007916:	6063      	str	r3, [r4, #4]
 8007918:	6014      	str	r4, [r2, #0]
 800791a:	4628      	mov	r0, r5
 800791c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007920:	f000 b8dc 	b.w	8007adc <__malloc_unlock>
 8007924:	42a3      	cmp	r3, r4
 8007926:	d908      	bls.n	800793a <_free_r+0x42>
 8007928:	6820      	ldr	r0, [r4, #0]
 800792a:	1821      	adds	r1, r4, r0
 800792c:	428b      	cmp	r3, r1
 800792e:	bf01      	itttt	eq
 8007930:	6819      	ldreq	r1, [r3, #0]
 8007932:	685b      	ldreq	r3, [r3, #4]
 8007934:	1809      	addeq	r1, r1, r0
 8007936:	6021      	streq	r1, [r4, #0]
 8007938:	e7ed      	b.n	8007916 <_free_r+0x1e>
 800793a:	461a      	mov	r2, r3
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	b10b      	cbz	r3, 8007944 <_free_r+0x4c>
 8007940:	42a3      	cmp	r3, r4
 8007942:	d9fa      	bls.n	800793a <_free_r+0x42>
 8007944:	6811      	ldr	r1, [r2, #0]
 8007946:	1850      	adds	r0, r2, r1
 8007948:	42a0      	cmp	r0, r4
 800794a:	d10b      	bne.n	8007964 <_free_r+0x6c>
 800794c:	6820      	ldr	r0, [r4, #0]
 800794e:	4401      	add	r1, r0
 8007950:	1850      	adds	r0, r2, r1
 8007952:	4283      	cmp	r3, r0
 8007954:	6011      	str	r1, [r2, #0]
 8007956:	d1e0      	bne.n	800791a <_free_r+0x22>
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	6053      	str	r3, [r2, #4]
 800795e:	4408      	add	r0, r1
 8007960:	6010      	str	r0, [r2, #0]
 8007962:	e7da      	b.n	800791a <_free_r+0x22>
 8007964:	d902      	bls.n	800796c <_free_r+0x74>
 8007966:	230c      	movs	r3, #12
 8007968:	602b      	str	r3, [r5, #0]
 800796a:	e7d6      	b.n	800791a <_free_r+0x22>
 800796c:	6820      	ldr	r0, [r4, #0]
 800796e:	1821      	adds	r1, r4, r0
 8007970:	428b      	cmp	r3, r1
 8007972:	bf04      	itt	eq
 8007974:	6819      	ldreq	r1, [r3, #0]
 8007976:	685b      	ldreq	r3, [r3, #4]
 8007978:	6063      	str	r3, [r4, #4]
 800797a:	bf04      	itt	eq
 800797c:	1809      	addeq	r1, r1, r0
 800797e:	6021      	streq	r1, [r4, #0]
 8007980:	6054      	str	r4, [r2, #4]
 8007982:	e7ca      	b.n	800791a <_free_r+0x22>
 8007984:	bd38      	pop	{r3, r4, r5, pc}
 8007986:	bf00      	nop
 8007988:	20005f5c 	.word	0x20005f5c

0800798c <sbrk_aligned>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4e0f      	ldr	r6, [pc, #60]	@ (80079cc <sbrk_aligned+0x40>)
 8007990:	460c      	mov	r4, r1
 8007992:	6831      	ldr	r1, [r6, #0]
 8007994:	4605      	mov	r5, r0
 8007996:	b911      	cbnz	r1, 800799e <sbrk_aligned+0x12>
 8007998:	f000 fba6 	bl	80080e8 <_sbrk_r>
 800799c:	6030      	str	r0, [r6, #0]
 800799e:	4621      	mov	r1, r4
 80079a0:	4628      	mov	r0, r5
 80079a2:	f000 fba1 	bl	80080e8 <_sbrk_r>
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	d103      	bne.n	80079b2 <sbrk_aligned+0x26>
 80079aa:	f04f 34ff 	mov.w	r4, #4294967295
 80079ae:	4620      	mov	r0, r4
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
 80079b2:	1cc4      	adds	r4, r0, #3
 80079b4:	f024 0403 	bic.w	r4, r4, #3
 80079b8:	42a0      	cmp	r0, r4
 80079ba:	d0f8      	beq.n	80079ae <sbrk_aligned+0x22>
 80079bc:	1a21      	subs	r1, r4, r0
 80079be:	4628      	mov	r0, r5
 80079c0:	f000 fb92 	bl	80080e8 <_sbrk_r>
 80079c4:	3001      	adds	r0, #1
 80079c6:	d1f2      	bne.n	80079ae <sbrk_aligned+0x22>
 80079c8:	e7ef      	b.n	80079aa <sbrk_aligned+0x1e>
 80079ca:	bf00      	nop
 80079cc:	20005f58 	.word	0x20005f58

080079d0 <_malloc_r>:
 80079d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d4:	1ccd      	adds	r5, r1, #3
 80079d6:	f025 0503 	bic.w	r5, r5, #3
 80079da:	3508      	adds	r5, #8
 80079dc:	2d0c      	cmp	r5, #12
 80079de:	bf38      	it	cc
 80079e0:	250c      	movcc	r5, #12
 80079e2:	2d00      	cmp	r5, #0
 80079e4:	4606      	mov	r6, r0
 80079e6:	db01      	blt.n	80079ec <_malloc_r+0x1c>
 80079e8:	42a9      	cmp	r1, r5
 80079ea:	d904      	bls.n	80079f6 <_malloc_r+0x26>
 80079ec:	230c      	movs	r3, #12
 80079ee:	6033      	str	r3, [r6, #0]
 80079f0:	2000      	movs	r0, #0
 80079f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007acc <_malloc_r+0xfc>
 80079fa:	f000 f869 	bl	8007ad0 <__malloc_lock>
 80079fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007a02:	461c      	mov	r4, r3
 8007a04:	bb44      	cbnz	r4, 8007a58 <_malloc_r+0x88>
 8007a06:	4629      	mov	r1, r5
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f7ff ffbf 	bl	800798c <sbrk_aligned>
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	4604      	mov	r4, r0
 8007a12:	d158      	bne.n	8007ac6 <_malloc_r+0xf6>
 8007a14:	f8d8 4000 	ldr.w	r4, [r8]
 8007a18:	4627      	mov	r7, r4
 8007a1a:	2f00      	cmp	r7, #0
 8007a1c:	d143      	bne.n	8007aa6 <_malloc_r+0xd6>
 8007a1e:	2c00      	cmp	r4, #0
 8007a20:	d04b      	beq.n	8007aba <_malloc_r+0xea>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	4639      	mov	r1, r7
 8007a26:	4630      	mov	r0, r6
 8007a28:	eb04 0903 	add.w	r9, r4, r3
 8007a2c:	f000 fb5c 	bl	80080e8 <_sbrk_r>
 8007a30:	4581      	cmp	r9, r0
 8007a32:	d142      	bne.n	8007aba <_malloc_r+0xea>
 8007a34:	6821      	ldr	r1, [r4, #0]
 8007a36:	1a6d      	subs	r5, r5, r1
 8007a38:	4629      	mov	r1, r5
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	f7ff ffa6 	bl	800798c <sbrk_aligned>
 8007a40:	3001      	adds	r0, #1
 8007a42:	d03a      	beq.n	8007aba <_malloc_r+0xea>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	442b      	add	r3, r5
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	bb62      	cbnz	r2, 8007aac <_malloc_r+0xdc>
 8007a52:	f8c8 7000 	str.w	r7, [r8]
 8007a56:	e00f      	b.n	8007a78 <_malloc_r+0xa8>
 8007a58:	6822      	ldr	r2, [r4, #0]
 8007a5a:	1b52      	subs	r2, r2, r5
 8007a5c:	d420      	bmi.n	8007aa0 <_malloc_r+0xd0>
 8007a5e:	2a0b      	cmp	r2, #11
 8007a60:	d917      	bls.n	8007a92 <_malloc_r+0xc2>
 8007a62:	1961      	adds	r1, r4, r5
 8007a64:	42a3      	cmp	r3, r4
 8007a66:	6025      	str	r5, [r4, #0]
 8007a68:	bf18      	it	ne
 8007a6a:	6059      	strne	r1, [r3, #4]
 8007a6c:	6863      	ldr	r3, [r4, #4]
 8007a6e:	bf08      	it	eq
 8007a70:	f8c8 1000 	streq.w	r1, [r8]
 8007a74:	5162      	str	r2, [r4, r5]
 8007a76:	604b      	str	r3, [r1, #4]
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f000 f82f 	bl	8007adc <__malloc_unlock>
 8007a7e:	f104 000b 	add.w	r0, r4, #11
 8007a82:	1d23      	adds	r3, r4, #4
 8007a84:	f020 0007 	bic.w	r0, r0, #7
 8007a88:	1ac2      	subs	r2, r0, r3
 8007a8a:	bf1c      	itt	ne
 8007a8c:	1a1b      	subne	r3, r3, r0
 8007a8e:	50a3      	strne	r3, [r4, r2]
 8007a90:	e7af      	b.n	80079f2 <_malloc_r+0x22>
 8007a92:	6862      	ldr	r2, [r4, #4]
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	bf0c      	ite	eq
 8007a98:	f8c8 2000 	streq.w	r2, [r8]
 8007a9c:	605a      	strne	r2, [r3, #4]
 8007a9e:	e7eb      	b.n	8007a78 <_malloc_r+0xa8>
 8007aa0:	4623      	mov	r3, r4
 8007aa2:	6864      	ldr	r4, [r4, #4]
 8007aa4:	e7ae      	b.n	8007a04 <_malloc_r+0x34>
 8007aa6:	463c      	mov	r4, r7
 8007aa8:	687f      	ldr	r7, [r7, #4]
 8007aaa:	e7b6      	b.n	8007a1a <_malloc_r+0x4a>
 8007aac:	461a      	mov	r2, r3
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	d1fb      	bne.n	8007aac <_malloc_r+0xdc>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6053      	str	r3, [r2, #4]
 8007ab8:	e7de      	b.n	8007a78 <_malloc_r+0xa8>
 8007aba:	230c      	movs	r3, #12
 8007abc:	6033      	str	r3, [r6, #0]
 8007abe:	4630      	mov	r0, r6
 8007ac0:	f000 f80c 	bl	8007adc <__malloc_unlock>
 8007ac4:	e794      	b.n	80079f0 <_malloc_r+0x20>
 8007ac6:	6005      	str	r5, [r0, #0]
 8007ac8:	e7d6      	b.n	8007a78 <_malloc_r+0xa8>
 8007aca:	bf00      	nop
 8007acc:	20005f5c 	.word	0x20005f5c

08007ad0 <__malloc_lock>:
 8007ad0:	4801      	ldr	r0, [pc, #4]	@ (8007ad8 <__malloc_lock+0x8>)
 8007ad2:	f7ff bf01 	b.w	80078d8 <__retarget_lock_acquire_recursive>
 8007ad6:	bf00      	nop
 8007ad8:	20005f54 	.word	0x20005f54

08007adc <__malloc_unlock>:
 8007adc:	4801      	ldr	r0, [pc, #4]	@ (8007ae4 <__malloc_unlock+0x8>)
 8007ade:	f7ff befc 	b.w	80078da <__retarget_lock_release_recursive>
 8007ae2:	bf00      	nop
 8007ae4:	20005f54 	.word	0x20005f54

08007ae8 <__ssputs_r>:
 8007ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007aec:	688e      	ldr	r6, [r1, #8]
 8007aee:	461f      	mov	r7, r3
 8007af0:	42be      	cmp	r6, r7
 8007af2:	680b      	ldr	r3, [r1, #0]
 8007af4:	4682      	mov	sl, r0
 8007af6:	460c      	mov	r4, r1
 8007af8:	4690      	mov	r8, r2
 8007afa:	d82d      	bhi.n	8007b58 <__ssputs_r+0x70>
 8007afc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b04:	d026      	beq.n	8007b54 <__ssputs_r+0x6c>
 8007b06:	6965      	ldr	r5, [r4, #20]
 8007b08:	6909      	ldr	r1, [r1, #16]
 8007b0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b0e:	eba3 0901 	sub.w	r9, r3, r1
 8007b12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b16:	1c7b      	adds	r3, r7, #1
 8007b18:	444b      	add	r3, r9
 8007b1a:	106d      	asrs	r5, r5, #1
 8007b1c:	429d      	cmp	r5, r3
 8007b1e:	bf38      	it	cc
 8007b20:	461d      	movcc	r5, r3
 8007b22:	0553      	lsls	r3, r2, #21
 8007b24:	d527      	bpl.n	8007b76 <__ssputs_r+0x8e>
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7ff ff52 	bl	80079d0 <_malloc_r>
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	b360      	cbz	r0, 8007b8a <__ssputs_r+0xa2>
 8007b30:	6921      	ldr	r1, [r4, #16]
 8007b32:	464a      	mov	r2, r9
 8007b34:	f7ff fed2 	bl	80078dc <memcpy>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	6126      	str	r6, [r4, #16]
 8007b46:	6165      	str	r5, [r4, #20]
 8007b48:	444e      	add	r6, r9
 8007b4a:	eba5 0509 	sub.w	r5, r5, r9
 8007b4e:	6026      	str	r6, [r4, #0]
 8007b50:	60a5      	str	r5, [r4, #8]
 8007b52:	463e      	mov	r6, r7
 8007b54:	42be      	cmp	r6, r7
 8007b56:	d900      	bls.n	8007b5a <__ssputs_r+0x72>
 8007b58:	463e      	mov	r6, r7
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4641      	mov	r1, r8
 8007b60:	f000 faa8 	bl	80080b4 <memmove>
 8007b64:	68a3      	ldr	r3, [r4, #8]
 8007b66:	1b9b      	subs	r3, r3, r6
 8007b68:	60a3      	str	r3, [r4, #8]
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	4433      	add	r3, r6
 8007b6e:	6023      	str	r3, [r4, #0]
 8007b70:	2000      	movs	r0, #0
 8007b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b76:	462a      	mov	r2, r5
 8007b78:	f000 fac6 	bl	8008108 <_realloc_r>
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d1e0      	bne.n	8007b44 <__ssputs_r+0x5c>
 8007b82:	6921      	ldr	r1, [r4, #16]
 8007b84:	4650      	mov	r0, sl
 8007b86:	f7ff feb7 	bl	80078f8 <_free_r>
 8007b8a:	230c      	movs	r3, #12
 8007b8c:	f8ca 3000 	str.w	r3, [sl]
 8007b90:	89a3      	ldrh	r3, [r4, #12]
 8007b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b96:	81a3      	strh	r3, [r4, #12]
 8007b98:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9c:	e7e9      	b.n	8007b72 <__ssputs_r+0x8a>
	...

08007ba0 <_svfiprintf_r>:
 8007ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba4:	4698      	mov	r8, r3
 8007ba6:	898b      	ldrh	r3, [r1, #12]
 8007ba8:	061b      	lsls	r3, r3, #24
 8007baa:	b09d      	sub	sp, #116	@ 0x74
 8007bac:	4607      	mov	r7, r0
 8007bae:	460d      	mov	r5, r1
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	d510      	bpl.n	8007bd6 <_svfiprintf_r+0x36>
 8007bb4:	690b      	ldr	r3, [r1, #16]
 8007bb6:	b973      	cbnz	r3, 8007bd6 <_svfiprintf_r+0x36>
 8007bb8:	2140      	movs	r1, #64	@ 0x40
 8007bba:	f7ff ff09 	bl	80079d0 <_malloc_r>
 8007bbe:	6028      	str	r0, [r5, #0]
 8007bc0:	6128      	str	r0, [r5, #16]
 8007bc2:	b930      	cbnz	r0, 8007bd2 <_svfiprintf_r+0x32>
 8007bc4:	230c      	movs	r3, #12
 8007bc6:	603b      	str	r3, [r7, #0]
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	b01d      	add	sp, #116	@ 0x74
 8007bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bd2:	2340      	movs	r3, #64	@ 0x40
 8007bd4:	616b      	str	r3, [r5, #20]
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bda:	2320      	movs	r3, #32
 8007bdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007be4:	2330      	movs	r3, #48	@ 0x30
 8007be6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d84 <_svfiprintf_r+0x1e4>
 8007bea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bee:	f04f 0901 	mov.w	r9, #1
 8007bf2:	4623      	mov	r3, r4
 8007bf4:	469a      	mov	sl, r3
 8007bf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bfa:	b10a      	cbz	r2, 8007c00 <_svfiprintf_r+0x60>
 8007bfc:	2a25      	cmp	r2, #37	@ 0x25
 8007bfe:	d1f9      	bne.n	8007bf4 <_svfiprintf_r+0x54>
 8007c00:	ebba 0b04 	subs.w	fp, sl, r4
 8007c04:	d00b      	beq.n	8007c1e <_svfiprintf_r+0x7e>
 8007c06:	465b      	mov	r3, fp
 8007c08:	4622      	mov	r2, r4
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	4638      	mov	r0, r7
 8007c0e:	f7ff ff6b 	bl	8007ae8 <__ssputs_r>
 8007c12:	3001      	adds	r0, #1
 8007c14:	f000 80a7 	beq.w	8007d66 <_svfiprintf_r+0x1c6>
 8007c18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c1a:	445a      	add	r2, fp
 8007c1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 809f 	beq.w	8007d66 <_svfiprintf_r+0x1c6>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c32:	f10a 0a01 	add.w	sl, sl, #1
 8007c36:	9304      	str	r3, [sp, #16]
 8007c38:	9307      	str	r3, [sp, #28]
 8007c3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c40:	4654      	mov	r4, sl
 8007c42:	2205      	movs	r2, #5
 8007c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c48:	484e      	ldr	r0, [pc, #312]	@ (8007d84 <_svfiprintf_r+0x1e4>)
 8007c4a:	f7f8 fac1 	bl	80001d0 <memchr>
 8007c4e:	9a04      	ldr	r2, [sp, #16]
 8007c50:	b9d8      	cbnz	r0, 8007c8a <_svfiprintf_r+0xea>
 8007c52:	06d0      	lsls	r0, r2, #27
 8007c54:	bf44      	itt	mi
 8007c56:	2320      	movmi	r3, #32
 8007c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c5c:	0711      	lsls	r1, r2, #28
 8007c5e:	bf44      	itt	mi
 8007c60:	232b      	movmi	r3, #43	@ 0x2b
 8007c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c66:	f89a 3000 	ldrb.w	r3, [sl]
 8007c6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c6c:	d015      	beq.n	8007c9a <_svfiprintf_r+0xfa>
 8007c6e:	9a07      	ldr	r2, [sp, #28]
 8007c70:	4654      	mov	r4, sl
 8007c72:	2000      	movs	r0, #0
 8007c74:	f04f 0c0a 	mov.w	ip, #10
 8007c78:	4621      	mov	r1, r4
 8007c7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c7e:	3b30      	subs	r3, #48	@ 0x30
 8007c80:	2b09      	cmp	r3, #9
 8007c82:	d94b      	bls.n	8007d1c <_svfiprintf_r+0x17c>
 8007c84:	b1b0      	cbz	r0, 8007cb4 <_svfiprintf_r+0x114>
 8007c86:	9207      	str	r2, [sp, #28]
 8007c88:	e014      	b.n	8007cb4 <_svfiprintf_r+0x114>
 8007c8a:	eba0 0308 	sub.w	r3, r0, r8
 8007c8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c92:	4313      	orrs	r3, r2
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	46a2      	mov	sl, r4
 8007c98:	e7d2      	b.n	8007c40 <_svfiprintf_r+0xa0>
 8007c9a:	9b03      	ldr	r3, [sp, #12]
 8007c9c:	1d19      	adds	r1, r3, #4
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	9103      	str	r1, [sp, #12]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	bfbb      	ittet	lt
 8007ca6:	425b      	neglt	r3, r3
 8007ca8:	f042 0202 	orrlt.w	r2, r2, #2
 8007cac:	9307      	strge	r3, [sp, #28]
 8007cae:	9307      	strlt	r3, [sp, #28]
 8007cb0:	bfb8      	it	lt
 8007cb2:	9204      	strlt	r2, [sp, #16]
 8007cb4:	7823      	ldrb	r3, [r4, #0]
 8007cb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cb8:	d10a      	bne.n	8007cd0 <_svfiprintf_r+0x130>
 8007cba:	7863      	ldrb	r3, [r4, #1]
 8007cbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cbe:	d132      	bne.n	8007d26 <_svfiprintf_r+0x186>
 8007cc0:	9b03      	ldr	r3, [sp, #12]
 8007cc2:	1d1a      	adds	r2, r3, #4
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	9203      	str	r2, [sp, #12]
 8007cc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ccc:	3402      	adds	r4, #2
 8007cce:	9305      	str	r3, [sp, #20]
 8007cd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d94 <_svfiprintf_r+0x1f4>
 8007cd4:	7821      	ldrb	r1, [r4, #0]
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	4650      	mov	r0, sl
 8007cda:	f7f8 fa79 	bl	80001d0 <memchr>
 8007cde:	b138      	cbz	r0, 8007cf0 <_svfiprintf_r+0x150>
 8007ce0:	9b04      	ldr	r3, [sp, #16]
 8007ce2:	eba0 000a 	sub.w	r0, r0, sl
 8007ce6:	2240      	movs	r2, #64	@ 0x40
 8007ce8:	4082      	lsls	r2, r0
 8007cea:	4313      	orrs	r3, r2
 8007cec:	3401      	adds	r4, #1
 8007cee:	9304      	str	r3, [sp, #16]
 8007cf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cf4:	4824      	ldr	r0, [pc, #144]	@ (8007d88 <_svfiprintf_r+0x1e8>)
 8007cf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cfa:	2206      	movs	r2, #6
 8007cfc:	f7f8 fa68 	bl	80001d0 <memchr>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	d036      	beq.n	8007d72 <_svfiprintf_r+0x1d2>
 8007d04:	4b21      	ldr	r3, [pc, #132]	@ (8007d8c <_svfiprintf_r+0x1ec>)
 8007d06:	bb1b      	cbnz	r3, 8007d50 <_svfiprintf_r+0x1b0>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	3307      	adds	r3, #7
 8007d0c:	f023 0307 	bic.w	r3, r3, #7
 8007d10:	3308      	adds	r3, #8
 8007d12:	9303      	str	r3, [sp, #12]
 8007d14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d16:	4433      	add	r3, r6
 8007d18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d1a:	e76a      	b.n	8007bf2 <_svfiprintf_r+0x52>
 8007d1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d20:	460c      	mov	r4, r1
 8007d22:	2001      	movs	r0, #1
 8007d24:	e7a8      	b.n	8007c78 <_svfiprintf_r+0xd8>
 8007d26:	2300      	movs	r3, #0
 8007d28:	3401      	adds	r4, #1
 8007d2a:	9305      	str	r3, [sp, #20]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	f04f 0c0a 	mov.w	ip, #10
 8007d32:	4620      	mov	r0, r4
 8007d34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d38:	3a30      	subs	r2, #48	@ 0x30
 8007d3a:	2a09      	cmp	r2, #9
 8007d3c:	d903      	bls.n	8007d46 <_svfiprintf_r+0x1a6>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d0c6      	beq.n	8007cd0 <_svfiprintf_r+0x130>
 8007d42:	9105      	str	r1, [sp, #20]
 8007d44:	e7c4      	b.n	8007cd0 <_svfiprintf_r+0x130>
 8007d46:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e7f0      	b.n	8007d32 <_svfiprintf_r+0x192>
 8007d50:	ab03      	add	r3, sp, #12
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	462a      	mov	r2, r5
 8007d56:	4b0e      	ldr	r3, [pc, #56]	@ (8007d90 <_svfiprintf_r+0x1f0>)
 8007d58:	a904      	add	r1, sp, #16
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f3af 8000 	nop.w
 8007d60:	1c42      	adds	r2, r0, #1
 8007d62:	4606      	mov	r6, r0
 8007d64:	d1d6      	bne.n	8007d14 <_svfiprintf_r+0x174>
 8007d66:	89ab      	ldrh	r3, [r5, #12]
 8007d68:	065b      	lsls	r3, r3, #25
 8007d6a:	f53f af2d 	bmi.w	8007bc8 <_svfiprintf_r+0x28>
 8007d6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d70:	e72c      	b.n	8007bcc <_svfiprintf_r+0x2c>
 8007d72:	ab03      	add	r3, sp, #12
 8007d74:	9300      	str	r3, [sp, #0]
 8007d76:	462a      	mov	r2, r5
 8007d78:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <_svfiprintf_r+0x1f0>)
 8007d7a:	a904      	add	r1, sp, #16
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f000 f879 	bl	8007e74 <_printf_i>
 8007d82:	e7ed      	b.n	8007d60 <_svfiprintf_r+0x1c0>
 8007d84:	08008278 	.word	0x08008278
 8007d88:	08008282 	.word	0x08008282
 8007d8c:	00000000 	.word	0x00000000
 8007d90:	08007ae9 	.word	0x08007ae9
 8007d94:	0800827e 	.word	0x0800827e

08007d98 <_printf_common>:
 8007d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	4698      	mov	r8, r3
 8007da0:	688a      	ldr	r2, [r1, #8]
 8007da2:	690b      	ldr	r3, [r1, #16]
 8007da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007da8:	4293      	cmp	r3, r2
 8007daa:	bfb8      	it	lt
 8007dac:	4613      	movlt	r3, r2
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007db4:	4607      	mov	r7, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	b10a      	cbz	r2, 8007dbe <_printf_common+0x26>
 8007dba:	3301      	adds	r3, #1
 8007dbc:	6033      	str	r3, [r6, #0]
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	0699      	lsls	r1, r3, #26
 8007dc2:	bf42      	ittt	mi
 8007dc4:	6833      	ldrmi	r3, [r6, #0]
 8007dc6:	3302      	addmi	r3, #2
 8007dc8:	6033      	strmi	r3, [r6, #0]
 8007dca:	6825      	ldr	r5, [r4, #0]
 8007dcc:	f015 0506 	ands.w	r5, r5, #6
 8007dd0:	d106      	bne.n	8007de0 <_printf_common+0x48>
 8007dd2:	f104 0a19 	add.w	sl, r4, #25
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	6832      	ldr	r2, [r6, #0]
 8007dda:	1a9b      	subs	r3, r3, r2
 8007ddc:	42ab      	cmp	r3, r5
 8007dde:	dc26      	bgt.n	8007e2e <_printf_common+0x96>
 8007de0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007de4:	6822      	ldr	r2, [r4, #0]
 8007de6:	3b00      	subs	r3, #0
 8007de8:	bf18      	it	ne
 8007dea:	2301      	movne	r3, #1
 8007dec:	0692      	lsls	r2, r2, #26
 8007dee:	d42b      	bmi.n	8007e48 <_printf_common+0xb0>
 8007df0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007df4:	4641      	mov	r1, r8
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c8      	blx	r9
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d01e      	beq.n	8007e3c <_printf_common+0xa4>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	6922      	ldr	r2, [r4, #16]
 8007e02:	f003 0306 	and.w	r3, r3, #6
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	bf02      	ittt	eq
 8007e0a:	68e5      	ldreq	r5, [r4, #12]
 8007e0c:	6833      	ldreq	r3, [r6, #0]
 8007e0e:	1aed      	subeq	r5, r5, r3
 8007e10:	68a3      	ldr	r3, [r4, #8]
 8007e12:	bf0c      	ite	eq
 8007e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e18:	2500      	movne	r5, #0
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bfc4      	itt	gt
 8007e1e:	1a9b      	subgt	r3, r3, r2
 8007e20:	18ed      	addgt	r5, r5, r3
 8007e22:	2600      	movs	r6, #0
 8007e24:	341a      	adds	r4, #26
 8007e26:	42b5      	cmp	r5, r6
 8007e28:	d11a      	bne.n	8007e60 <_printf_common+0xc8>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e008      	b.n	8007e40 <_printf_common+0xa8>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4652      	mov	r2, sl
 8007e32:	4641      	mov	r1, r8
 8007e34:	4638      	mov	r0, r7
 8007e36:	47c8      	blx	r9
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d103      	bne.n	8007e44 <_printf_common+0xac>
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e44:	3501      	adds	r5, #1
 8007e46:	e7c6      	b.n	8007dd6 <_printf_common+0x3e>
 8007e48:	18e1      	adds	r1, r4, r3
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	2030      	movs	r0, #48	@ 0x30
 8007e4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e52:	4422      	add	r2, r4
 8007e54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	e7c7      	b.n	8007df0 <_printf_common+0x58>
 8007e60:	2301      	movs	r3, #1
 8007e62:	4622      	mov	r2, r4
 8007e64:	4641      	mov	r1, r8
 8007e66:	4638      	mov	r0, r7
 8007e68:	47c8      	blx	r9
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d0e6      	beq.n	8007e3c <_printf_common+0xa4>
 8007e6e:	3601      	adds	r6, #1
 8007e70:	e7d9      	b.n	8007e26 <_printf_common+0x8e>
	...

08007e74 <_printf_i>:
 8007e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	7e0f      	ldrb	r7, [r1, #24]
 8007e7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e7c:	2f78      	cmp	r7, #120	@ 0x78
 8007e7e:	4691      	mov	r9, r2
 8007e80:	4680      	mov	r8, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	469a      	mov	sl, r3
 8007e86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e8a:	d807      	bhi.n	8007e9c <_printf_i+0x28>
 8007e8c:	2f62      	cmp	r7, #98	@ 0x62
 8007e8e:	d80a      	bhi.n	8007ea6 <_printf_i+0x32>
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	f000 80d2 	beq.w	800803a <_printf_i+0x1c6>
 8007e96:	2f58      	cmp	r7, #88	@ 0x58
 8007e98:	f000 80b9 	beq.w	800800e <_printf_i+0x19a>
 8007e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ea0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ea4:	e03a      	b.n	8007f1c <_printf_i+0xa8>
 8007ea6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007eaa:	2b15      	cmp	r3, #21
 8007eac:	d8f6      	bhi.n	8007e9c <_printf_i+0x28>
 8007eae:	a101      	add	r1, pc, #4	@ (adr r1, 8007eb4 <_printf_i+0x40>)
 8007eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eb4:	08007f0d 	.word	0x08007f0d
 8007eb8:	08007f21 	.word	0x08007f21
 8007ebc:	08007e9d 	.word	0x08007e9d
 8007ec0:	08007e9d 	.word	0x08007e9d
 8007ec4:	08007e9d 	.word	0x08007e9d
 8007ec8:	08007e9d 	.word	0x08007e9d
 8007ecc:	08007f21 	.word	0x08007f21
 8007ed0:	08007e9d 	.word	0x08007e9d
 8007ed4:	08007e9d 	.word	0x08007e9d
 8007ed8:	08007e9d 	.word	0x08007e9d
 8007edc:	08007e9d 	.word	0x08007e9d
 8007ee0:	08008021 	.word	0x08008021
 8007ee4:	08007f4b 	.word	0x08007f4b
 8007ee8:	08007fdb 	.word	0x08007fdb
 8007eec:	08007e9d 	.word	0x08007e9d
 8007ef0:	08007e9d 	.word	0x08007e9d
 8007ef4:	08008043 	.word	0x08008043
 8007ef8:	08007e9d 	.word	0x08007e9d
 8007efc:	08007f4b 	.word	0x08007f4b
 8007f00:	08007e9d 	.word	0x08007e9d
 8007f04:	08007e9d 	.word	0x08007e9d
 8007f08:	08007fe3 	.word	0x08007fe3
 8007f0c:	6833      	ldr	r3, [r6, #0]
 8007f0e:	1d1a      	adds	r2, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6032      	str	r2, [r6, #0]
 8007f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e09d      	b.n	800805c <_printf_i+0x1e8>
 8007f20:	6833      	ldr	r3, [r6, #0]
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	1d19      	adds	r1, r3, #4
 8007f26:	6031      	str	r1, [r6, #0]
 8007f28:	0606      	lsls	r6, r0, #24
 8007f2a:	d501      	bpl.n	8007f30 <_printf_i+0xbc>
 8007f2c:	681d      	ldr	r5, [r3, #0]
 8007f2e:	e003      	b.n	8007f38 <_printf_i+0xc4>
 8007f30:	0645      	lsls	r5, r0, #25
 8007f32:	d5fb      	bpl.n	8007f2c <_printf_i+0xb8>
 8007f34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	da03      	bge.n	8007f44 <_printf_i+0xd0>
 8007f3c:	232d      	movs	r3, #45	@ 0x2d
 8007f3e:	426d      	negs	r5, r5
 8007f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f44:	4859      	ldr	r0, [pc, #356]	@ (80080ac <_printf_i+0x238>)
 8007f46:	230a      	movs	r3, #10
 8007f48:	e011      	b.n	8007f6e <_printf_i+0xfa>
 8007f4a:	6821      	ldr	r1, [r4, #0]
 8007f4c:	6833      	ldr	r3, [r6, #0]
 8007f4e:	0608      	lsls	r0, r1, #24
 8007f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f54:	d402      	bmi.n	8007f5c <_printf_i+0xe8>
 8007f56:	0649      	lsls	r1, r1, #25
 8007f58:	bf48      	it	mi
 8007f5a:	b2ad      	uxthmi	r5, r5
 8007f5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f5e:	4853      	ldr	r0, [pc, #332]	@ (80080ac <_printf_i+0x238>)
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	bf14      	ite	ne
 8007f64:	230a      	movne	r3, #10
 8007f66:	2308      	moveq	r3, #8
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f6e:	6866      	ldr	r6, [r4, #4]
 8007f70:	60a6      	str	r6, [r4, #8]
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	bfa2      	ittt	ge
 8007f76:	6821      	ldrge	r1, [r4, #0]
 8007f78:	f021 0104 	bicge.w	r1, r1, #4
 8007f7c:	6021      	strge	r1, [r4, #0]
 8007f7e:	b90d      	cbnz	r5, 8007f84 <_printf_i+0x110>
 8007f80:	2e00      	cmp	r6, #0
 8007f82:	d04b      	beq.n	800801c <_printf_i+0x1a8>
 8007f84:	4616      	mov	r6, r2
 8007f86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f8e:	5dc7      	ldrb	r7, [r0, r7]
 8007f90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f94:	462f      	mov	r7, r5
 8007f96:	42bb      	cmp	r3, r7
 8007f98:	460d      	mov	r5, r1
 8007f9a:	d9f4      	bls.n	8007f86 <_printf_i+0x112>
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d10b      	bne.n	8007fb8 <_printf_i+0x144>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	07df      	lsls	r7, r3, #31
 8007fa4:	d508      	bpl.n	8007fb8 <_printf_i+0x144>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	6861      	ldr	r1, [r4, #4]
 8007faa:	4299      	cmp	r1, r3
 8007fac:	bfde      	ittt	le
 8007fae:	2330      	movle	r3, #48	@ 0x30
 8007fb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fb8:	1b92      	subs	r2, r2, r6
 8007fba:	6122      	str	r2, [r4, #16]
 8007fbc:	f8cd a000 	str.w	sl, [sp]
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	aa03      	add	r2, sp, #12
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	f7ff fee6 	bl	8007d98 <_printf_common>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d14a      	bne.n	8008066 <_printf_i+0x1f2>
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	b004      	add	sp, #16
 8007fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	f043 0320 	orr.w	r3, r3, #32
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	4833      	ldr	r0, [pc, #204]	@ (80080b0 <_printf_i+0x23c>)
 8007fe4:	2778      	movs	r7, #120	@ 0x78
 8007fe6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	6831      	ldr	r1, [r6, #0]
 8007fee:	061f      	lsls	r7, r3, #24
 8007ff0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ff4:	d402      	bmi.n	8007ffc <_printf_i+0x188>
 8007ff6:	065f      	lsls	r7, r3, #25
 8007ff8:	bf48      	it	mi
 8007ffa:	b2ad      	uxthmi	r5, r5
 8007ffc:	6031      	str	r1, [r6, #0]
 8007ffe:	07d9      	lsls	r1, r3, #31
 8008000:	bf44      	itt	mi
 8008002:	f043 0320 	orrmi.w	r3, r3, #32
 8008006:	6023      	strmi	r3, [r4, #0]
 8008008:	b11d      	cbz	r5, 8008012 <_printf_i+0x19e>
 800800a:	2310      	movs	r3, #16
 800800c:	e7ac      	b.n	8007f68 <_printf_i+0xf4>
 800800e:	4827      	ldr	r0, [pc, #156]	@ (80080ac <_printf_i+0x238>)
 8008010:	e7e9      	b.n	8007fe6 <_printf_i+0x172>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	f023 0320 	bic.w	r3, r3, #32
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	e7f6      	b.n	800800a <_printf_i+0x196>
 800801c:	4616      	mov	r6, r2
 800801e:	e7bd      	b.n	8007f9c <_printf_i+0x128>
 8008020:	6833      	ldr	r3, [r6, #0]
 8008022:	6825      	ldr	r5, [r4, #0]
 8008024:	6961      	ldr	r1, [r4, #20]
 8008026:	1d18      	adds	r0, r3, #4
 8008028:	6030      	str	r0, [r6, #0]
 800802a:	062e      	lsls	r6, r5, #24
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	d501      	bpl.n	8008034 <_printf_i+0x1c0>
 8008030:	6019      	str	r1, [r3, #0]
 8008032:	e002      	b.n	800803a <_printf_i+0x1c6>
 8008034:	0668      	lsls	r0, r5, #25
 8008036:	d5fb      	bpl.n	8008030 <_printf_i+0x1bc>
 8008038:	8019      	strh	r1, [r3, #0]
 800803a:	2300      	movs	r3, #0
 800803c:	6123      	str	r3, [r4, #16]
 800803e:	4616      	mov	r6, r2
 8008040:	e7bc      	b.n	8007fbc <_printf_i+0x148>
 8008042:	6833      	ldr	r3, [r6, #0]
 8008044:	1d1a      	adds	r2, r3, #4
 8008046:	6032      	str	r2, [r6, #0]
 8008048:	681e      	ldr	r6, [r3, #0]
 800804a:	6862      	ldr	r2, [r4, #4]
 800804c:	2100      	movs	r1, #0
 800804e:	4630      	mov	r0, r6
 8008050:	f7f8 f8be 	bl	80001d0 <memchr>
 8008054:	b108      	cbz	r0, 800805a <_printf_i+0x1e6>
 8008056:	1b80      	subs	r0, r0, r6
 8008058:	6060      	str	r0, [r4, #4]
 800805a:	6863      	ldr	r3, [r4, #4]
 800805c:	6123      	str	r3, [r4, #16]
 800805e:	2300      	movs	r3, #0
 8008060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008064:	e7aa      	b.n	8007fbc <_printf_i+0x148>
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	4632      	mov	r2, r6
 800806a:	4649      	mov	r1, r9
 800806c:	4640      	mov	r0, r8
 800806e:	47d0      	blx	sl
 8008070:	3001      	adds	r0, #1
 8008072:	d0ad      	beq.n	8007fd0 <_printf_i+0x15c>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	079b      	lsls	r3, r3, #30
 8008078:	d413      	bmi.n	80080a2 <_printf_i+0x22e>
 800807a:	68e0      	ldr	r0, [r4, #12]
 800807c:	9b03      	ldr	r3, [sp, #12]
 800807e:	4298      	cmp	r0, r3
 8008080:	bfb8      	it	lt
 8008082:	4618      	movlt	r0, r3
 8008084:	e7a6      	b.n	8007fd4 <_printf_i+0x160>
 8008086:	2301      	movs	r3, #1
 8008088:	4632      	mov	r2, r6
 800808a:	4649      	mov	r1, r9
 800808c:	4640      	mov	r0, r8
 800808e:	47d0      	blx	sl
 8008090:	3001      	adds	r0, #1
 8008092:	d09d      	beq.n	8007fd0 <_printf_i+0x15c>
 8008094:	3501      	adds	r5, #1
 8008096:	68e3      	ldr	r3, [r4, #12]
 8008098:	9903      	ldr	r1, [sp, #12]
 800809a:	1a5b      	subs	r3, r3, r1
 800809c:	42ab      	cmp	r3, r5
 800809e:	dcf2      	bgt.n	8008086 <_printf_i+0x212>
 80080a0:	e7eb      	b.n	800807a <_printf_i+0x206>
 80080a2:	2500      	movs	r5, #0
 80080a4:	f104 0619 	add.w	r6, r4, #25
 80080a8:	e7f5      	b.n	8008096 <_printf_i+0x222>
 80080aa:	bf00      	nop
 80080ac:	08008289 	.word	0x08008289
 80080b0:	0800829a 	.word	0x0800829a

080080b4 <memmove>:
 80080b4:	4288      	cmp	r0, r1
 80080b6:	b510      	push	{r4, lr}
 80080b8:	eb01 0402 	add.w	r4, r1, r2
 80080bc:	d902      	bls.n	80080c4 <memmove+0x10>
 80080be:	4284      	cmp	r4, r0
 80080c0:	4623      	mov	r3, r4
 80080c2:	d807      	bhi.n	80080d4 <memmove+0x20>
 80080c4:	1e43      	subs	r3, r0, #1
 80080c6:	42a1      	cmp	r1, r4
 80080c8:	d008      	beq.n	80080dc <memmove+0x28>
 80080ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80080d2:	e7f8      	b.n	80080c6 <memmove+0x12>
 80080d4:	4402      	add	r2, r0
 80080d6:	4601      	mov	r1, r0
 80080d8:	428a      	cmp	r2, r1
 80080da:	d100      	bne.n	80080de <memmove+0x2a>
 80080dc:	bd10      	pop	{r4, pc}
 80080de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80080e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80080e6:	e7f7      	b.n	80080d8 <memmove+0x24>

080080e8 <_sbrk_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d06      	ldr	r5, [pc, #24]	@ (8008104 <_sbrk_r+0x1c>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	f7f8 ff14 	bl	8000f20 <_sbrk>
 80080f8:	1c43      	adds	r3, r0, #1
 80080fa:	d102      	bne.n	8008102 <_sbrk_r+0x1a>
 80080fc:	682b      	ldr	r3, [r5, #0]
 80080fe:	b103      	cbz	r3, 8008102 <_sbrk_r+0x1a>
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	bd38      	pop	{r3, r4, r5, pc}
 8008104:	20005f50 	.word	0x20005f50

08008108 <_realloc_r>:
 8008108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800810c:	4680      	mov	r8, r0
 800810e:	4615      	mov	r5, r2
 8008110:	460c      	mov	r4, r1
 8008112:	b921      	cbnz	r1, 800811e <_realloc_r+0x16>
 8008114:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008118:	4611      	mov	r1, r2
 800811a:	f7ff bc59 	b.w	80079d0 <_malloc_r>
 800811e:	b92a      	cbnz	r2, 800812c <_realloc_r+0x24>
 8008120:	f7ff fbea 	bl	80078f8 <_free_r>
 8008124:	2400      	movs	r4, #0
 8008126:	4620      	mov	r0, r4
 8008128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812c:	f000 f81a 	bl	8008164 <_malloc_usable_size_r>
 8008130:	4285      	cmp	r5, r0
 8008132:	4606      	mov	r6, r0
 8008134:	d802      	bhi.n	800813c <_realloc_r+0x34>
 8008136:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800813a:	d8f4      	bhi.n	8008126 <_realloc_r+0x1e>
 800813c:	4629      	mov	r1, r5
 800813e:	4640      	mov	r0, r8
 8008140:	f7ff fc46 	bl	80079d0 <_malloc_r>
 8008144:	4607      	mov	r7, r0
 8008146:	2800      	cmp	r0, #0
 8008148:	d0ec      	beq.n	8008124 <_realloc_r+0x1c>
 800814a:	42b5      	cmp	r5, r6
 800814c:	462a      	mov	r2, r5
 800814e:	4621      	mov	r1, r4
 8008150:	bf28      	it	cs
 8008152:	4632      	movcs	r2, r6
 8008154:	f7ff fbc2 	bl	80078dc <memcpy>
 8008158:	4621      	mov	r1, r4
 800815a:	4640      	mov	r0, r8
 800815c:	f7ff fbcc 	bl	80078f8 <_free_r>
 8008160:	463c      	mov	r4, r7
 8008162:	e7e0      	b.n	8008126 <_realloc_r+0x1e>

08008164 <_malloc_usable_size_r>:
 8008164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008168:	1f18      	subs	r0, r3, #4
 800816a:	2b00      	cmp	r3, #0
 800816c:	bfbc      	itt	lt
 800816e:	580b      	ldrlt	r3, [r1, r0]
 8008170:	18c0      	addlt	r0, r0, r3
 8008172:	4770      	bx	lr

08008174 <_init>:
 8008174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008176:	bf00      	nop
 8008178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817a:	bc08      	pop	{r3}
 800817c:	469e      	mov	lr, r3
 800817e:	4770      	bx	lr

08008180 <_fini>:
 8008180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008182:	bf00      	nop
 8008184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008186:	bc08      	pop	{r3}
 8008188:	469e      	mov	lr, r3
 800818a:	4770      	bx	lr
