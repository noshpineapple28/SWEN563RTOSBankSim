
SWEN563RTOSBankSim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa8  08006fa8  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa8  08006fa8  00007fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fb0  08006fb0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb0  08006fb0  00007fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fb4  08006fb4  00007fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006fb8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be8  20000060  08007018  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c48  08007018  00008c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d59e  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e36  00000000  00000000  0002562e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018a0  00000000  00000000  00029468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001319  00000000  00000000  0002ad08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004068  00000000  00000000  0002c021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c050  00000000  00000000  00030089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fda84  00000000  00000000  0004c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00149b5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a70  00000000  00000000  00149ba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00150610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006ed8 	.word	0x08006ed8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006ed8 	.word	0x08006ed8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fb18 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f82e 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f8d8 	bl	8000690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e0:	f000 f8a6 	bl	8000630 <MX_USART2_UART_Init>
  MX_RNG_Init();
 80004e4:	f000 f890 	bl	8000608 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f003 fe60 	bl	80041ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ec:	4a0b      	ldr	r2, [pc, #44]	@ (800051c <main+0x4c>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	480b      	ldr	r0, [pc, #44]	@ (8000520 <main+0x50>)
 80004f2:	f003 fea5 	bl	8004240 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000524 <main+0x54>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadNew(TellerTask, "Teller Task 1", NULL);
 80004fc:	2200      	movs	r2, #0
 80004fe:	490a      	ldr	r1, [pc, #40]	@ (8000528 <main+0x58>)
 8000500:	480a      	ldr	r0, [pc, #40]	@ (800052c <main+0x5c>)
 8000502:	f003 fe9d 	bl	8004240 <osThreadNew>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  HAL_UART_Transmit(&huart2, (unsigned char *) "Hello RTOS", 11, 100);
 8000506:	2364      	movs	r3, #100	@ 0x64
 8000508:	220b      	movs	r2, #11
 800050a:	4909      	ldr	r1, [pc, #36]	@ (8000530 <main+0x60>)
 800050c:	4809      	ldr	r0, [pc, #36]	@ (8000534 <main+0x64>)
 800050e:	f002 fd3b 	bl	8002f88 <HAL_UART_Transmit>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000512:	f003 fe6f 	bl	80041f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	bf00      	nop
 8000518:	e7fd      	b.n	8000516 <main+0x46>
 800051a:	bf00      	nop
 800051c:	08006f3c 	.word	0x08006f3c
 8000520:	08000781 	.word	0x08000781
 8000524:	20000114 	.word	0x20000114
 8000528:	08006efc 	.word	0x08006efc
 800052c:	0800075d 	.word	0x0800075d
 8000530:	08006f0c 	.word	0x08006f0c
 8000534:	2000008c 	.word	0x2000008c

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b096      	sub	sp, #88	@ 0x58
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	2244      	movs	r2, #68	@ 0x44
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f006 fbde 	bl	8006d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	463b      	mov	r3, r7
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800055a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800055e:	f000 fe55 	bl	800120c <HAL_PWREx_ControlVoltageScaling>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000568:	f000 f921 	bl	80007ae <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800056c:	f000 fe30 	bl	80011d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000570:	4b24      	ldr	r3, [pc, #144]	@ (8000604 <SystemClock_Config+0xcc>)
 8000572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000576:	4a23      	ldr	r2, [pc, #140]	@ (8000604 <SystemClock_Config+0xcc>)
 8000578:	f023 0318 	bic.w	r3, r3, #24
 800057c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8000580:	2316      	movs	r3, #22
 8000582:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800058c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2310      	movs	r3, #16
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000596:	2300      	movs	r3, #0
 8000598:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800059a:	2360      	movs	r3, #96	@ 0x60
 800059c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005aa:	230a      	movs	r3, #10
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fe7a 	bl	80012b8 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ca:	f000 f8f0 	bl	80007ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fa42 	bl	8001a70 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005f2:	f000 f8dc 	bl	80007ae <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005f6:	f001 ff7b 	bl	80024f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005fa:	bf00      	nop
 80005fc:	3758      	adds	r7, #88	@ 0x58
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40021000 	.word	0x40021000

08000608 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800060c:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <MX_RNG_Init+0x20>)
 800060e:	4a07      	ldr	r2, [pc, #28]	@ (800062c <MX_RNG_Init+0x24>)
 8000610:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <MX_RNG_Init+0x20>)
 8000614:	f002 f94e 	bl	80028b4 <HAL_RNG_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800061e:	f000 f8c6 	bl	80007ae <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2000007c 	.word	0x2000007c
 800062c:	50060800 	.word	0x50060800

08000630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000636:	4a15      	ldr	r2, [pc, #84]	@ (800068c <MX_USART2_UART_Init+0x5c>)
 8000638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 800063c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066c:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000672:	4805      	ldr	r0, [pc, #20]	@ (8000688 <MX_USART2_UART_Init+0x58>)
 8000674:	f002 fc3a 	bl	8002eec <HAL_UART_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800067e:	f000 f896 	bl	80007ae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	2000008c 	.word	0x2000008c
 800068c:	40004400 	.word	0x40004400

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	@ 0x28
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
 80006a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a2a      	ldr	r2, [pc, #168]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0304 	and.w	r3, r3, #4
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006be:	4b25      	ldr	r3, [pc, #148]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f2:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fa:	4b16      	ldr	r3, [pc, #88]	@ (8000754 <MX_GPIO_Init+0xc4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fe:	f003 0302 	and.w	r3, r3, #2
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2120      	movs	r1, #32
 800070a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800070e:	f000 fd47 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000712:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000718:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800071c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	4619      	mov	r1, r3
 8000728:	480b      	ldr	r0, [pc, #44]	@ (8000758 <MX_GPIO_Init+0xc8>)
 800072a:	f000 fb8f 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800072e:	2320      	movs	r3, #32
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000732:	2301      	movs	r3, #1
 8000734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000748:	f000 fb80 	bl	8000e4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	@ 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	48000800 	.word	0x48000800

0800075c <TellerTask>:

/* USER CODE BEGIN 4 */

void TellerTask (void* params)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (unsigned char *) params, strlen((char *) params), 100);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fd33 	bl	80001d0 <strlen>
 800076a:	4603      	mov	r3, r0
 800076c:	b29a      	uxth	r2, r3
 800076e:	2364      	movs	r3, #100	@ 0x64
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	4802      	ldr	r0, [pc, #8]	@ (800077c <TellerTask+0x20>)
 8000774:	f002 fc08 	bl	8002f88 <HAL_UART_Transmit>

	for (;;);
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <TellerTask+0x1c>
 800077c:	2000008c 	.word	0x2000008c

08000780 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000788:	2001      	movs	r0, #1
 800078a:	f003 fdeb 	bl	8004364 <osDelay>
 800078e:	e7fb      	b.n	8000788 <StartDefaultTask+0x8>

08000790 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007a0:	d101      	bne.n	80007a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007a2:	f000 f9d1 	bl	8000b48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b2:	b672      	cpsid	i
}
 80007b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b6:	bf00      	nop
 80007b8:	e7fd      	b.n	80007b6 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <HAL_MspInit+0x4c>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007c6:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <HAL_MspInit+0x4c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <HAL_MspInit+0x4c>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b0b      	ldr	r3, [pc, #44]	@ (8000808 <HAL_MspInit+0x4c>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007de:	4a0a      	ldr	r2, [pc, #40]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <HAL_MspInit+0x4c>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	210f      	movs	r1, #15
 80007f6:	f06f 0001 	mvn.w	r0, #1
 80007fa:	f000 fa7d 	bl	8000cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b0a6      	sub	sp, #152	@ 0x98
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2288      	movs	r2, #136	@ 0x88
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f006 fa73 	bl	8006d08 <memset>
  if(hrng->Instance==RNG)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a12      	ldr	r2, [pc, #72]	@ (8000870 <HAL_RNG_MspInit+0x64>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d11c      	bne.n	8000866 <HAL_RNG_MspInit+0x5a>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800082c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000830:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_MSI;
 8000832:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 8000836:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800083a:	f107 0310 	add.w	r3, r7, #16
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fb6c 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <HAL_RNG_MspInit+0x42>
    {
      Error_Handler();
 800084a:	f7ff ffb0 	bl	80007ae <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <HAL_RNG_MspInit+0x68>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a08      	ldr	r2, [pc, #32]	@ (8000874 <HAL_RNG_MspInit+0x68>)
 8000854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <HAL_RNG_MspInit+0x68>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8000866:	bf00      	nop
 8000868:	3798      	adds	r7, #152	@ 0x98
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	50060800 	.word	0x50060800
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0ac      	sub	sp, #176	@ 0xb0
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2288      	movs	r2, #136	@ 0x88
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f006 fa35 	bl	8006d08 <memset>
  if(huart->Instance==USART2)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a25      	ldr	r2, [pc, #148]	@ (8000938 <HAL_UART_MspInit+0xc0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d143      	bne.n	8000930 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fb31 	bl	8001f1c <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008c0:	f7ff ff75 	bl	80007ae <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <HAL_UART_MspInit+0xc4>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008c8:	4a1c      	ldr	r2, [pc, #112]	@ (800093c <HAL_UART_MspInit+0xc4>)
 80008ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d0:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <HAL_UART_MspInit+0xc4>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b17      	ldr	r3, [pc, #92]	@ (800093c <HAL_UART_MspInit+0xc4>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e0:	4a16      	ldr	r2, [pc, #88]	@ (800093c <HAL_UART_MspInit+0xc4>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e8:	4b14      	ldr	r3, [pc, #80]	@ (800093c <HAL_UART_MspInit+0xc4>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f4:	230c      	movs	r3, #12
 80008f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090c:	2307      	movs	r3, #7
 800090e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091c:	f000 fa96 	bl	8000e4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2105      	movs	r1, #5
 8000924:	2026      	movs	r0, #38	@ 0x26
 8000926:	f000 f9e7 	bl	8000cf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800092a:	2026      	movs	r0, #38	@ 0x26
 800092c:	f000 fa00 	bl	8000d30 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000930:	bf00      	nop
 8000932:	37b0      	adds	r7, #176	@ 0xb0
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004400 	.word	0x40004400
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	@ 0x38
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800094e:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <HAL_InitTick+0xe0>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000952:	4a33      	ldr	r2, [pc, #204]	@ (8000a20 <HAL_InitTick+0xe0>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6593      	str	r3, [r2, #88]	@ 0x58
 800095a:	4b31      	ldr	r3, [pc, #196]	@ (8000a20 <HAL_InitTick+0xe0>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000966:	f107 0210 	add.w	r2, r7, #16
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4611      	mov	r1, r2
 8000970:	4618      	mov	r0, r3
 8000972:	f001 fa41 	bl	8001df8 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000976:	6a3b      	ldr	r3, [r7, #32]
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800097a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800097c:	2b00      	cmp	r3, #0
 800097e:	d103      	bne.n	8000988 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000980:	f001 fa0e 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8000984:	6378      	str	r0, [r7, #52]	@ 0x34
 8000986:	e004      	b.n	8000992 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000988:	f001 fa0a 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 800098c:	4603      	mov	r3, r0
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000994:	4a23      	ldr	r2, [pc, #140]	@ (8000a24 <HAL_InitTick+0xe4>)
 8000996:	fba2 2303 	umull	r2, r3, r2, r3
 800099a:	0c9b      	lsrs	r3, r3, #18
 800099c:	3b01      	subs	r3, #1
 800099e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80009a0:	4b21      	ldr	r3, [pc, #132]	@ (8000a28 <HAL_InitTick+0xe8>)
 80009a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009a6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a28 <HAL_InitTick+0xe8>)
 80009aa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009ae:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <HAL_InitTick+0xe8>)
 80009b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009b4:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a28 <HAL_InitTick+0xe8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <HAL_InitTick+0xe8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <HAL_InitTick+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80009c8:	4817      	ldr	r0, [pc, #92]	@ (8000a28 <HAL_InitTick+0xe8>)
 80009ca:	f001 ffca 	bl	8002962 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d11b      	bne.n	8000a14 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80009dc:	4812      	ldr	r0, [pc, #72]	@ (8000a28 <HAL_InitTick+0xe8>)
 80009de:	f002 f821 	bl	8002a24 <HAL_TIM_Base_Start_IT>
 80009e2:	4603      	mov	r3, r0
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d111      	bne.n	8000a14 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009f0:	201c      	movs	r0, #28
 80009f2:	f000 f99d 	bl	8000d30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d808      	bhi.n	8000a0e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	201c      	movs	r0, #28
 8000a02:	f000 f979 	bl	8000cf8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a06:	4a09      	ldr	r2, [pc, #36]	@ (8000a2c <HAL_InitTick+0xec>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	e002      	b.n	8000a14 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3738      	adds	r7, #56	@ 0x38
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	20000118 	.word	0x20000118
 8000a2c:	20000004 	.word	0x20000004

08000a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <NMI_Handler+0x4>

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <HardFault_Handler+0x4>

08000a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <MemManage_Handler+0x4>

08000a48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <BusFault_Handler+0x4>

08000a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <UsageFault_Handler+0x4>

08000a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a6c:	4802      	ldr	r0, [pc, #8]	@ (8000a78 <TIM2_IRQHandler+0x10>)
 8000a6e:	f002 f849 	bl	8002b04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	20000118 	.word	0x20000118

08000a7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <USART2_IRQHandler+0x10>)
 8000a82:	f002 fb0b 	bl	800309c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	2000008c 	.word	0x2000008c

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopForever+0xe>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopForever+0x16>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f006 f96f 	bl	8006dc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ae6:	f7ff fcf3 	bl	80004d0 <main>

08000aea <LoopForever>:

LoopForever:
    b LoopForever
 8000aea:	e7fe      	b.n	8000aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000af8:	08006fb8 	.word	0x08006fb8
  ldr r2, =_sbss
 8000afc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b00:	20001c48 	.word	0x20001c48

08000b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC1_2_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_Init+0x3c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a0b      	ldr	r2, [pc, #44]	@ (8000b44 <HAL_Init+0x3c>)
 8000b18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f000 f8df 	bl	8000ce2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b24:	200f      	movs	r0, #15
 8000b26:	f7ff ff0b 	bl	8000940 <HAL_InitTick>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	71fb      	strb	r3, [r7, #7]
 8000b34:	e001      	b.n	8000b3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b36:	f7ff fe41 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40022000 	.word	0x40022000

08000b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <HAL_IncTick+0x20>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_IncTick+0x24>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4413      	add	r3, r2
 8000b58:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <HAL_IncTick+0x24>)
 8000b5a:	6013      	str	r3, [r2, #0]
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	20000164 	.word	0x20000164

08000b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return uwTick;
 8000b74:	4b03      	ldr	r3, [pc, #12]	@ (8000b84 <HAL_GetTick+0x14>)
 8000b76:	681b      	ldr	r3, [r3, #0]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000164 	.word	0x20000164

08000b88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f003 0307 	and.w	r3, r3, #7
 8000b96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b98:	4b0c      	ldr	r3, [pc, #48]	@ (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bba:	4a04      	ldr	r2, [pc, #16]	@ (8000bcc <__NVIC_SetPriorityGrouping+0x44>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	60d3      	str	r3, [r2, #12]
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd4:	4b04      	ldr	r3, [pc, #16]	@ (8000be8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0a1b      	lsrs	r3, r3, #8
 8000bda:	f003 0307 	and.w	r3, r3, #7
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db0b      	blt.n	8000c16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f003 021f 	and.w	r2, r3, #31
 8000c04:	4907      	ldr	r1, [pc, #28]	@ (8000c24 <__NVIC_EnableIRQ+0x38>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	095b      	lsrs	r3, r3, #5
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	@ (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	@ 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff ff4c 	bl	8000b88 <__NVIC_SetPriorityGrouping>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	60b9      	str	r1, [r7, #8]
 8000d02:	607a      	str	r2, [r7, #4]
 8000d04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0a:	f7ff ff61 	bl	8000bd0 <__NVIC_GetPriorityGrouping>
 8000d0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	6978      	ldr	r0, [r7, #20]
 8000d16:	f7ff ffb1 	bl	8000c7c <NVIC_EncodePriority>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d20:	4611      	mov	r1, r2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff80 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff54 	bl	8000bec <__NVIC_EnableIRQ>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d008      	beq.n	8000d76 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2204      	movs	r2, #4
 8000d68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e022      	b.n	8000dbc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 020e 	bic.w	r2, r2, #14
 8000d84:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0201 	bic.w	r2, r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	f003 021c 	and.w	r2, r3, #28
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	2101      	movs	r1, #1
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2201      	movs	r2, #1
 8000dae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d005      	beq.n	8000dec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2204      	movs	r2, #4
 8000de4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	73fb      	strb	r3, [r7, #15]
 8000dea:	e029      	b.n	8000e40 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 020e 	bic.w	r2, r2, #14
 8000dfa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f022 0201 	bic.w	r2, r2, #1
 8000e0a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e10:	f003 021c 	and.w	r2, r3, #28
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e1e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2201      	movs	r2, #1
 8000e24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	4798      	blx	r3
    }
  }
  return status;
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e17f      	b.n	800115c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8171 	beq.w	8001156 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d005      	beq.n	8000e8c <HAL_GPIO_Init+0x40>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 0201 	and.w	r2, r3, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d118      	bne.n	8000f2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	08db      	lsrs	r3, r3, #3
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d017      	beq.n	8000f68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	6939      	ldr	r1, [r7, #16]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80ac 	beq.w	8001156 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800117c <HAL_GPIO_Init+0x330>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001002:	4a5e      	ldr	r2, [pc, #376]	@ (800117c <HAL_GPIO_Init+0x330>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	6613      	str	r3, [r2, #96]	@ 0x60
 800100a:	4b5c      	ldr	r3, [pc, #368]	@ (800117c <HAL_GPIO_Init+0x330>)
 800100c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001016:	4a5a      	ldr	r2, [pc, #360]	@ (8001180 <HAL_GPIO_Init+0x334>)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001022:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	220f      	movs	r2, #15
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001040:	d025      	beq.n	800108e <HAL_GPIO_Init+0x242>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4f      	ldr	r2, [pc, #316]	@ (8001184 <HAL_GPIO_Init+0x338>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d01f      	beq.n	800108a <HAL_GPIO_Init+0x23e>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a4e      	ldr	r2, [pc, #312]	@ (8001188 <HAL_GPIO_Init+0x33c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d019      	beq.n	8001086 <HAL_GPIO_Init+0x23a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4d      	ldr	r2, [pc, #308]	@ (800118c <HAL_GPIO_Init+0x340>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d013      	beq.n	8001082 <HAL_GPIO_Init+0x236>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a4c      	ldr	r2, [pc, #304]	@ (8001190 <HAL_GPIO_Init+0x344>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00d      	beq.n	800107e <HAL_GPIO_Init+0x232>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a4b      	ldr	r2, [pc, #300]	@ (8001194 <HAL_GPIO_Init+0x348>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d007      	beq.n	800107a <HAL_GPIO_Init+0x22e>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a4a      	ldr	r2, [pc, #296]	@ (8001198 <HAL_GPIO_Init+0x34c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d101      	bne.n	8001076 <HAL_GPIO_Init+0x22a>
 8001072:	2306      	movs	r3, #6
 8001074:	e00c      	b.n	8001090 <HAL_GPIO_Init+0x244>
 8001076:	2307      	movs	r3, #7
 8001078:	e00a      	b.n	8001090 <HAL_GPIO_Init+0x244>
 800107a:	2305      	movs	r3, #5
 800107c:	e008      	b.n	8001090 <HAL_GPIO_Init+0x244>
 800107e:	2304      	movs	r3, #4
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x244>
 8001082:	2303      	movs	r3, #3
 8001084:	e004      	b.n	8001090 <HAL_GPIO_Init+0x244>
 8001086:	2302      	movs	r3, #2
 8001088:	e002      	b.n	8001090 <HAL_GPIO_Init+0x244>
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_GPIO_Init+0x244>
 800108e:	2300      	movs	r3, #0
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	f002 0203 	and.w	r2, r2, #3
 8001096:	0092      	lsls	r2, r2, #2
 8001098:	4093      	lsls	r3, r2
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010a0:	4937      	ldr	r1, [pc, #220]	@ (8001180 <HAL_GPIO_Init+0x334>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	089b      	lsrs	r3, r3, #2
 80010a6:	3302      	adds	r3, #2
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ae:	4b3b      	ldr	r3, [pc, #236]	@ (800119c <HAL_GPIO_Init+0x350>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43db      	mvns	r3, r3
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d2:	4a32      	ldr	r2, [pc, #200]	@ (800119c <HAL_GPIO_Init+0x350>)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d8:	4b30      	ldr	r3, [pc, #192]	@ (800119c <HAL_GPIO_Init+0x350>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010fc:	4a27      	ldr	r2, [pc, #156]	@ (800119c <HAL_GPIO_Init+0x350>)
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001102:	4b26      	ldr	r3, [pc, #152]	@ (800119c <HAL_GPIO_Init+0x350>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	43db      	mvns	r3, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001126:	4a1d      	ldr	r2, [pc, #116]	@ (800119c <HAL_GPIO_Init+0x350>)
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <HAL_GPIO_Init+0x350>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43db      	mvns	r3, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <HAL_GPIO_Init+0x350>)
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fa22 f303 	lsr.w	r3, r2, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	f47f ae78 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	40010000 	.word	0x40010000
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800
 800118c:	48000c00 	.word	0x48000c00
 8001190:	48001000 	.word	0x48001000
 8001194:	48001400 	.word	0x48001400
 8001198:	48001800 	.word	0x48001800
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011bc:	e002      	b.n	80011c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011c4:	bf00      	nop
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a04      	ldr	r2, [pc, #16]	@ (80011ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011f4:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <HAL_PWREx_GetVoltageRange+0x18>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40007000 	.word	0x40007000

0800120c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800121a:	d130      	bne.n	800127e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800121c:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001224:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001228:	d038      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001232:	4a1e      	ldr	r2, [pc, #120]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001234:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123a:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2232      	movs	r2, #50	@ 0x32
 8001240:	fb02 f303 	mul.w	r3, r2, r3
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0c9b      	lsrs	r3, r3, #18
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001250:	e002      	b.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	3b01      	subs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001258:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001264:	d102      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f2      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001278:	d110      	bne.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e00f      	b.n	800129e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800127e:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800128a:	d007      	beq.n	800129c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800128c:	4b07      	ldr	r3, [pc, #28]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001294:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800129a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40007000 	.word	0x40007000
 80012b0:	20000000 	.word	0x20000000
 80012b4:	431bde83 	.word	0x431bde83

080012b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e3ca      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ca:	4b97      	ldr	r3, [pc, #604]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012d4:	4b94      	ldr	r3, [pc, #592]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 80e4 	beq.w	80014b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_OscConfig+0x4a>
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	f040 808b 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f040 8087 	bne.w	8001410 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001302:	4b89      	ldr	r3, [pc, #548]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x62>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e3a2      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1a      	ldr	r2, [r3, #32]
 800131e:	4b82      	ldr	r3, [pc, #520]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d004      	beq.n	8001334 <HAL_RCC_OscConfig+0x7c>
 800132a:	4b7f      	ldr	r3, [pc, #508]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001332:	e005      	b.n	8001340 <HAL_RCC_OscConfig+0x88>
 8001334:	4b7c      	ldr	r3, [pc, #496]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800133a:	091b      	lsrs	r3, r3, #4
 800133c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001340:	4293      	cmp	r3, r2
 8001342:	d223      	bcs.n	800138c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fd87 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e383      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001358:	4b73      	ldr	r3, [pc, #460]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a72      	ldr	r2, [pc, #456]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800135e:	f043 0308 	orr.w	r3, r3, #8
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b70      	ldr	r3, [pc, #448]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	496d      	ldr	r1, [pc, #436]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001372:	4313      	orrs	r3, r2
 8001374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001376:	4b6c      	ldr	r3, [pc, #432]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	4968      	ldr	r1, [pc, #416]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
 800138a:	e025      	b.n	80013d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800138c:	4b66      	ldr	r3, [pc, #408]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4960      	ldr	r1, [pc, #384]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013aa:	4b5f      	ldr	r3, [pc, #380]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	495b      	ldr	r1, [pc, #364]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a1b      	ldr	r3, [r3, #32]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 fd47 	bl	8001e5c <RCC_SetFlashLatencyFromMSIRange>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e343      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013d8:	f000 fc4a 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b52      	ldr	r3, [pc, #328]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	091b      	lsrs	r3, r3, #4
 80013e4:	f003 030f 	and.w	r3, r3, #15
 80013e8:	4950      	ldr	r1, [pc, #320]	@ (800152c <HAL_RCC_OscConfig+0x274>)
 80013ea:	5ccb      	ldrb	r3, [r1, r3]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001530 <HAL_RCC_OscConfig+0x278>)
 80013f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <HAL_RCC_OscConfig+0x27c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fa9f 	bl	8000940 <HAL_InitTick>
 8001402:	4603      	mov	r3, r0
 8001404:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d052      	beq.n	80014b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	e327      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d032      	beq.n	800147e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001418:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a42      	ldr	r2, [pc, #264]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001424:	f7ff fba4 	bl	8000b70 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800142c:	f7ff fba0 	bl	8000b70 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e310      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800143e:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b37      	ldr	r3, [pc, #220]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a36      	ldr	r2, [pc, #216]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b34      	ldr	r3, [pc, #208]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4931      	ldr	r1, [pc, #196]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001468:	4b2f      	ldr	r3, [pc, #188]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	492c      	ldr	r1, [pc, #176]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]
 800147c:	e01a      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800147e:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a29      	ldr	r2, [pc, #164]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800148a:	f7ff fb71 	bl	8000b70 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001492:	f7ff fb6d 	bl	8000b70 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e2dd      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014a4:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x1da>
 80014b0:	e000      	b.n	80014b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d074      	beq.n	80015aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d005      	beq.n	80014d2 <HAL_RCC_OscConfig+0x21a>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	2b0c      	cmp	r3, #12
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d10b      	bne.n	80014ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d064      	beq.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d160      	bne.n	80015a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e2ba      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f2:	d106      	bne.n	8001502 <HAL_RCC_OscConfig+0x24a>
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 80014fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	e026      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800150a:	d115      	bne.n	8001538 <HAL_RCC_OscConfig+0x280>
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 8001512:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b03      	ldr	r3, [pc, #12]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a02      	ldr	r2, [pc, #8]	@ (8001528 <HAL_RCC_OscConfig+0x270>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e014      	b.n	8001550 <HAL_RCC_OscConfig+0x298>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	08006f60 	.word	0x08006f60
 8001530:	20000000 	.word	0x20000000
 8001534:	20000004 	.word	0x20000004
 8001538:	4ba0      	ldr	r3, [pc, #640]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a9f      	ldr	r2, [pc, #636]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800153e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b9d      	ldr	r3, [pc, #628]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a9c      	ldr	r2, [pc, #624]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800154e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d013      	beq.n	8001580 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fb0a 	bl	8000b70 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001560:	f7ff fb06 	bl	8000b70 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b64      	cmp	r3, #100	@ 0x64
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e276      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001572:	4b92      	ldr	r3, [pc, #584]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x2a8>
 800157e:	e014      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff faf6 	bl	8000b70 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff faf2 	bl	8000b70 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	@ 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e262      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800159a:	4b88      	ldr	r3, [pc, #544]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x2d0>
 80015a6:	e000      	b.n	80015aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d060      	beq.n	8001678 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	2b04      	cmp	r3, #4
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x310>
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2b0c      	cmp	r3, #12
 80015c0:	d119      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d116      	bne.n	80015f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c8:	4b7c      	ldr	r3, [pc, #496]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x328>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e23f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e0:	4b76      	ldr	r3, [pc, #472]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	4973      	ldr	r1, [pc, #460]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f4:	e040      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d023      	beq.n	8001646 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015fe:	4b6f      	ldr	r3, [pc, #444]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a6e      	ldr	r2, [pc, #440]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160a:	f7ff fab1 	bl	8000b70 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff faad 	bl	8000b70 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e21d      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001624:	4b65      	ldr	r3, [pc, #404]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b62      	ldr	r3, [pc, #392]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	495f      	ldr	r1, [pc, #380]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b5d      	ldr	r3, [pc, #372]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a5c      	ldr	r2, [pc, #368]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800164c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fa8d 	bl	8000b70 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fa89 	bl	8000b70 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1f9      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800166c:	4b53      	ldr	r3, [pc, #332]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03c      	beq.n	80016fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	695b      	ldr	r3, [r3, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01c      	beq.n	80016c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800168c:	4b4b      	ldr	r3, [pc, #300]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800168e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001692:	4a4a      	ldr	r2, [pc, #296]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169c:	f7ff fa68 	bl	8000b70 <HAL_GetTick>
 80016a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016a4:	f7ff fa64 	bl	8000b70 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1d4      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016b6:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ef      	beq.n	80016a4 <HAL_RCC_OscConfig+0x3ec>
 80016c4:	e01b      	b.n	80016fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016c6:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016cc:	4a3b      	ldr	r2, [pc, #236]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff fa4b 	bl	8000b70 <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016de:	f7ff fa47 	bl	8000b70 <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e1b7      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016f0:	4b32      	ldr	r3, [pc, #200]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80016f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ef      	bne.n	80016de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 80a6 	beq.w	8001858 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10d      	bne.n	8001738 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b27      	ldr	r3, [pc, #156]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800171e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001720:	4a26      	ldr	r2, [pc, #152]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001726:	6593      	str	r3, [r2, #88]	@ 0x58
 8001728:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800172a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001734:	2301      	movs	r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001738:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d118      	bne.n	8001776 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001744:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a1d      	ldr	r2, [pc, #116]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001750:	f7ff fa0e 	bl	8000b70 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001758:	f7ff fa0a 	bl	8000b70 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e17a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800176a:	4b15      	ldr	r3, [pc, #84]	@ (80017c0 <HAL_RCC_OscConfig+0x508>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d108      	bne.n	8001790 <HAL_RCC_OscConfig+0x4d8>
 800177e:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800178e:	e029      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2b05      	cmp	r3, #5
 8001796:	d115      	bne.n	80017c4 <HAL_RCC_OscConfig+0x50c>
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179e:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ae:	4a03      	ldr	r2, [pc, #12]	@ (80017bc <HAL_RCC_OscConfig+0x504>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017b8:	e014      	b.n	80017e4 <HAL_RCC_OscConfig+0x52c>
 80017ba:	bf00      	nop
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40007000 	.word	0x40007000
 80017c4:	4b9c      	ldr	r3, [pc, #624]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017ca:	4a9b      	ldr	r2, [pc, #620]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017d4:	4b98      	ldr	r3, [pc, #608]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017da:	4a97      	ldr	r2, [pc, #604]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80017dc:	f023 0304 	bic.w	r3, r3, #4
 80017e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d016      	beq.n	800181a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f9c0 	bl	8000b70 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	e00a      	b.n	800180a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff f9bc 	bl	8000b70 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001802:	4293      	cmp	r3, r2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e12a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800180a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800180c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0ed      	beq.n	80017f4 <HAL_RCC_OscConfig+0x53c>
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181a:	f7ff f9a9 	bl	8000b70 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001822:	f7ff f9a5 	bl	8000b70 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e113      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001838:	4b7f      	ldr	r3, [pc, #508]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1ed      	bne.n	8001822 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001846:	7ffb      	ldrb	r3, [r7, #31]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d105      	bne.n	8001858 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800184c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800184e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001850:	4a79      	ldr	r2, [pc, #484]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001852:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001856:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80fe 	beq.w	8001a5e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001866:	2b02      	cmp	r3, #2
 8001868:	f040 80d0 	bne.w	8001a0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800186c:	4b72      	ldr	r3, [pc, #456]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0203 	and.w	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	429a      	cmp	r2, r3
 800187e:	d130      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	3b01      	subs	r3, #1
 800188c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d127      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800189c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800189e:	429a      	cmp	r2, r3
 80018a0:	d11f      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018ac:	2a07      	cmp	r2, #7
 80018ae:	bf14      	ite	ne
 80018b0:	2201      	movne	r2, #1
 80018b2:	2200      	moveq	r2, #0
 80018b4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d113      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c4:	085b      	lsrs	r3, r3, #1
 80018c6:	3b01      	subs	r3, #1
 80018c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d109      	bne.n	80018e2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	085b      	lsrs	r3, r3, #1
 80018da:	3b01      	subs	r3, #1
 80018dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018de:	429a      	cmp	r2, r3
 80018e0:	d06e      	beq.n	80019c0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	2b0c      	cmp	r3, #12
 80018e6:	d069      	beq.n	80019bc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e8:	4b53      	ldr	r3, [pc, #332]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018f4:	4b50      	ldr	r3, [pc, #320]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0ad      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001904:	4b4c      	ldr	r3, [pc, #304]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a4b      	ldr	r2, [pc, #300]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800190a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800190e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001910:	f7ff f92e 	bl	8000b70 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f92a 	bl	8000b70 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e09a      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800192a:	4b43      	ldr	r3, [pc, #268]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001936:	4b40      	ldr	r3, [pc, #256]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	4b40      	ldr	r3, [pc, #256]	@ (8001a3c <HAL_RCC_OscConfig+0x784>)
 800193c:	4013      	ands	r3, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001946:	3a01      	subs	r2, #1
 8001948:	0112      	lsls	r2, r2, #4
 800194a:	4311      	orrs	r1, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001950:	0212      	lsls	r2, r2, #8
 8001952:	4311      	orrs	r1, r2
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001958:	0852      	lsrs	r2, r2, #1
 800195a:	3a01      	subs	r2, #1
 800195c:	0552      	lsls	r2, r2, #21
 800195e:	4311      	orrs	r1, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001964:	0852      	lsrs	r2, r2, #1
 8001966:	3a01      	subs	r2, #1
 8001968:	0652      	lsls	r2, r2, #25
 800196a:	4311      	orrs	r1, r2
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001970:	0912      	lsrs	r2, r2, #4
 8001972:	0452      	lsls	r2, r2, #17
 8001974:	430a      	orrs	r2, r1
 8001976:	4930      	ldr	r1, [pc, #192]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001978:	4313      	orrs	r3, r2
 800197a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800197c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a2d      	ldr	r2, [pc, #180]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001982:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001986:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001988:	4b2b      	ldr	r3, [pc, #172]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 800198e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001992:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001994:	f7ff f8ec 	bl	8000b70 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff f8e8 	bl	8000b70 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e058      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ae:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019ba:	e050      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e04f      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d148      	bne.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b17      	ldr	r3, [pc, #92]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a16      	ldr	r2, [pc, #88]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e4:	f7ff f8c4 	bl	8000b70 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f8c0 	bl	8000b70 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e030      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x734>
 8001a0a:	e028      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d023      	beq.n	8001a5a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a08      	ldr	r2, [pc, #32]	@ (8001a38 <HAL_RCC_OscConfig+0x780>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f8a7 	bl	8000b70 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e00c      	b.n	8001a40 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f8a3 	bl	8000b70 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d905      	bls.n	8001a40 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e013      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ec      	bne.n	8001a26 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a4c:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a4e:	68da      	ldr	r2, [r3, #12]
 8001a50:	4905      	ldr	r1, [pc, #20]	@ (8001a68 <HAL_RCC_OscConfig+0x7b0>)
 8001a52:	4b06      	ldr	r3, [pc, #24]	@ (8001a6c <HAL_RCC_OscConfig+0x7b4>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60cb      	str	r3, [r1, #12]
 8001a58:	e001      	b.n	8001a5e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e000      	b.n	8001a60 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3720      	adds	r7, #32
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	feeefffc 	.word	0xfeeefffc

08001a70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0e7      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a84:	4b75      	ldr	r3, [pc, #468]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d910      	bls.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b72      	ldr	r3, [pc, #456]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4970      	ldr	r1, [pc, #448]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cf      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d010      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	4b66      	ldr	r3, [pc, #408]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d908      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad0:	4b63      	ldr	r3, [pc, #396]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	4960      	ldr	r1, [pc, #384]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d04c      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d121      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0a6      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	4b54      	ldr	r3, [pc, #336]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d115      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e09a      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b26:	4b4e      	ldr	r3, [pc, #312]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e08e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b36:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e086      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b46:	4b46      	ldr	r3, [pc, #280]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f023 0203 	bic.w	r2, r3, #3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4943      	ldr	r1, [pc, #268]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b58:	f7ff f80a 	bl	8000b70 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f806 	bl	8000b70 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e06e      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 020c 	and.w	r2, r3, #12
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d1eb      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d208      	bcs.n	8001bb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	492b      	ldr	r1, [pc, #172]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bb6:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d210      	bcs.n	8001be6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f023 0207 	bic.w	r2, r3, #7
 8001bcc:	4923      	ldr	r1, [pc, #140]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_ClockConfig+0x1ec>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e036      	b.n	8001c54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d008      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4918      	ldr	r1, [pc, #96]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d009      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4910      	ldr	r1, [pc, #64]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c24:	f000 f824 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	091b      	lsrs	r3, r3, #4
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	490b      	ldr	r1, [pc, #44]	@ (8001c64 <HAL_RCC_ClockConfig+0x1f4>)
 8001c36:	5ccb      	ldrb	r3, [r1, r3]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCC_ClockConfig+0x1fc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fe79 	bl	8000940 <HAL_InitTick>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c52:	7afb      	ldrb	r3, [r7, #11]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40021000 	.word	0x40021000
 8001c64:	08006f60 	.word	0x08006f60
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	@ 0x24
 8001c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c88:	4b3b      	ldr	r3, [pc, #236]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	2b0c      	cmp	r3, #12
 8001c9c:	d121      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d11e      	bne.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ca4:	4b34      	ldr	r3, [pc, #208]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	e005      	b.n	8001ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10d      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d102      	bne.n	8001cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ce8:	4b25      	ldr	r3, [pc, #148]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	e004      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	2b0c      	cmp	r3, #12
 8001cfc:	d134      	bne.n	8001d68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d003      	beq.n	8001d16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d003      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0xac>
 8001d14:	e005      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d16:	4b1a      	ldr	r3, [pc, #104]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d18:	617b      	str	r3, [r7, #20]
      break;
 8001d1a:	e005      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d1e:	617b      	str	r3, [r7, #20]
      break;
 8001d20:	e002      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	617b      	str	r3, [r7, #20]
      break;
 8001d26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d28:	4b13      	ldr	r3, [pc, #76]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	3301      	adds	r3, #1
 8001d34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	0a1b      	lsrs	r3, r3, #8
 8001d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	fb03 f202 	mul.w	r2, r3, r2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	0e5b      	lsrs	r3, r3, #25
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d68:	69bb      	ldr	r3, [r7, #24]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3724      	adds	r7, #36	@ 0x24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08006f78 	.word	0x08006f78
 8001d80:	00f42400 	.word	0x00f42400
 8001d84:	007a1200 	.word	0x007a1200

08001d88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	20000000 	.word	0x20000000

08001da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001da4:	f7ff fff0 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001da8:	4602      	mov	r2, r0
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4904      	ldr	r1, [pc, #16]	@ (8001dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001db6:	5ccb      	ldrb	r3, [r1, r3]
 8001db8:	f003 031f 	and.w	r3, r3, #31
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08006f70 	.word	0x08006f70

08001dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dd0:	f7ff ffda 	bl	8001d88 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0adb      	lsrs	r3, r3, #11
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4904      	ldr	r1, [pc, #16]	@ (8001df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001de2:	5ccb      	ldrb	r3, [r1, r3]
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08006f70 	.word	0x08006f70

08001df8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	220f      	movs	r2, #15
 8001e06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e08:	4b12      	ldr	r3, [pc, #72]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e14:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e20:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e2c:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	08db      	lsrs	r3, r3, #3
 8001e32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_RCC_GetClockConfig+0x60>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0207 	and.w	r2, r3, #7
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	601a      	str	r2, [r3, #0]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40022000 	.word	0x40022000

08001e5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e74:	f7ff f9bc 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e78:	6178      	str	r0, [r7, #20]
 8001e7a:	e014      	b.n	8001ea6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e7c:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	4a24      	ldr	r2, [pc, #144]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e86:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e88:	4b22      	ldr	r3, [pc, #136]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e94:	f7ff f9ac 	bl	80011f0 <HAL_PWREx_GetVoltageRange>
 8001e98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ea0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eac:	d10b      	bne.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	@ 0x80
 8001eb2:	d919      	bls.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eb8:	d902      	bls.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e013      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e010      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	@ 0x80
 8001eca:	d902      	bls.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ecc:	2303      	movs	r3, #3
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e00a      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b80      	cmp	r3, #128	@ 0x80
 8001ed6:	d102      	bne.n	8001ede <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed8:	2302      	movs	r3, #2
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e004      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b70      	cmp	r3, #112	@ 0x70
 8001ee2:	d101      	bne.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 0207 	bic.w	r2, r3, #7
 8001ef0:	4909      	ldr	r1, [pc, #36]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d001      	beq.n	8001f0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40022000 	.word	0x40022000

08001f1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f24:	2300      	movs	r3, #0
 8001f26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f28:	2300      	movs	r3, #0
 8001f2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d041      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f3c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f40:	d02a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f42:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f46:	d824      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f48:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f4c:	d008      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f52:	d81e      	bhi.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f5c:	d010      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f5e:	e018      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f60:	4b86      	ldr	r3, [pc, #536]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a85      	ldr	r2, [pc, #532]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f6a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f6c:	e015      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 facb 	bl	8002510 <RCCEx_PLLSAI1_Config>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f7e:	e00c      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3320      	adds	r3, #32
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fbb6 	bl	80026f8 <RCCEx_PLLSAI2_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f90:	e003      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	74fb      	strb	r3, [r7, #19]
      break;
 8001f96:	e000      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10b      	bne.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fa0:	4b76      	ldr	r3, [pc, #472]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001fae:	4973      	ldr	r1, [pc, #460]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001fb6:	e001      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fb8:	7cfb      	ldrb	r3, [r7, #19]
 8001fba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001fcc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd0:	d02a      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fd6:	d824      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fdc:	d008      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fe2:	d81e      	bhi.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fec:	d010      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fee:	e018      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ff0:	4b62      	ldr	r3, [pc, #392]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a61      	ldr	r2, [pc, #388]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ffc:	e015      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3304      	adds	r3, #4
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 fa83 	bl	8002510 <RCCEx_PLLSAI1_Config>
 800200a:	4603      	mov	r3, r0
 800200c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800200e:	e00c      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3320      	adds	r3, #32
 8002014:	2100      	movs	r1, #0
 8002016:	4618      	mov	r0, r3
 8002018:	f000 fb6e 	bl	80026f8 <RCCEx_PLLSAI2_Config>
 800201c:	4603      	mov	r3, r0
 800201e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002020:	e003      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	74fb      	strb	r3, [r7, #19]
      break;
 8002026:	e000      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10b      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002030:	4b52      	ldr	r3, [pc, #328]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002036:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800203e:	494f      	ldr	r1, [pc, #316]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002046:	e001      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 80a0 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002074:	4b41      	ldr	r3, [pc, #260]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002078:	4a40      	ldr	r2, [pc, #256]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002080:	4b3e      	ldr	r3, [pc, #248]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002084:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208c:	2301      	movs	r3, #1
 800208e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4b3b      	ldr	r3, [pc, #236]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a3a      	ldr	r2, [pc, #232]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800209c:	f7fe fd68 	bl	8000b70 <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020a2:	e009      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a4:	f7fe fd64 	bl	8000b70 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d902      	bls.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	74fb      	strb	r3, [r7, #19]
        break;
 80020b6:	e005      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020b8:	4b31      	ldr	r3, [pc, #196]	@ (8002180 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ef      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d15c      	bne.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020ca:	4b2c      	ldr	r3, [pc, #176]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01f      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d019      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020e8:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020f4:	4b21      	ldr	r3, [pc, #132]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020fa:	4a20      	ldr	r2, [pc, #128]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002104:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002114:	4a19      	ldr	r2, [pc, #100]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d016      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fd23 	bl	8000b70 <HAL_GetTick>
 800212a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212c:	e00b      	b.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fd1f 	bl	8000b70 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d902      	bls.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	74fb      	strb	r3, [r7, #19]
            break;
 8002144:	e006      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ec      	beq.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800216a:	4904      	ldr	r1, [pc, #16]	@ (800217c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002172:	e009      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002174:	7cfb      	ldrb	r3, [r7, #19]
 8002176:	74bb      	strb	r3, [r7, #18]
 8002178:	e006      	b.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002188:	7c7b      	ldrb	r3, [r7, #17]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b9e      	ldr	r3, [pc, #632]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002192:	4a9d      	ldr	r2, [pc, #628]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00a      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021a6:	4b98      	ldr	r3, [pc, #608]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ac:	f023 0203 	bic.w	r2, r3, #3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021b4:	4994      	ldr	r1, [pc, #592]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ce:	f023 020c 	bic.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	498c      	ldr	r1, [pc, #560]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0304 	and.w	r3, r3, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00a      	beq.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ea:	4b87      	ldr	r3, [pc, #540]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f8:	4983      	ldr	r1, [pc, #524]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d00a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800220c:	4b7e      	ldr	r3, [pc, #504]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	497b      	ldr	r1, [pc, #492]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	4313      	orrs	r3, r2
 800221e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800222e:	4b76      	ldr	r3, [pc, #472]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002234:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800223c:	4972      	ldr	r1, [pc, #456]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223e:	4313      	orrs	r3, r2
 8002240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00a      	beq.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002250:	4b6d      	ldr	r3, [pc, #436]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002256:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	496a      	ldr	r1, [pc, #424]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	4313      	orrs	r3, r2
 8002262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00a      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002272:	4b65      	ldr	r3, [pc, #404]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002278:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002280:	4961      	ldr	r1, [pc, #388]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002282:	4313      	orrs	r3, r2
 8002284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00a      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002294:	4b5c      	ldr	r3, [pc, #368]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a2:	4959      	ldr	r1, [pc, #356]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b6:	4b54      	ldr	r3, [pc, #336]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022c4:	4950      	ldr	r1, [pc, #320]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	4948      	ldr	r1, [pc, #288]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022fa:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002300:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002308:	493f      	ldr	r1, [pc, #252]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d028      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800231c:	4b3a      	ldr	r3, [pc, #232]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002322:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800232a:	4937      	ldr	r1, [pc, #220]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	4313      	orrs	r3, r2
 800232e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800233a:	d106      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800233c:	4b32      	ldr	r3, [pc, #200]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a31      	ldr	r2, [pc, #196]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002342:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002346:	60d3      	str	r3, [r2, #12]
 8002348:	e011      	b.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800234e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002352:	d10c      	bne.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	2101      	movs	r1, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f000 f8d8 	bl	8002510 <RCCEx_PLLSAI1_Config>
 8002360:	4603      	mov	r3, r0
 8002362:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800236a:	7cfb      	ldrb	r3, [r7, #19]
 800236c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d028      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800237a:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002380:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	491f      	ldr	r1, [pc, #124]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002394:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002398:	d106      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800239a:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	4a1a      	ldr	r2, [pc, #104]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023a4:	60d3      	str	r3, [r2, #12]
 80023a6:	e011      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2101      	movs	r1, #1
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 f8a9 	bl	8002510 <RCCEx_PLLSAI1_Config>
 80023be:	4603      	mov	r3, r0
 80023c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02b      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e6:	4908      	ldr	r1, [pc, #32]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023f6:	d109      	bne.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a02      	ldr	r2, [pc, #8]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002402:	60d3      	str	r3, [r2, #12]
 8002404:	e014      	b.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002410:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002414:	d10c      	bne.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3304      	adds	r3, #4
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f877 	bl	8002510 <RCCEx_PLLSAI1_Config>
 8002422:	4603      	mov	r3, r0
 8002424:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002426:	7cfb      	ldrb	r3, [r7, #19]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d02f      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002442:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800244a:	4928      	ldr	r1, [pc, #160]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002456:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800245a:	d10d      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3304      	adds	r3, #4
 8002460:	2102      	movs	r1, #2
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f854 	bl	8002510 <RCCEx_PLLSAI1_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	74bb      	strb	r3, [r7, #18]
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800247c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002480:	d10c      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3320      	adds	r3, #32
 8002486:	2102      	movs	r1, #2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 f935 	bl	80026f8 <RCCEx_PLLSAI2_Config>
 800248e:	4603      	mov	r3, r0
 8002490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ae:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024b6:	490d      	ldr	r1, [pc, #52]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80024ca:	4b08      	ldr	r3, [pc, #32]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024da:	4904      	ldr	r1, [pc, #16]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3718      	adds	r7, #24
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40021000 	.word	0x40021000

080024f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80024f4:	4b05      	ldr	r3, [pc, #20]	@ (800250c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024fa:	f043 0304 	orr.w	r3, r3, #4
 80024fe:	6013      	str	r3, [r2, #0]
}
 8002500:	bf00      	nop
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40021000 	.word	0x40021000

08002510 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800251e:	4b75      	ldr	r3, [pc, #468]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d018      	beq.n	800255c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800252a:	4b72      	ldr	r3, [pc, #456]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 0203 	and.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d10d      	bne.n	8002556 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
       ||
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002542:	4b6c      	ldr	r3, [pc, #432]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
       ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d047      	beq.n	80025e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	73fb      	strb	r3, [r7, #15]
 800255a:	e044      	b.n	80025e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b03      	cmp	r3, #3
 8002562:	d018      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0x86>
 8002564:	2b03      	cmp	r3, #3
 8002566:	d825      	bhi.n	80025b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002568:	2b01      	cmp	r3, #1
 800256a:	d002      	beq.n	8002572 <RCCEx_PLLSAI1_Config+0x62>
 800256c:	2b02      	cmp	r3, #2
 800256e:	d009      	beq.n	8002584 <RCCEx_PLLSAI1_Config+0x74>
 8002570:	e020      	b.n	80025b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002572:	4b60      	ldr	r3, [pc, #384]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d11d      	bne.n	80025ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002582:	e01a      	b.n	80025ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002584:	4b5b      	ldr	r3, [pc, #364]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800258c:	2b00      	cmp	r3, #0
 800258e:	d116      	bne.n	80025be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002594:	e013      	b.n	80025be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002596:	4b57      	ldr	r3, [pc, #348]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025a2:	4b54      	ldr	r3, [pc, #336]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025b2:	e006      	b.n	80025c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
      break;
 80025b8:	e004      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025ba:	bf00      	nop
 80025bc:	e002      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025be:	bf00      	nop
 80025c0:	e000      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80025c4:	7bfb      	ldrb	r3, [r7, #15]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80025ca:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6819      	ldr	r1, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	430b      	orrs	r3, r1
 80025e0:	4944      	ldr	r1, [pc, #272]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d17d      	bne.n	80026e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025ec:	4b41      	ldr	r3, [pc, #260]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a40      	ldr	r2, [pc, #256]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025f8:	f7fe faba 	bl	8000b70 <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025fe:	e009      	b.n	8002614 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002600:	f7fe fab6 	bl	8000b70 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d902      	bls.n	8002614 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	73fb      	strb	r3, [r7, #15]
        break;
 8002612:	e005      	b.n	8002620 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002614:	4b37      	ldr	r3, [pc, #220]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ef      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d160      	bne.n	80026e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800262c:	4b31      	ldr	r3, [pc, #196]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	0211      	lsls	r1, r2, #8
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	0912      	lsrs	r2, r2, #4
 8002644:	0452      	lsls	r2, r2, #17
 8002646:	430a      	orrs	r2, r1
 8002648:	492a      	ldr	r1, [pc, #168]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	610b      	str	r3, [r1, #16]
 800264e:	e027      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d112      	bne.n	800267c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002656:	4b27      	ldr	r3, [pc, #156]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800265e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6892      	ldr	r2, [r2, #8]
 8002666:	0211      	lsls	r1, r2, #8
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	6912      	ldr	r2, [r2, #16]
 800266c:	0852      	lsrs	r2, r2, #1
 800266e:	3a01      	subs	r2, #1
 8002670:	0552      	lsls	r2, r2, #21
 8002672:	430a      	orrs	r2, r1
 8002674:	491f      	ldr	r1, [pc, #124]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	610b      	str	r3, [r1, #16]
 800267a:	e011      	b.n	80026a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800267c:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002684:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	0211      	lsls	r1, r2, #8
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6952      	ldr	r2, [r2, #20]
 8002692:	0852      	lsrs	r2, r2, #1
 8002694:	3a01      	subs	r2, #1
 8002696:	0652      	lsls	r2, r2, #25
 8002698:	430a      	orrs	r2, r1
 800269a:	4916      	ldr	r1, [pc, #88]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026a0:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a13      	ldr	r2, [pc, #76]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fa60 	bl	8000b70 <HAL_GetTick>
 80026b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026b2:	e009      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026b4:	f7fe fa5c 	bl	8000b70 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	73fb      	strb	r3, [r7, #15]
          break;
 80026c6:	e005      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026c8:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ef      	beq.n	80026b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	4904      	ldr	r1, [pc, #16]	@ (80026f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40021000 	.word	0x40021000

080026f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002706:	4b6a      	ldr	r3, [pc, #424]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	f003 0303 	and.w	r3, r3, #3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d018      	beq.n	8002744 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002712:	4b67      	ldr	r3, [pc, #412]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0203 	and.w	r2, r3, #3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d10d      	bne.n	800273e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
       ||
 8002726:	2b00      	cmp	r3, #0
 8002728:	d009      	beq.n	800273e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800272a:	4b61      	ldr	r3, [pc, #388]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	091b      	lsrs	r3, r3, #4
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
       ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d047      	beq.n	80027ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e044      	b.n	80027ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d018      	beq.n	800277e <RCCEx_PLLSAI2_Config+0x86>
 800274c:	2b03      	cmp	r3, #3
 800274e:	d825      	bhi.n	800279c <RCCEx_PLLSAI2_Config+0xa4>
 8002750:	2b01      	cmp	r3, #1
 8002752:	d002      	beq.n	800275a <RCCEx_PLLSAI2_Config+0x62>
 8002754:	2b02      	cmp	r3, #2
 8002756:	d009      	beq.n	800276c <RCCEx_PLLSAI2_Config+0x74>
 8002758:	e020      	b.n	800279c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800275a:	4b55      	ldr	r3, [pc, #340]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d11d      	bne.n	80027a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800276a:	e01a      	b.n	80027a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800276c:	4b50      	ldr	r3, [pc, #320]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d116      	bne.n	80027a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800277c:	e013      	b.n	80027a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800277e:	4b4c      	ldr	r3, [pc, #304]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10f      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800278a:	4b49      	ldr	r3, [pc, #292]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800279a:	e006      	b.n	80027aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      break;
 80027a0:	e004      	b.n	80027ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a2:	bf00      	nop
 80027a4:	e002      	b.n	80027ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027a6:	bf00      	nop
 80027a8:	e000      	b.n	80027ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80027aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027b2:	4b3f      	ldr	r3, [pc, #252]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6819      	ldr	r1, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	430b      	orrs	r3, r1
 80027c8:	4939      	ldr	r1, [pc, #228]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d167      	bne.n	80028a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80027d4:	4b36      	ldr	r3, [pc, #216]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a35      	ldr	r2, [pc, #212]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e0:	f7fe f9c6 	bl	8000b70 <HAL_GetTick>
 80027e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027e6:	e009      	b.n	80027fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80027e8:	f7fe f9c2 	bl	8000b70 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d902      	bls.n	80027fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	73fb      	strb	r3, [r7, #15]
        break;
 80027fa:	e005      	b.n	8002808 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027fc:	4b2c      	ldr	r3, [pc, #176]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ef      	bne.n	80027e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d14a      	bne.n	80028a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002814:	4b26      	ldr	r3, [pc, #152]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800281c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6892      	ldr	r2, [r2, #8]
 8002824:	0211      	lsls	r1, r2, #8
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	68d2      	ldr	r2, [r2, #12]
 800282a:	0912      	lsrs	r2, r2, #4
 800282c:	0452      	lsls	r2, r2, #17
 800282e:	430a      	orrs	r2, r1
 8002830:	491f      	ldr	r1, [pc, #124]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002832:	4313      	orrs	r3, r2
 8002834:	614b      	str	r3, [r1, #20]
 8002836:	e011      	b.n	800285c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002838:	4b1d      	ldr	r3, [pc, #116]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002840:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	0211      	lsls	r1, r2, #8
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6912      	ldr	r2, [r2, #16]
 800284e:	0852      	lsrs	r2, r2, #1
 8002850:	3a01      	subs	r2, #1
 8002852:	0652      	lsls	r2, r2, #25
 8002854:	430a      	orrs	r2, r1
 8002856:	4916      	ldr	r1, [pc, #88]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800285c:	4b14      	ldr	r3, [pc, #80]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a13      	ldr	r2, [pc, #76]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002868:	f7fe f982 	bl	8000b70 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800286e:	e009      	b.n	8002884 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002870:	f7fe f97e 	bl	8000b70 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	73fb      	strb	r3, [r7, #15]
          break;
 8002882:	e005      	b.n	8002890 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002884:	4b0a      	ldr	r3, [pc, #40]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ef      	beq.n	8002870 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d106      	bne.n	80028a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002896:	4b06      	ldr	r3, [pc, #24]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	4904      	ldr	r1, [pc, #16]	@ (80028b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40021000 	.word	0x40021000

080028b4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e049      	b.n	800295a <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	795b      	ldrb	r3, [r3, #5]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fd ff98 	bl	800080c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CED */
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f042 0204 	orr.w	r2, r2, #4
 80028f0:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028fc:	2b40      	cmp	r3, #64	@ 0x40
 80028fe:	d104      	bne.n	800290a <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2204      	movs	r2, #4
 8002904:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e027      	b.n	800295a <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800290a:	f7fe f931 	bl	8000b70 <HAL_GetTick>
 800290e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8002910:	e015      	b.n	800293e <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8002912:	f7fe f92d 	bl	8000b70 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d90e      	bls.n	800293e <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d007      	beq.n	800293e <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2204      	movs	r2, #4
 8002932:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00d      	b.n	800295a <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d1e2      	bne.n	8002912 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e049      	b.n	8002a08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f841 	bl	8002a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2202      	movs	r2, #2
 8002992:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f000 f9df 	bl	8002d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2201      	movs	r2, #1
 80029aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr

08002a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d001      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e04f      	b.n	8002adc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a23      	ldr	r2, [pc, #140]	@ (8002ae8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01d      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0x76>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a66:	d018      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0x76>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002aec <HAL_TIM_Base_Start_IT+0xc8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0x76>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a1e      	ldr	r2, [pc, #120]	@ (8002af0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00e      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0x76>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1c      	ldr	r2, [pc, #112]	@ (8002af4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d009      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0x76>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002af8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d004      	beq.n	8002a9a <HAL_TIM_Base_Start_IT+0x76>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a19      	ldr	r2, [pc, #100]	@ (8002afc <HAL_TIM_Base_Start_IT+0xd8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d115      	bne.n	8002ac6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	4b17      	ldr	r3, [pc, #92]	@ (8002b00 <HAL_TIM_Base_Start_IT+0xdc>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b06      	cmp	r3, #6
 8002aaa:	d015      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0xb4>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ab2:	d011      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0201 	orr.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ac4:	e008      	b.n	8002ad8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e000      	b.n	8002ada <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ad8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	40012c00 	.word	0x40012c00
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800
 8002af4:	40000c00 	.word	0x40000c00
 8002af8:	40013400 	.word	0x40013400
 8002afc:	40014000 	.word	0x40014000
 8002b00:	00010007 	.word	0x00010007

08002b04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d020      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d01b      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0202 	mvn.w	r2, #2
 8002b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f8e9 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8db 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f8ec 	bl	8002d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0204 	mvn.w	r2, #4
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8c3 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f8b5 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f8c6 	bl	8002d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0208 	mvn.w	r2, #8
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2204      	movs	r2, #4
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f89d 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f88f 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8a0 	bl	8002d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d020      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0210 	mvn.w	r2, #16
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2208      	movs	r2, #8
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f877 	bl	8002d26 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f869 	bl	8002d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f87a 	bl	8002d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00c      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0201 	mvn.w	r2, #1
 8002c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fd90 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00c      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 f913 	bl	8002ec4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d007      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f90b 	bl	8002ed8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00c      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f834 	bl	8002d4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00c      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0320 	and.w	r3, r3, #32
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f06f 0220 	mvn.w	r2, #32
 8002d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8d3 	bl	8002eb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a46      	ldr	r2, [pc, #280]	@ (8002e90 <TIM_Base_SetConfig+0x12c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d013      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d82:	d00f      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a43      	ldr	r2, [pc, #268]	@ (8002e94 <TIM_Base_SetConfig+0x130>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d00b      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a42      	ldr	r2, [pc, #264]	@ (8002e98 <TIM_Base_SetConfig+0x134>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d007      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a41      	ldr	r2, [pc, #260]	@ (8002e9c <TIM_Base_SetConfig+0x138>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d003      	beq.n	8002da4 <TIM_Base_SetConfig+0x40>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a40      	ldr	r2, [pc, #256]	@ (8002ea0 <TIM_Base_SetConfig+0x13c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d108      	bne.n	8002db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a35      	ldr	r2, [pc, #212]	@ (8002e90 <TIM_Base_SetConfig+0x12c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01f      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dc4:	d01b      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a32      	ldr	r2, [pc, #200]	@ (8002e94 <TIM_Base_SetConfig+0x130>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d017      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a31      	ldr	r2, [pc, #196]	@ (8002e98 <TIM_Base_SetConfig+0x134>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a30      	ldr	r2, [pc, #192]	@ (8002e9c <TIM_Base_SetConfig+0x138>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00f      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea0 <TIM_Base_SetConfig+0x13c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00b      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a2e      	ldr	r2, [pc, #184]	@ (8002ea4 <TIM_Base_SetConfig+0x140>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a2d      	ldr	r2, [pc, #180]	@ (8002ea8 <TIM_Base_SetConfig+0x144>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d003      	beq.n	8002dfe <TIM_Base_SetConfig+0x9a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a2c      	ldr	r2, [pc, #176]	@ (8002eac <TIM_Base_SetConfig+0x148>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d108      	bne.n	8002e10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <TIM_Base_SetConfig+0x12c>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d00f      	beq.n	8002e5c <TIM_Base_SetConfig+0xf8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <TIM_Base_SetConfig+0x13c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d00b      	beq.n	8002e5c <TIM_Base_SetConfig+0xf8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a17      	ldr	r2, [pc, #92]	@ (8002ea4 <TIM_Base_SetConfig+0x140>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <TIM_Base_SetConfig+0xf8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a16      	ldr	r2, [pc, #88]	@ (8002ea8 <TIM_Base_SetConfig+0x144>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_Base_SetConfig+0xf8>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a15      	ldr	r2, [pc, #84]	@ (8002eac <TIM_Base_SetConfig+0x148>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d103      	bne.n	8002e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	f023 0201 	bic.w	r2, r3, #1
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	611a      	str	r2, [r3, #16]
  }
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	40012c00 	.word	0x40012c00
 8002e94:	40000400 	.word	0x40000400
 8002e98:	40000800 	.word	0x40000800
 8002e9c:	40000c00 	.word	0x40000c00
 8002ea0:	40013400 	.word	0x40013400
 8002ea4:	40014000 	.word	0x40014000
 8002ea8:	40014400 	.word	0x40014400
 8002eac:	40014800 	.word	0x40014800

08002eb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e040      	b.n	8002f80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d106      	bne.n	8002f14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7fd fcb2 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2224      	movs	r2, #36	@ 0x24
 8002f18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fe90 	bl	8003c58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 fbd5 	bl	80036e8 <UART_SetConfig>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e01b      	b.n	8002f80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 ff0f 	bl	8003d9c <UART_CheckIdleState>
 8002f7e:	4603      	mov	r3, r0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08a      	sub	sp, #40	@ 0x28
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d177      	bne.n	8003090 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_UART_Transmit+0x24>
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e070      	b.n	8003092 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2221      	movs	r2, #33	@ 0x21
 8002fbc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fbe:	f7fd fdd7 	bl	8000b70 <HAL_GetTick>
 8002fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	88fa      	ldrh	r2, [r7, #6]
 8002fd0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fdc:	d108      	bne.n	8002ff0 <HAL_UART_Transmit+0x68>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d104      	bne.n	8002ff0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e003      	b.n	8002ff8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ff8:	e02f      	b.n	800305a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2200      	movs	r2, #0
 8003002:	2180      	movs	r1, #128	@ 0x80
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 ff71 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e03b      	b.n	8003092 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10b      	bne.n	8003038 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	881a      	ldrh	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800302c:	b292      	uxth	r2, r2
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	3302      	adds	r3, #2
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e007      	b.n	8003048 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3301      	adds	r3, #1
 8003046:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1c9      	bne.n	8002ffa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2200      	movs	r2, #0
 800306e:	2140      	movs	r1, #64	@ 0x40
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 ff3b 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d004      	beq.n	8003086 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e005      	b.n	8003092 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2220      	movs	r2, #32
 800308a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
	...

0800309c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b0ba      	sub	sp, #232	@ 0xe8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80030c6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80030ca:	4013      	ands	r3, r2
 80030cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80030d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d115      	bne.n	8003104 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00f      	beq.n	8003104 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 82ca 	beq.w	800368e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	4798      	blx	r3
      }
      return;
 8003102:	e2c4      	b.n	800368e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8117 	beq.w	800333c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800310e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800311a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800311e:	4b85      	ldr	r3, [pc, #532]	@ (8003334 <HAL_UART_IRQHandler+0x298>)
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	f000 810a 	beq.w	800333c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d011      	beq.n	8003158 <HAL_UART_IRQHandler+0xbc>
 8003134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2201      	movs	r2, #1
 8003146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800314e:	f043 0201 	orr.w	r2, r3, #1
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d011      	beq.n	8003188 <HAL_UART_IRQHandler+0xec>
 8003164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00b      	beq.n	8003188 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2202      	movs	r2, #2
 8003176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d011      	beq.n	80031b8 <HAL_UART_IRQHandler+0x11c>
 8003194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00b      	beq.n	80031b8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2204      	movs	r2, #4
 80031a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ae:	f043 0202 	orr.w	r2, r3, #2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d017      	beq.n	80031f4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031c8:	f003 0320 	and.w	r3, r3, #32
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00b      	beq.n	80031f4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2208      	movs	r2, #8
 80031e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031ea:	f043 0208 	orr.w	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <HAL_UART_IRQHandler+0x18a>
 8003200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003204:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800321c:	f043 0220 	orr.w	r2, r3, #32
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8230 	beq.w	8003692 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00d      	beq.n	800325a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800323e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d007      	beq.n	800325a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003260:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326e:	2b40      	cmp	r3, #64	@ 0x40
 8003270:	d005      	beq.n	800327e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003276:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800327a:	2b00      	cmp	r3, #0
 800327c:	d04f      	beq.n	800331e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fea1 	bl	8003fc6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328e:	2b40      	cmp	r3, #64	@ 0x40
 8003290:	d141      	bne.n	8003316 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3308      	adds	r3, #8
 8003298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3308      	adds	r3, #8
 80032ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032ce:	e841 2300 	strex	r3, r2, [r1]
 80032d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1d9      	bne.n	8003292 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d013      	beq.n	800330e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ea:	4a13      	ldr	r2, [pc, #76]	@ (8003338 <HAL_UART_IRQHandler+0x29c>)
 80032ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd fd68 	bl	8000dc8 <HAL_DMA_Abort_IT>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d017      	beq.n	800332e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003308:	4610      	mov	r0, r2
 800330a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	e00f      	b.n	800332e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f9d4 	bl	80036bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	e00b      	b.n	800332e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f9d0 	bl	80036bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e007      	b.n	800332e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f9cc 	bl	80036bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800332c:	e1b1      	b.n	8003692 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332e:	bf00      	nop
    return;
 8003330:	e1af      	b.n	8003692 <HAL_UART_IRQHandler+0x5f6>
 8003332:	bf00      	nop
 8003334:	04000120 	.word	0x04000120
 8003338:	0800408f 	.word	0x0800408f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003340:	2b01      	cmp	r3, #1
 8003342:	f040 816a 	bne.w	800361a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 8163 	beq.w	800361a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003354:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 815c 	beq.w	800361a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2210      	movs	r2, #16
 8003368:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003374:	2b40      	cmp	r3, #64	@ 0x40
 8003376:	f040 80d4 	bne.w	8003522 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003386:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80ad 	beq.w	80034ea <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800339a:	429a      	cmp	r2, r3
 800339c:	f080 80a5 	bcs.w	80034ea <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f040 8086 	bne.w	80034c8 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033c8:	e853 3f00 	ldrex	r3, [r3]
 80033cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80033e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80033ea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1da      	bne.n	80033bc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3308      	adds	r3, #8
 800340c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003410:	e853 3f00 	ldrex	r3, [r3]
 8003414:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003416:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	3308      	adds	r3, #8
 8003426:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800342a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800342e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003430:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003432:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800343c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e1      	bne.n	8003406 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	3308      	adds	r3, #8
 8003448:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003454:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003458:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003466:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003468:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800346c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e3      	bne.n	8003442 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003496:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003498:	f023 0310 	bic.w	r3, r3, #16
 800349c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	461a      	mov	r2, r3
 80034a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034ac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e4      	bne.n	8003488 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd fc42 	bl	8000d4c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8f4 	bl	80036d0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80034e8:	e0d5      	b.n	8003696 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80034f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80034f4:	429a      	cmp	r2, r3
 80034f6:	f040 80ce 	bne.w	8003696 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b20      	cmp	r3, #32
 8003508:	f040 80c5 	bne.w	8003696 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003518:	4619      	mov	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8d8 	bl	80036d0 <HAL_UARTEx_RxEventCallback>
      return;
 8003520:	e0b9      	b.n	8003696 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800352e:	b29b      	uxth	r3, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 80ab 	beq.w	800369a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003544:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80a6 	beq.w	800369a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800355c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003562:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003570:	647b      	str	r3, [r7, #68]	@ 0x44
 8003572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800357e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e4      	bne.n	800354e <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3308      	adds	r3, #8
 800358a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358e:	e853 3f00 	ldrex	r3, [r3]
 8003592:	623b      	str	r3, [r7, #32]
   return(result);
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	f023 0301 	bic.w	r3, r3, #1
 800359a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3308      	adds	r3, #8
 80035a4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035a8:	633a      	str	r2, [r7, #48]	@ 0x30
 80035aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b0:	e841 2300 	strex	r3, r2, [r1]
 80035b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1e3      	bne.n	8003584 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2220      	movs	r2, #32
 80035c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	e853 3f00 	ldrex	r3, [r3]
 80035dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f023 0310 	bic.w	r3, r3, #16
 80035e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035f2:	61fb      	str	r3, [r7, #28]
 80035f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f6:	69b9      	ldr	r1, [r7, #24]
 80035f8:	69fa      	ldr	r2, [r7, #28]
 80035fa:	e841 2300 	strex	r3, r2, [r1]
 80035fe:	617b      	str	r3, [r7, #20]
   return(result);
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e4      	bne.n	80035d0 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2202      	movs	r2, #2
 800360a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800360c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003610:	4619      	mov	r1, r3
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f85c 	bl	80036d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003618:	e03f      	b.n	800369a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800361a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00e      	beq.n	8003644 <HAL_UART_IRQHandler+0x5a8>
 8003626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d008      	beq.n	8003644 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800363a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fd66 	bl	800410e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003642:	e02d      	b.n	80036a0 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00e      	beq.n	800366e <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003658:	2b00      	cmp	r3, #0
 800365a:	d008      	beq.n	800366e <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01c      	beq.n	800369e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	4798      	blx	r3
    }
    return;
 800366c:	e017      	b.n	800369e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d012      	beq.n	80036a0 <HAL_UART_IRQHandler+0x604>
 800367a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fd17 	bl	80040ba <UART_EndTransmit_IT>
    return;
 800368c:	e008      	b.n	80036a0 <HAL_UART_IRQHandler+0x604>
      return;
 800368e:	bf00      	nop
 8003690:	e006      	b.n	80036a0 <HAL_UART_IRQHandler+0x604>
    return;
 8003692:	bf00      	nop
 8003694:	e004      	b.n	80036a0 <HAL_UART_IRQHandler+0x604>
      return;
 8003696:	bf00      	nop
 8003698:	e002      	b.n	80036a0 <HAL_UART_IRQHandler+0x604>
      return;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HAL_UART_IRQHandler+0x604>
    return;
 800369e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80036a0:	37e8      	adds	r7, #232	@ 0xe8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop

080036a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036ec:	b08a      	sub	sp, #40	@ 0x28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	431a      	orrs	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	431a      	orrs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	69db      	ldr	r3, [r3, #28]
 800370c:	4313      	orrs	r3, r2
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	4ba4      	ldr	r3, [pc, #656]	@ (80039a8 <UART_SetConfig+0x2c0>)
 8003718:	4013      	ands	r3, r2
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	6812      	ldr	r2, [r2, #0]
 800371e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003720:	430b      	orrs	r3, r1
 8003722:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a99      	ldr	r2, [pc, #612]	@ (80039ac <UART_SetConfig+0x2c4>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	4313      	orrs	r3, r2
 8003752:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a90      	ldr	r2, [pc, #576]	@ (80039b0 <UART_SetConfig+0x2c8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d126      	bne.n	80037c0 <UART_SetConfig+0xd8>
 8003772:	4b90      	ldr	r3, [pc, #576]	@ (80039b4 <UART_SetConfig+0x2cc>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b03      	cmp	r3, #3
 800377e:	d81b      	bhi.n	80037b8 <UART_SetConfig+0xd0>
 8003780:	a201      	add	r2, pc, #4	@ (adr r2, 8003788 <UART_SetConfig+0xa0>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	08003799 	.word	0x08003799
 800378c:	080037a9 	.word	0x080037a9
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037b1 	.word	0x080037b1
 8003798:	2301      	movs	r3, #1
 800379a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800379e:	e116      	b.n	80039ce <UART_SetConfig+0x2e6>
 80037a0:	2302      	movs	r3, #2
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a6:	e112      	b.n	80039ce <UART_SetConfig+0x2e6>
 80037a8:	2304      	movs	r3, #4
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ae:	e10e      	b.n	80039ce <UART_SetConfig+0x2e6>
 80037b0:	2308      	movs	r3, #8
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b6:	e10a      	b.n	80039ce <UART_SetConfig+0x2e6>
 80037b8:	2310      	movs	r3, #16
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037be:	e106      	b.n	80039ce <UART_SetConfig+0x2e6>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a7c      	ldr	r2, [pc, #496]	@ (80039b8 <UART_SetConfig+0x2d0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d138      	bne.n	800383c <UART_SetConfig+0x154>
 80037ca:	4b7a      	ldr	r3, [pc, #488]	@ (80039b4 <UART_SetConfig+0x2cc>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d0:	f003 030c 	and.w	r3, r3, #12
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	d82d      	bhi.n	8003834 <UART_SetConfig+0x14c>
 80037d8:	a201      	add	r2, pc, #4	@ (adr r2, 80037e0 <UART_SetConfig+0xf8>)
 80037da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037de:	bf00      	nop
 80037e0:	08003815 	.word	0x08003815
 80037e4:	08003835 	.word	0x08003835
 80037e8:	08003835 	.word	0x08003835
 80037ec:	08003835 	.word	0x08003835
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003835 	.word	0x08003835
 80037f8:	08003835 	.word	0x08003835
 80037fc:	08003835 	.word	0x08003835
 8003800:	0800381d 	.word	0x0800381d
 8003804:	08003835 	.word	0x08003835
 8003808:	08003835 	.word	0x08003835
 800380c:	08003835 	.word	0x08003835
 8003810:	0800382d 	.word	0x0800382d
 8003814:	2300      	movs	r3, #0
 8003816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381a:	e0d8      	b.n	80039ce <UART_SetConfig+0x2e6>
 800381c:	2302      	movs	r3, #2
 800381e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003822:	e0d4      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003824:	2304      	movs	r3, #4
 8003826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800382a:	e0d0      	b.n	80039ce <UART_SetConfig+0x2e6>
 800382c:	2308      	movs	r3, #8
 800382e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003832:	e0cc      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003834:	2310      	movs	r3, #16
 8003836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800383a:	e0c8      	b.n	80039ce <UART_SetConfig+0x2e6>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a5e      	ldr	r2, [pc, #376]	@ (80039bc <UART_SetConfig+0x2d4>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d125      	bne.n	8003892 <UART_SetConfig+0x1aa>
 8003846:	4b5b      	ldr	r3, [pc, #364]	@ (80039b4 <UART_SetConfig+0x2cc>)
 8003848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800384c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003850:	2b30      	cmp	r3, #48	@ 0x30
 8003852:	d016      	beq.n	8003882 <UART_SetConfig+0x19a>
 8003854:	2b30      	cmp	r3, #48	@ 0x30
 8003856:	d818      	bhi.n	800388a <UART_SetConfig+0x1a2>
 8003858:	2b20      	cmp	r3, #32
 800385a:	d00a      	beq.n	8003872 <UART_SetConfig+0x18a>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d814      	bhi.n	800388a <UART_SetConfig+0x1a2>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <UART_SetConfig+0x182>
 8003864:	2b10      	cmp	r3, #16
 8003866:	d008      	beq.n	800387a <UART_SetConfig+0x192>
 8003868:	e00f      	b.n	800388a <UART_SetConfig+0x1a2>
 800386a:	2300      	movs	r3, #0
 800386c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003870:	e0ad      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003872:	2302      	movs	r3, #2
 8003874:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003878:	e0a9      	b.n	80039ce <UART_SetConfig+0x2e6>
 800387a:	2304      	movs	r3, #4
 800387c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003880:	e0a5      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003882:	2308      	movs	r3, #8
 8003884:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003888:	e0a1      	b.n	80039ce <UART_SetConfig+0x2e6>
 800388a:	2310      	movs	r3, #16
 800388c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003890:	e09d      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a4a      	ldr	r2, [pc, #296]	@ (80039c0 <UART_SetConfig+0x2d8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d125      	bne.n	80038e8 <UART_SetConfig+0x200>
 800389c:	4b45      	ldr	r3, [pc, #276]	@ (80039b4 <UART_SetConfig+0x2cc>)
 800389e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80038a8:	d016      	beq.n	80038d8 <UART_SetConfig+0x1f0>
 80038aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80038ac:	d818      	bhi.n	80038e0 <UART_SetConfig+0x1f8>
 80038ae:	2b80      	cmp	r3, #128	@ 0x80
 80038b0:	d00a      	beq.n	80038c8 <UART_SetConfig+0x1e0>
 80038b2:	2b80      	cmp	r3, #128	@ 0x80
 80038b4:	d814      	bhi.n	80038e0 <UART_SetConfig+0x1f8>
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <UART_SetConfig+0x1d8>
 80038ba:	2b40      	cmp	r3, #64	@ 0x40
 80038bc:	d008      	beq.n	80038d0 <UART_SetConfig+0x1e8>
 80038be:	e00f      	b.n	80038e0 <UART_SetConfig+0x1f8>
 80038c0:	2300      	movs	r3, #0
 80038c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c6:	e082      	b.n	80039ce <UART_SetConfig+0x2e6>
 80038c8:	2302      	movs	r3, #2
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ce:	e07e      	b.n	80039ce <UART_SetConfig+0x2e6>
 80038d0:	2304      	movs	r3, #4
 80038d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d6:	e07a      	b.n	80039ce <UART_SetConfig+0x2e6>
 80038d8:	2308      	movs	r3, #8
 80038da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038de:	e076      	b.n	80039ce <UART_SetConfig+0x2e6>
 80038e0:	2310      	movs	r3, #16
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038e6:	e072      	b.n	80039ce <UART_SetConfig+0x2e6>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a35      	ldr	r2, [pc, #212]	@ (80039c4 <UART_SetConfig+0x2dc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d12a      	bne.n	8003948 <UART_SetConfig+0x260>
 80038f2:	4b30      	ldr	r3, [pc, #192]	@ (80039b4 <UART_SetConfig+0x2cc>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003900:	d01a      	beq.n	8003938 <UART_SetConfig+0x250>
 8003902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003906:	d81b      	bhi.n	8003940 <UART_SetConfig+0x258>
 8003908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390c:	d00c      	beq.n	8003928 <UART_SetConfig+0x240>
 800390e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003912:	d815      	bhi.n	8003940 <UART_SetConfig+0x258>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <UART_SetConfig+0x238>
 8003918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800391c:	d008      	beq.n	8003930 <UART_SetConfig+0x248>
 800391e:	e00f      	b.n	8003940 <UART_SetConfig+0x258>
 8003920:	2300      	movs	r3, #0
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003926:	e052      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003928:	2302      	movs	r3, #2
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800392e:	e04e      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003930:	2304      	movs	r3, #4
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003936:	e04a      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003938:	2308      	movs	r3, #8
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800393e:	e046      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003940:	2310      	movs	r3, #16
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003946:	e042      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a17      	ldr	r2, [pc, #92]	@ (80039ac <UART_SetConfig+0x2c4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d13a      	bne.n	80039c8 <UART_SetConfig+0x2e0>
 8003952:	4b18      	ldr	r3, [pc, #96]	@ (80039b4 <UART_SetConfig+0x2cc>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800395c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003960:	d01a      	beq.n	8003998 <UART_SetConfig+0x2b0>
 8003962:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003966:	d81b      	bhi.n	80039a0 <UART_SetConfig+0x2b8>
 8003968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800396c:	d00c      	beq.n	8003988 <UART_SetConfig+0x2a0>
 800396e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003972:	d815      	bhi.n	80039a0 <UART_SetConfig+0x2b8>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <UART_SetConfig+0x298>
 8003978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397c:	d008      	beq.n	8003990 <UART_SetConfig+0x2a8>
 800397e:	e00f      	b.n	80039a0 <UART_SetConfig+0x2b8>
 8003980:	2300      	movs	r3, #0
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003986:	e022      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003988:	2302      	movs	r3, #2
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398e:	e01e      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003990:	2304      	movs	r3, #4
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003996:	e01a      	b.n	80039ce <UART_SetConfig+0x2e6>
 8003998:	2308      	movs	r3, #8
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399e:	e016      	b.n	80039ce <UART_SetConfig+0x2e6>
 80039a0:	2310      	movs	r3, #16
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039a6:	e012      	b.n	80039ce <UART_SetConfig+0x2e6>
 80039a8:	efff69f3 	.word	0xefff69f3
 80039ac:	40008000 	.word	0x40008000
 80039b0:	40013800 	.word	0x40013800
 80039b4:	40021000 	.word	0x40021000
 80039b8:	40004400 	.word	0x40004400
 80039bc:	40004800 	.word	0x40004800
 80039c0:	40004c00 	.word	0x40004c00
 80039c4:	40005000 	.word	0x40005000
 80039c8:	2310      	movs	r3, #16
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a9f      	ldr	r2, [pc, #636]	@ (8003c50 <UART_SetConfig+0x568>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d17a      	bne.n	8003ace <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d824      	bhi.n	8003a2a <UART_SetConfig+0x342>
 80039e0:	a201      	add	r2, pc, #4	@ (adr r2, 80039e8 <UART_SetConfig+0x300>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a2b 	.word	0x08003a2b
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a2b 	.word	0x08003a2b
 80039f8:	08003a1b 	.word	0x08003a1b
 80039fc:	08003a2b 	.word	0x08003a2b
 8003a00:	08003a2b 	.word	0x08003a2b
 8003a04:	08003a2b 	.word	0x08003a2b
 8003a08:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe f9c8 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003a10:	61f8      	str	r0, [r7, #28]
        break;
 8003a12:	e010      	b.n	8003a36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b8f      	ldr	r3, [pc, #572]	@ (8003c54 <UART_SetConfig+0x56c>)
 8003a16:	61fb      	str	r3, [r7, #28]
        break;
 8003a18:	e00d      	b.n	8003a36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7fe f929 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8003a1e:	61f8      	str	r0, [r7, #28]
        break;
 8003a20:	e009      	b.n	8003a36 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a26:	61fb      	str	r3, [r7, #28]
        break;
 8003a28:	e005      	b.n	8003a36 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003a34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80fb 	beq.w	8003c34 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d305      	bcc.n	8003a5a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d903      	bls.n	8003a62 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a60:	e0e8      	b.n	8003c34 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2200      	movs	r2, #0
 8003a66:	461c      	mov	r4, r3
 8003a68:	4615      	mov	r5, r2
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	022b      	lsls	r3, r5, #8
 8003a74:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a78:	0222      	lsls	r2, r4, #8
 8003a7a:	68f9      	ldr	r1, [r7, #12]
 8003a7c:	6849      	ldr	r1, [r1, #4]
 8003a7e:	0849      	lsrs	r1, r1, #1
 8003a80:	2000      	movs	r0, #0
 8003a82:	4688      	mov	r8, r1
 8003a84:	4681      	mov	r9, r0
 8003a86:	eb12 0a08 	adds.w	sl, r2, r8
 8003a8a:	eb43 0b09 	adc.w	fp, r3, r9
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a9c:	4650      	mov	r0, sl
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	f7fc fb9e 	bl	80001e0 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ab2:	d308      	bcc.n	8003ac6 <UART_SetConfig+0x3de>
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003aba:	d204      	bcs.n	8003ac6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	60da      	str	r2, [r3, #12]
 8003ac4:	e0b6      	b.n	8003c34 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003acc:	e0b2      	b.n	8003c34 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad6:	d15e      	bne.n	8003b96 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d828      	bhi.n	8003b32 <UART_SetConfig+0x44a>
 8003ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae8 <UART_SetConfig+0x400>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b15 	.word	0x08003b15
 8003af0:	08003b1d 	.word	0x08003b1d
 8003af4:	08003b33 	.word	0x08003b33
 8003af8:	08003b23 	.word	0x08003b23
 8003afc:	08003b33 	.word	0x08003b33
 8003b00:	08003b33 	.word	0x08003b33
 8003b04:	08003b33 	.word	0x08003b33
 8003b08:	08003b2b 	.word	0x08003b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7fe f948 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003b10:	61f8      	str	r0, [r7, #28]
        break;
 8003b12:	e014      	b.n	8003b3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b14:	f7fe f95a 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8003b18:	61f8      	str	r0, [r7, #28]
        break;
 8003b1a:	e010      	b.n	8003b3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003c54 <UART_SetConfig+0x56c>)
 8003b1e:	61fb      	str	r3, [r7, #28]
        break;
 8003b20:	e00d      	b.n	8003b3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b22:	f7fe f8a5 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8003b26:	61f8      	str	r0, [r7, #28]
        break;
 8003b28:	e009      	b.n	8003b3e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b2e:	61fb      	str	r3, [r7, #28]
        break;
 8003b30:	e005      	b.n	8003b3e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d077      	beq.n	8003c34 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	005a      	lsls	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	085b      	lsrs	r3, r3, #1
 8003b4e:	441a      	add	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b58:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	2b0f      	cmp	r3, #15
 8003b5e:	d916      	bls.n	8003b8e <UART_SetConfig+0x4a6>
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b66:	d212      	bcs.n	8003b8e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	f023 030f 	bic.w	r3, r3, #15
 8003b70:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	085b      	lsrs	r3, r3, #1
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	8afb      	ldrh	r3, [r7, #22]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	8afa      	ldrh	r2, [r7, #22]
 8003b8a:	60da      	str	r2, [r3, #12]
 8003b8c:	e052      	b.n	8003c34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b94:	e04e      	b.n	8003c34 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d827      	bhi.n	8003bee <UART_SetConfig+0x506>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <UART_SetConfig+0x4bc>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003bdf 	.word	0x08003bdf
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7fe f8ea 	bl	8001da0 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61f8      	str	r0, [r7, #28]
        break;
 8003bce:	e014      	b.n	8003bfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7fe f8fc 	bl	8001dcc <HAL_RCC_GetPCLK2Freq>
 8003bd4:	61f8      	str	r0, [r7, #28]
        break;
 8003bd6:	e010      	b.n	8003bfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8003c54 <UART_SetConfig+0x56c>)
 8003bda:	61fb      	str	r3, [r7, #28]
        break;
 8003bdc:	e00d      	b.n	8003bfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7fe f847 	bl	8001c70 <HAL_RCC_GetSysClockFreq>
 8003be2:	61f8      	str	r0, [r7, #28]
        break;
 8003be4:	e009      	b.n	8003bfa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bea:	61fb      	str	r3, [r7, #28]
        break;
 8003bec:	e005      	b.n	8003bfa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003bf8:	bf00      	nop
    }

    if (pclk != 0U)
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d019      	beq.n	8003c34 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	085a      	lsrs	r2, r3, #1
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	441a      	add	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c12:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	d909      	bls.n	8003c2e <UART_SetConfig+0x546>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c20:	d205      	bcs.n	8003c2e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	60da      	str	r2, [r3, #12]
 8003c2c:	e002      	b.n	8003c34 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3728      	adds	r7, #40	@ 0x28
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c4e:	bf00      	nop
 8003c50:	40008000 	.word	0x40008000
 8003c54:	00f42400 	.word	0x00f42400

08003c58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	f003 0308 	and.w	r3, r3, #8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cec:	f003 0310 	and.w	r3, r3, #16
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d01a      	beq.n	8003d6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d56:	d10a      	bne.n	8003d6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00a      	beq.n	8003d90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b098      	sub	sp, #96	@ 0x60
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003dac:	f7fc fee0 	bl	8000b70 <HAL_GetTick>
 8003db0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d12e      	bne.n	8003e1e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dc0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dc4:	9300      	str	r3, [sp, #0]
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f88c 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d021      	beq.n	8003e1e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	461a      	mov	r2, r3
 8003df6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dfa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e00:	e841 2300 	strex	r3, r2, [r1]
 8003e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1e6      	bne.n	8003dda <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e062      	b.n	8003ee4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d149      	bne.n	8003ec0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e34:	2200      	movs	r2, #0
 8003e36:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f856 	bl	8003eec <UART_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d03c      	beq.n	8003ec0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	623b      	str	r3, [r7, #32]
   return(result);
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e66:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e6      	bne.n	8003e46 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3308      	adds	r3, #8
 8003e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3308      	adds	r3, #8
 8003e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e98:	61fa      	str	r2, [r7, #28]
 8003e9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	69b9      	ldr	r1, [r7, #24]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e011      	b.n	8003ee4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3758      	adds	r7, #88	@ 0x58
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003efc:	e04f      	b.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d04b      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fc fe33 	bl	8000b70 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e04e      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d037      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b80      	cmp	r3, #128	@ 0x80
 8003f32:	d034      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b40      	cmp	r3, #64	@ 0x40
 8003f38:	d031      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d110      	bne.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f838 	bl	8003fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e029      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69db      	ldr	r3, [r3, #28]
 8003f70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f78:	d111      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f81e 	bl	8003fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e00f      	b.n	8003fbe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	bf0c      	ite	eq
 8003fae:	2301      	moveq	r3, #1
 8003fb0:	2300      	movne	r3, #0
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d0a0      	beq.n	8003efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b095      	sub	sp, #84	@ 0x54
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fec:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ff2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ffa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e6      	bne.n	8003fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004020:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004022:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e5      	bne.n	8004000 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004038:	2b01      	cmp	r3, #1
 800403a:	d118      	bne.n	800406e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	60bb      	str	r3, [r7, #8]
   return(result);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0310 	bic.w	r3, r3, #16
 8004050:	647b      	str	r3, [r7, #68]	@ 0x44
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6979      	ldr	r1, [r7, #20]
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	613b      	str	r3, [r7, #16]
   return(result);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e6      	bne.n	800403c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004082:	bf00      	nop
 8004084:	3754      	adds	r7, #84	@ 0x54
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff fb05 	bl	80036bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b088      	sub	sp, #32
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	613b      	str	r3, [r7, #16]
   return(result);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff fad1 	bl	80036a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004106:	bf00      	nop
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
	...

08004124 <__NVIC_SetPriority>:
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	6039      	str	r1, [r7, #0]
 800412e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004134:	2b00      	cmp	r3, #0
 8004136:	db0a      	blt.n	800414e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	490c      	ldr	r1, [pc, #48]	@ (8004170 <__NVIC_SetPriority+0x4c>)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	0112      	lsls	r2, r2, #4
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	440b      	add	r3, r1
 8004148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800414c:	e00a      	b.n	8004164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	4908      	ldr	r1, [pc, #32]	@ (8004174 <__NVIC_SetPriority+0x50>)
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	3b04      	subs	r3, #4
 800415c:	0112      	lsls	r2, r2, #4
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	440b      	add	r3, r1
 8004162:	761a      	strb	r2, [r3, #24]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000e100 	.word	0xe000e100
 8004174:	e000ed00 	.word	0xe000ed00

08004178 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800417c:	4b05      	ldr	r3, [pc, #20]	@ (8004194 <SysTick_Handler+0x1c>)
 800417e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004180:	f001 fd46 	bl	8005c10 <xTaskGetSchedulerState>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d001      	beq.n	800418e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800418a:	f002 fb3d 	bl	8006808 <xPortSysTickHandler>
  }
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	e000e010 	.word	0xe000e010

08004198 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800419c:	2100      	movs	r1, #0
 800419e:	f06f 0004 	mvn.w	r0, #4
 80041a2:	f7ff ffbf 	bl	8004124 <__NVIC_SetPriority>
#endif
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041b2:	f3ef 8305 	mrs	r3, IPSR
 80041b6:	603b      	str	r3, [r7, #0]
  return(result);
 80041b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80041be:	f06f 0305 	mvn.w	r3, #5
 80041c2:	607b      	str	r3, [r7, #4]
 80041c4:	e00c      	b.n	80041e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041c6:	4b0a      	ldr	r3, [pc, #40]	@ (80041f0 <osKernelInitialize+0x44>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d105      	bne.n	80041da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041ce:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <osKernelInitialize+0x44>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	607b      	str	r3, [r7, #4]
 80041d8:	e002      	b.n	80041e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80041e0:	687b      	ldr	r3, [r7, #4]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	20000168 	.word	0x20000168

080041f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041fa:	f3ef 8305 	mrs	r3, IPSR
 80041fe:	603b      	str	r3, [r7, #0]
  return(result);
 8004200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004206:	f06f 0305 	mvn.w	r3, #5
 800420a:	607b      	str	r3, [r7, #4]
 800420c:	e010      	b.n	8004230 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800420e:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <osKernelStart+0x48>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d109      	bne.n	800422a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004216:	f7ff ffbf 	bl	8004198 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800421a:	4b08      	ldr	r3, [pc, #32]	@ (800423c <osKernelStart+0x48>)
 800421c:	2202      	movs	r2, #2
 800421e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004220:	f001 f892 	bl	8005348 <vTaskStartScheduler>
      stat = osOK;
 8004224:	2300      	movs	r3, #0
 8004226:	607b      	str	r3, [r7, #4]
 8004228:	e002      	b.n	8004230 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800422a:	f04f 33ff 	mov.w	r3, #4294967295
 800422e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004230:	687b      	ldr	r3, [r7, #4]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000168 	.word	0x20000168

08004240 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	@ 0x38
 8004244:	af04      	add	r7, sp, #16
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004250:	f3ef 8305 	mrs	r3, IPSR
 8004254:	617b      	str	r3, [r7, #20]
  return(result);
 8004256:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004258:	2b00      	cmp	r3, #0
 800425a:	d17e      	bne.n	800435a <osThreadNew+0x11a>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d07b      	beq.n	800435a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004262:	2380      	movs	r3, #128	@ 0x80
 8004264:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004266:	2318      	movs	r3, #24
 8004268:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800426e:	f04f 33ff 	mov.w	r3, #4294967295
 8004272:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d045      	beq.n	8004306 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <osThreadNew+0x48>
        name = attr->name;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <osThreadNew+0x6e>
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b38      	cmp	r3, #56	@ 0x38
 80042a0:	d805      	bhi.n	80042ae <osThreadNew+0x6e>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <osThreadNew+0x72>
        return (NULL);
 80042ae:	2300      	movs	r3, #0
 80042b0:	e054      	b.n	800435c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00e      	beq.n	80042e8 <osThreadNew+0xa8>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2ba7      	cmp	r3, #167	@ 0xa7
 80042d0:	d90a      	bls.n	80042e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d006      	beq.n	80042e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <osThreadNew+0xa8>
        mem = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	e010      	b.n	800430a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10c      	bne.n	800430a <osThreadNew+0xca>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <osThreadNew+0xca>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <osThreadNew+0xca>
          mem = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e001      	b.n	800430a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d110      	bne.n	8004332 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004318:	9202      	str	r2, [sp, #8]
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6a3a      	ldr	r2, [r7, #32]
 8004324:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fe1a 	bl	8004f60 <xTaskCreateStatic>
 800432c:	4603      	mov	r3, r0
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	e013      	b.n	800435a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d110      	bne.n	800435a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	b29a      	uxth	r2, r3
 800433c:	f107 0310 	add.w	r3, r7, #16
 8004340:	9301      	str	r3, [sp, #4]
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 fe68 	bl	8005020 <xTaskCreate>
 8004350:	4603      	mov	r3, r0
 8004352:	2b01      	cmp	r3, #1
 8004354:	d001      	beq.n	800435a <osThreadNew+0x11a>
            hTask = NULL;
 8004356:	2300      	movs	r3, #0
 8004358:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800435a:	693b      	ldr	r3, [r7, #16]
}
 800435c:	4618      	mov	r0, r3
 800435e:	3728      	adds	r7, #40	@ 0x28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800436c:	f3ef 8305 	mrs	r3, IPSR
 8004370:	60bb      	str	r3, [r7, #8]
  return(result);
 8004372:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <osDelay+0x1c>
    stat = osErrorISR;
 8004378:	f06f 0305 	mvn.w	r3, #5
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e007      	b.n	8004390 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <osDelay+0x2c>
      vTaskDelay(ticks);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 ffa6 	bl	80052dc <vTaskDelay>
    }
  }

  return (stat);
 8004390:	68fb      	ldr	r3, [r7, #12]
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
	...

0800439c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4a07      	ldr	r2, [pc, #28]	@ (80043c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80043ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4a06      	ldr	r2, [pc, #24]	@ (80043cc <vApplicationGetIdleTaskMemory+0x30>)
 80043b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2280      	movs	r2, #128	@ 0x80
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	2000016c 	.word	0x2000016c
 80043cc:	20000214 	.word	0x20000214

080043d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4a07      	ldr	r2, [pc, #28]	@ (80043fc <vApplicationGetTimerTaskMemory+0x2c>)
 80043e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4a06      	ldr	r2, [pc, #24]	@ (8004400 <vApplicationGetTimerTaskMemory+0x30>)
 80043e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043ee:	601a      	str	r2, [r3, #0]
}
 80043f0:	bf00      	nop
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000414 	.word	0x20000414
 8004400:	200004bc 	.word	0x200004bc

08004404 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f103 0208 	add.w	r2, r3, #8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f04f 32ff 	mov.w	r2, #4294967295
 800441c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f103 0208 	add.w	r2, r3, #8
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f103 0208 	add.w	r2, r3, #8
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d103      	bne.n	80044c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e00c      	b.n	80044e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3308      	adds	r3, #8
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	e002      	b.n	80044d4 <vListInsert+0x2e>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68ba      	ldr	r2, [r7, #8]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d2f6      	bcs.n	80044ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	601a      	str	r2, [r3, #0]
}
 800450c:	bf00      	nop
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6892      	ldr	r2, [r2, #8]
 800452e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6852      	ldr	r2, [r2, #4]
 8004538:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	d103      	bne.n	800454c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	1e5a      	subs	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	e7fd      	b.n	8004594 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004598:	f002 f8a6 	bl	80066e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045a8:	fb01 f303 	mul.w	r3, r1, r3
 80045ac:	441a      	add	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c8:	3b01      	subs	r3, #1
 80045ca:	68f9      	ldr	r1, [r7, #12]
 80045cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045ce:	fb01 f303 	mul.w	r3, r1, r3
 80045d2:	441a      	add	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	22ff      	movs	r2, #255	@ 0xff
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	22ff      	movs	r2, #255	@ 0xff
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d114      	bne.n	8004618 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01a      	beq.n	800462c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3310      	adds	r3, #16
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 f942 	bl	8005884 <xTaskRemoveFromEventList>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d012      	beq.n	800462c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <xQueueGenericReset+0xd0>)
 8004608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	e009      	b.n	800462c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	3310      	adds	r3, #16
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fef1 	bl	8004404 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	3324      	adds	r3, #36	@ 0x24
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff feec 	bl	8004404 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800462c:	f002 f88e 	bl	800674c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004630:	2301      	movs	r3, #1
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	e000ed04 	.word	0xe000ed04

08004640 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08e      	sub	sp, #56	@ 0x38
 8004644:	af02      	add	r7, sp, #8
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10b      	bne.n	800466c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004676:	f383 8811 	msr	BASEPRI, r3
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	f3bf 8f4f 	dsb	sy
 8004682:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	e7fd      	b.n	8004686 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <xQueueGenericCreateStatic+0x56>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <xQueueGenericCreateStatic+0x5a>
 8004696:	2301      	movs	r3, #1
 8004698:	e000      	b.n	800469c <xQueueGenericCreateStatic+0x5c>
 800469a:	2300      	movs	r3, #0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	623b      	str	r3, [r7, #32]
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	e7fd      	b.n	80046b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d102      	bne.n	80046c4 <xQueueGenericCreateStatic+0x84>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <xQueueGenericCreateStatic+0x88>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <xQueueGenericCreateStatic+0x8a>
 80046c8:	2300      	movs	r3, #0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	61fb      	str	r3, [r7, #28]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046e6:	2350      	movs	r3, #80	@ 0x50
 80046e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b50      	cmp	r3, #80	@ 0x50
 80046ee:	d00b      	beq.n	8004708 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	61bb      	str	r3, [r7, #24]
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004708:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800470e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00d      	beq.n	8004730 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800471c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f805 	bl	800473a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004732:	4618      	mov	r0, r3
 8004734:	3730      	adds	r7, #48	@ 0x30
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b084      	sub	sp, #16
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
 8004746:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d103      	bne.n	8004756 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	e002      	b.n	800475c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004768:	2101      	movs	r1, #1
 800476a:	69b8      	ldr	r0, [r7, #24]
 800476c:	f7ff fefe 	bl	800456c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08e      	sub	sp, #56	@ 0x38
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
 800478c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800478e:	2300      	movs	r3, #0
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <xQueueGenericSend+0x34>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d103      	bne.n	80047c2 <xQueueGenericSend+0x42>
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <xQueueGenericSend+0x46>
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <xQueueGenericSend+0x48>
 80047c6:	2300      	movs	r3, #0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10b      	bne.n	80047e4 <xQueueGenericSend+0x64>
	__asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047de:	bf00      	nop
 80047e0:	bf00      	nop
 80047e2:	e7fd      	b.n	80047e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d103      	bne.n	80047f2 <xQueueGenericSend+0x72>
 80047ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <xQueueGenericSend+0x76>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <xQueueGenericSend+0x78>
 80047f6:	2300      	movs	r3, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10b      	bne.n	8004814 <xQueueGenericSend+0x94>
	__asm volatile
 80047fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004800:	f383 8811 	msr	BASEPRI, r3
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	623b      	str	r3, [r7, #32]
}
 800480e:	bf00      	nop
 8004810:	bf00      	nop
 8004812:	e7fd      	b.n	8004810 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004814:	f001 f9fc 	bl	8005c10 <xTaskGetSchedulerState>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d102      	bne.n	8004824 <xQueueGenericSend+0xa4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <xQueueGenericSend+0xa8>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <xQueueGenericSend+0xaa>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <xQueueGenericSend+0xc6>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	61fb      	str	r3, [r7, #28]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004846:	f001 ff4f 	bl	80066e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800484a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800484e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <xQueueGenericSend+0xdc>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b02      	cmp	r3, #2
 800485a:	d129      	bne.n	80048b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004862:	f000 fa0f 	bl	8004c84 <prvCopyDataToQueue>
 8004866:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	2b00      	cmp	r3, #0
 800486e:	d010      	beq.n	8004892 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	3324      	adds	r3, #36	@ 0x24
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f805 	bl	8005884 <xTaskRemoveFromEventList>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d013      	beq.n	80048a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004880:	4b3f      	ldr	r3, [pc, #252]	@ (8004980 <xQueueGenericSend+0x200>)
 8004882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004886:	601a      	str	r2, [r3, #0]
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	e00a      	b.n	80048a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d007      	beq.n	80048a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004898:	4b39      	ldr	r3, [pc, #228]	@ (8004980 <xQueueGenericSend+0x200>)
 800489a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048a8:	f001 ff50 	bl	800674c <vPortExitCritical>
				return pdPASS;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e063      	b.n	8004978 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048b6:	f001 ff49 	bl	800674c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e05c      	b.n	8004978 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d106      	bne.n	80048d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 f83f 	bl	800594c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048ce:	2301      	movs	r3, #1
 80048d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048d2:	f001 ff3b 	bl	800674c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048d6:	f000 fda7 	bl	8005428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048da:	f001 ff05 	bl	80066e8 <vPortEnterCritical>
 80048de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048e4:	b25b      	sxtb	r3, r3
 80048e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ea:	d103      	bne.n	80048f4 <xQueueGenericSend+0x174>
 80048ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048fa:	b25b      	sxtb	r3, r3
 80048fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004900:	d103      	bne.n	800490a <xQueueGenericSend+0x18a>
 8004902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800490a:	f001 ff1f 	bl	800674c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800490e:	1d3a      	adds	r2, r7, #4
 8004910:	f107 0314 	add.w	r3, r7, #20
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f001 f82e 	bl	8005978 <xTaskCheckForTimeOut>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d124      	bne.n	800496c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004922:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004924:	f000 faa6 	bl	8004e74 <prvIsQueueFull>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d018      	beq.n	8004960 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800492e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004930:	3310      	adds	r3, #16
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	4611      	mov	r1, r2
 8004936:	4618      	mov	r0, r3
 8004938:	f000 ff52 	bl	80057e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800493c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800493e:	f000 fa31 	bl	8004da4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004942:	f000 fd7f 	bl	8005444 <xTaskResumeAll>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	f47f af7c 	bne.w	8004846 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800494e:	4b0c      	ldr	r3, [pc, #48]	@ (8004980 <xQueueGenericSend+0x200>)
 8004950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	e772      	b.n	8004846 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004960:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004962:	f000 fa1f 	bl	8004da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004966:	f000 fd6d 	bl	8005444 <xTaskResumeAll>
 800496a:	e76c      	b.n	8004846 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800496c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800496e:	f000 fa19 	bl	8004da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004972:	f000 fd67 	bl	8005444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004976:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004978:	4618      	mov	r0, r3
 800497a:	3738      	adds	r7, #56	@ 0x38
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	e000ed04 	.word	0xe000ed04

08004984 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b090      	sub	sp, #64	@ 0x40
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d103      	bne.n	80049c2 <xQueueGenericSendFromISR+0x3e>
 80049ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <xQueueGenericSendFromISR+0x42>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <xQueueGenericSendFromISR+0x44>
 80049c6:	2300      	movs	r3, #0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10b      	bne.n	80049e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d103      	bne.n	80049f2 <xQueueGenericSendFromISR+0x6e>
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <xQueueGenericSendFromISR+0x72>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <xQueueGenericSendFromISR+0x74>
 80049f6:	2300      	movs	r3, #0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	623b      	str	r3, [r7, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	bf00      	nop
 8004a12:	e7fd      	b.n	8004a10 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a14:	f001 ff48 	bl	80068a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a18:	f3ef 8211 	mrs	r2, BASEPRI
 8004a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	61fa      	str	r2, [r7, #28]
 8004a2e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a30:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a32:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d302      	bcc.n	8004a46 <xQueueGenericSendFromISR+0xc2>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d12f      	bne.n	8004aa6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004a5c:	f000 f912 	bl	8004c84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a60:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d112      	bne.n	8004a90 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d016      	beq.n	8004aa0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	3324      	adds	r3, #36	@ 0x24
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 ff04 	bl	8005884 <xTaskRemoveFromEventList>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00e      	beq.n	8004aa0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
 8004a8e:	e007      	b.n	8004aa0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004a94:	3301      	adds	r3, #1
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	b25a      	sxtb	r2, r3
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004aa4:	e001      	b.n	8004aaa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aac:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ab4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3740      	adds	r7, #64	@ 0x40
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08c      	sub	sp, #48	@ 0x30
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <xQueueReceive+0x32>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	623b      	str	r3, [r7, #32]
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	e7fd      	b.n	8004aee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d103      	bne.n	8004b00 <xQueueReceive+0x40>
 8004af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <xQueueReceive+0x44>
 8004b00:	2301      	movs	r3, #1
 8004b02:	e000      	b.n	8004b06 <xQueueReceive+0x46>
 8004b04:	2300      	movs	r3, #0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10b      	bne.n	8004b22 <xQueueReceive+0x62>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	61fb      	str	r3, [r7, #28]
}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	e7fd      	b.n	8004b1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b22:	f001 f875 	bl	8005c10 <xTaskGetSchedulerState>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <xQueueReceive+0x72>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <xQueueReceive+0x76>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <xQueueReceive+0x78>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10b      	bne.n	8004b54 <xQueueReceive+0x94>
	__asm volatile
 8004b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	61bb      	str	r3, [r7, #24]
}
 8004b4e:	bf00      	nop
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b54:	f001 fdc8 	bl	80066e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01f      	beq.n	8004ba4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b68:	f000 f8f6 	bl	8004d58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	1e5a      	subs	r2, r3, #1
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00f      	beq.n	8004b9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	3310      	adds	r3, #16
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fe7f 	bl	8005884 <xTaskRemoveFromEventList>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c80 <xQueueReceive+0x1c0>)
 8004b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b9c:	f001 fdd6 	bl	800674c <vPortExitCritical>
				return pdPASS;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e069      	b.n	8004c78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d103      	bne.n	8004bb2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004baa:	f001 fdcf 	bl	800674c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e062      	b.n	8004c78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d106      	bne.n	8004bc6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bb8:	f107 0310 	add.w	r3, r7, #16
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fec5 	bl	800594c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bc6:	f001 fdc1 	bl	800674c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bca:	f000 fc2d 	bl	8005428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bce:	f001 fd8b 	bl	80066e8 <vPortEnterCritical>
 8004bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bd8:	b25b      	sxtb	r3, r3
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d103      	bne.n	8004be8 <xQueueReceive+0x128>
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bee:	b25b      	sxtb	r3, r3
 8004bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf4:	d103      	bne.n	8004bfe <xQueueReceive+0x13e>
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004bfe:	f001 fda5 	bl	800674c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c02:	1d3a      	adds	r2, r7, #4
 8004c04:	f107 0310 	add.w	r3, r7, #16
 8004c08:	4611      	mov	r1, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 feb4 	bl	8005978 <xTaskCheckForTimeOut>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d123      	bne.n	8004c5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c18:	f000 f916 	bl	8004e48 <prvIsQueueEmpty>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d017      	beq.n	8004c52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	3324      	adds	r3, #36	@ 0x24
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	4611      	mov	r1, r2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 fdd8 	bl	80057e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c32:	f000 f8b7 	bl	8004da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c36:	f000 fc05 	bl	8005444 <xTaskResumeAll>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d189      	bne.n	8004b54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c40:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <xQueueReceive+0x1c0>)
 8004c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	e780      	b.n	8004b54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c54:	f000 f8a6 	bl	8004da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c58:	f000 fbf4 	bl	8005444 <xTaskResumeAll>
 8004c5c:	e77a      	b.n	8004b54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c60:	f000 f8a0 	bl	8004da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c64:	f000 fbee 	bl	8005444 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c6a:	f000 f8ed 	bl	8004e48 <prvIsQueueEmpty>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f43f af6f 	beq.w	8004b54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3730      	adds	r7, #48	@ 0x30
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10d      	bne.n	8004cbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d14d      	bne.n	8004d46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 ffcc 	bl	8005c4c <xTaskPriorityDisinherit>
 8004cb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	e043      	b.n	8004d46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d119      	bne.n	8004cf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6858      	ldr	r0, [r3, #4]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	f002 f89e 	bl	8006e10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	441a      	add	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d32b      	bcc.n	8004d46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	605a      	str	r2, [r3, #4]
 8004cf6:	e026      	b.n	8004d46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68d8      	ldr	r0, [r3, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d00:	461a      	mov	r2, r3
 8004d02:	68b9      	ldr	r1, [r7, #8]
 8004d04:	f002 f884 	bl	8006e10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	425b      	negs	r3, r3
 8004d12:	441a      	add	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d207      	bcs.n	8004d34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	425b      	negs	r3, r3
 8004d2e:	441a      	add	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d105      	bne.n	8004d46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d018      	beq.n	8004d9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d72:	441a      	add	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68da      	ldr	r2, [r3, #12]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d303      	bcc.n	8004d8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68d9      	ldr	r1, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d94:	461a      	mov	r2, r3
 8004d96:	6838      	ldr	r0, [r7, #0]
 8004d98:	f002 f83a 	bl	8006e10 <memcpy>
	}
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dac:	f001 fc9c 	bl	80066e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004db6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004db8:	e011      	b.n	8004dde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d012      	beq.n	8004de8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3324      	adds	r3, #36	@ 0x24
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fd5c 	bl	8005884 <xTaskRemoveFromEventList>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dd2:	f000 fe35 	bl	8005a40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	dce9      	bgt.n	8004dba <prvUnlockQueue+0x16>
 8004de6:	e000      	b.n	8004dea <prvUnlockQueue+0x46>
					break;
 8004de8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	22ff      	movs	r2, #255	@ 0xff
 8004dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004df2:	f001 fcab 	bl	800674c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004df6:	f001 fc77 	bl	80066e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e02:	e011      	b.n	8004e28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d012      	beq.n	8004e32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3310      	adds	r3, #16
 8004e10:	4618      	mov	r0, r3
 8004e12:	f000 fd37 	bl	8005884 <xTaskRemoveFromEventList>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e1c:	f000 fe10 	bl	8005a40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e20:	7bbb      	ldrb	r3, [r7, #14]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	dce9      	bgt.n	8004e04 <prvUnlockQueue+0x60>
 8004e30:	e000      	b.n	8004e34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	22ff      	movs	r2, #255	@ 0xff
 8004e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e3c:	f001 fc86 	bl	800674c <vPortExitCritical>
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e50:	f001 fc4a 	bl	80066e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d102      	bne.n	8004e62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	e001      	b.n	8004e66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e62:	2300      	movs	r3, #0
 8004e64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e66:	f001 fc71 	bl	800674c <vPortExitCritical>

	return xReturn;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e7c:	f001 fc34 	bl	80066e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d102      	bne.n	8004e92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	e001      	b.n	8004e96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e96:	f001 fc59 	bl	800674c <vPortExitCritical>

	return xReturn;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3710      	adds	r7, #16
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	e014      	b.n	8004ede <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004eb4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ef4 <vQueueAddToRegistry+0x50>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ec0:	490c      	ldr	r1, [pc, #48]	@ (8004ef4 <vQueueAddToRegistry+0x50>)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004eca:	4a0a      	ldr	r2, [pc, #40]	@ (8004ef4 <vQueueAddToRegistry+0x50>)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	4413      	add	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ed6:	e006      	b.n	8004ee6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	3301      	adds	r3, #1
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2b07      	cmp	r3, #7
 8004ee2:	d9e7      	bls.n	8004eb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	200008bc 	.word	0x200008bc

08004ef8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f08:	f001 fbee 	bl	80066e8 <vPortEnterCritical>
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f12:	b25b      	sxtb	r3, r3
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d103      	bne.n	8004f22 <vQueueWaitForMessageRestricted+0x2a>
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d103      	bne.n	8004f38 <vQueueWaitForMessageRestricted+0x40>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f38:	f001 fc08 	bl	800674c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	3324      	adds	r3, #36	@ 0x24
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	68b9      	ldr	r1, [r7, #8]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f000 fc6d 	bl	800582c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f52:	6978      	ldr	r0, [r7, #20]
 8004f54:	f7ff ff26 	bl	8004da4 <prvUnlockQueue>
	}
 8004f58:	bf00      	nop
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08e      	sub	sp, #56	@ 0x38
 8004f64:	af04      	add	r7, sp, #16
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	623b      	str	r3, [r7, #32]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <xTaskCreateStatic+0x4a>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	61fb      	str	r3, [r7, #28]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004faa:	23a8      	movs	r3, #168	@ 0xa8
 8004fac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2ba8      	cmp	r3, #168	@ 0xa8
 8004fb2:	d00b      	beq.n	8004fcc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	61bb      	str	r3, [r7, #24]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fcc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d01e      	beq.n	8005012 <xTaskCreateStatic+0xb2>
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d01b      	beq.n	8005012 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe6:	2202      	movs	r2, #2
 8004fe8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004fec:	2300      	movs	r3, #0
 8004fee:	9303      	str	r3, [sp, #12]
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	9302      	str	r3, [sp, #8]
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	9300      	str	r3, [sp, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f851 	bl	80050ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800500a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800500c:	f000 f8f6 	bl	80051fc <prvAddNewTaskToReadyList>
 8005010:	e001      	b.n	8005016 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005016:	697b      	ldr	r3, [r7, #20]
	}
 8005018:	4618      	mov	r0, r3
 800501a:	3728      	adds	r7, #40	@ 0x28
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08c      	sub	sp, #48	@ 0x30
 8005024:	af04      	add	r7, sp, #16
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005030:	88fb      	ldrh	r3, [r7, #6]
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4618      	mov	r0, r3
 8005036:	f001 fc79 	bl	800692c <pvPortMalloc>
 800503a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00e      	beq.n	8005060 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005042:	20a8      	movs	r0, #168	@ 0xa8
 8005044:	f001 fc72 	bl	800692c <pvPortMalloc>
 8005048:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	631a      	str	r2, [r3, #48]	@ 0x30
 8005056:	e005      	b.n	8005064 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005058:	6978      	ldr	r0, [r7, #20]
 800505a:	f001 fd35 	bl	8006ac8 <vPortFree>
 800505e:	e001      	b.n	8005064 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d017      	beq.n	800509a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005072:	88fa      	ldrh	r2, [r7, #6]
 8005074:	2300      	movs	r3, #0
 8005076:	9303      	str	r3, [sp, #12]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	9302      	str	r3, [sp, #8]
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f80f 	bl	80050ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800508e:	69f8      	ldr	r0, [r7, #28]
 8005090:	f000 f8b4 	bl	80051fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005094:	2301      	movs	r3, #1
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	e002      	b.n	80050a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050a0:	69bb      	ldr	r3, [r7, #24]
	}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b088      	sub	sp, #32
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
 80050b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	461a      	mov	r2, r3
 80050c4:	21a5      	movs	r1, #165	@ 0xa5
 80050c6:	f001 fe1f 	bl	8006d08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050d4:	3b01      	subs	r3, #1
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f023 0307 	bic.w	r3, r3, #7
 80050e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00b      	beq.n	8005106 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80050ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f2:	f383 8811 	msr	BASEPRI, r3
 80050f6:	f3bf 8f6f 	isb	sy
 80050fa:	f3bf 8f4f 	dsb	sy
 80050fe:	617b      	str	r3, [r7, #20]
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	e7fd      	b.n	8005102 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01f      	beq.n	800514c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	e012      	b.n	8005138 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4413      	add	r3, r2
 8005118:	7819      	ldrb	r1, [r3, #0]
 800511a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	3334      	adds	r3, #52	@ 0x34
 8005122:	460a      	mov	r2, r1
 8005124:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	4413      	add	r3, r2
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3301      	adds	r3, #1
 8005136:	61fb      	str	r3, [r7, #28]
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b0f      	cmp	r3, #15
 800513c:	d9e9      	bls.n	8005112 <prvInitialiseNewTask+0x66>
 800513e:	e000      	b.n	8005142 <prvInitialiseNewTask+0x96>
			{
				break;
 8005140:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800514a:	e003      	b.n	8005154 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800514c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514e:	2200      	movs	r2, #0
 8005150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005156:	2b37      	cmp	r3, #55	@ 0x37
 8005158:	d901      	bls.n	800515e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800515a:	2337      	movs	r3, #55	@ 0x37
 800515c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800515e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005160:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005162:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005168:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800516a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800516c:	2200      	movs	r2, #0
 800516e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff f965 	bl	8004444 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	3318      	adds	r3, #24
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff f960 	bl	8004444 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005186:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005188:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005192:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005196:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005198:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	2200      	movs	r2, #0
 800519e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ac:	3354      	adds	r3, #84	@ 0x54
 80051ae:	224c      	movs	r2, #76	@ 0x4c
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 fda8 	bl	8006d08 <memset>
 80051b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ba:	4a0d      	ldr	r2, [pc, #52]	@ (80051f0 <prvInitialiseNewTask+0x144>)
 80051bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80051be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c0:	4a0c      	ldr	r2, [pc, #48]	@ (80051f4 <prvInitialiseNewTask+0x148>)
 80051c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	4a0c      	ldr	r2, [pc, #48]	@ (80051f8 <prvInitialiseNewTask+0x14c>)
 80051c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	69b8      	ldr	r0, [r7, #24]
 80051d0:	f001 f95a 	bl	8006488 <pxPortInitialiseStack>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051e6:	bf00      	nop
 80051e8:	3720      	adds	r7, #32
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20001b08 	.word	0x20001b08
 80051f4:	20001b70 	.word	0x20001b70
 80051f8:	20001bd8 	.word	0x20001bd8

080051fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005204:	f001 fa70 	bl	80066e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005208:	4b2d      	ldr	r3, [pc, #180]	@ (80052c0 <prvAddNewTaskToReadyList+0xc4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	4a2c      	ldr	r2, [pc, #176]	@ (80052c0 <prvAddNewTaskToReadyList+0xc4>)
 8005210:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005212:	4b2c      	ldr	r3, [pc, #176]	@ (80052c4 <prvAddNewTaskToReadyList+0xc8>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d109      	bne.n	800522e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800521a:	4a2a      	ldr	r2, [pc, #168]	@ (80052c4 <prvAddNewTaskToReadyList+0xc8>)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005220:	4b27      	ldr	r3, [pc, #156]	@ (80052c0 <prvAddNewTaskToReadyList+0xc4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d110      	bne.n	800524a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005228:	f000 fc2e 	bl	8005a88 <prvInitialiseTaskLists>
 800522c:	e00d      	b.n	800524a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800522e:	4b26      	ldr	r3, [pc, #152]	@ (80052c8 <prvAddNewTaskToReadyList+0xcc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d109      	bne.n	800524a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005236:	4b23      	ldr	r3, [pc, #140]	@ (80052c4 <prvAddNewTaskToReadyList+0xc8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	429a      	cmp	r2, r3
 8005242:	d802      	bhi.n	800524a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005244:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <prvAddNewTaskToReadyList+0xc8>)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800524a:	4b20      	ldr	r3, [pc, #128]	@ (80052cc <prvAddNewTaskToReadyList+0xd0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3301      	adds	r3, #1
 8005250:	4a1e      	ldr	r2, [pc, #120]	@ (80052cc <prvAddNewTaskToReadyList+0xd0>)
 8005252:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005254:	4b1d      	ldr	r3, [pc, #116]	@ (80052cc <prvAddNewTaskToReadyList+0xd0>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005260:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <prvAddNewTaskToReadyList+0xd4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d903      	bls.n	8005270 <prvAddNewTaskToReadyList+0x74>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	4a18      	ldr	r2, [pc, #96]	@ (80052d0 <prvAddNewTaskToReadyList+0xd4>)
 800526e:	6013      	str	r3, [r2, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005274:	4613      	mov	r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4a15      	ldr	r2, [pc, #84]	@ (80052d4 <prvAddNewTaskToReadyList+0xd8>)
 800527e:	441a      	add	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f7ff f8e9 	bl	800445e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800528c:	f001 fa5e 	bl	800674c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005290:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <prvAddNewTaskToReadyList+0xcc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00e      	beq.n	80052b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005298:	4b0a      	ldr	r3, [pc, #40]	@ (80052c4 <prvAddNewTaskToReadyList+0xc8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d207      	bcs.n	80052b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052a6:	4b0c      	ldr	r3, [pc, #48]	@ (80052d8 <prvAddNewTaskToReadyList+0xdc>)
 80052a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000dd0 	.word	0x20000dd0
 80052c4:	200008fc 	.word	0x200008fc
 80052c8:	20000ddc 	.word	0x20000ddc
 80052cc:	20000dec 	.word	0x20000dec
 80052d0:	20000dd8 	.word	0x20000dd8
 80052d4:	20000900 	.word	0x20000900
 80052d8:	e000ed04 	.word	0xe000ed04

080052dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d018      	beq.n	8005320 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80052ee:	4b14      	ldr	r3, [pc, #80]	@ (8005340 <vTaskDelay+0x64>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00b      	beq.n	800530e <vTaskDelay+0x32>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60bb      	str	r3, [r7, #8]
}
 8005308:	bf00      	nop
 800530a:	bf00      	nop
 800530c:	e7fd      	b.n	800530a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800530e:	f000 f88b 	bl	8005428 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005312:	2100      	movs	r1, #0
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fd09 	bl	8005d2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800531a:	f000 f893 	bl	8005444 <xTaskResumeAll>
 800531e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005326:	4b07      	ldr	r3, [pc, #28]	@ (8005344 <vTaskDelay+0x68>)
 8005328:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000df8 	.word	0x20000df8
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b08a      	sub	sp, #40	@ 0x28
 800534c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005356:	463a      	mov	r2, r7
 8005358:	1d39      	adds	r1, r7, #4
 800535a:	f107 0308 	add.w	r3, r7, #8
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff f81c 	bl	800439c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	9202      	str	r2, [sp, #8]
 800536c:	9301      	str	r3, [sp, #4]
 800536e:	2300      	movs	r3, #0
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	2300      	movs	r3, #0
 8005374:	460a      	mov	r2, r1
 8005376:	4924      	ldr	r1, [pc, #144]	@ (8005408 <vTaskStartScheduler+0xc0>)
 8005378:	4824      	ldr	r0, [pc, #144]	@ (800540c <vTaskStartScheduler+0xc4>)
 800537a:	f7ff fdf1 	bl	8004f60 <xTaskCreateStatic>
 800537e:	4603      	mov	r3, r0
 8005380:	4a23      	ldr	r2, [pc, #140]	@ (8005410 <vTaskStartScheduler+0xc8>)
 8005382:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005384:	4b22      	ldr	r3, [pc, #136]	@ (8005410 <vTaskStartScheduler+0xc8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800538c:	2301      	movs	r3, #1
 800538e:	617b      	str	r3, [r7, #20]
 8005390:	e001      	b.n	8005396 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d102      	bne.n	80053a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800539c:	f000 fd1a 	bl	8005dd4 <xTimerCreateTimerTask>
 80053a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d11b      	bne.n	80053e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	613b      	str	r3, [r7, #16]
}
 80053ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80053bc:	4b15      	ldr	r3, [pc, #84]	@ (8005414 <vTaskStartScheduler+0xcc>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3354      	adds	r3, #84	@ 0x54
 80053c2:	4a15      	ldr	r2, [pc, #84]	@ (8005418 <vTaskStartScheduler+0xd0>)
 80053c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80053c6:	4b15      	ldr	r3, [pc, #84]	@ (800541c <vTaskStartScheduler+0xd4>)
 80053c8:	f04f 32ff 	mov.w	r2, #4294967295
 80053cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80053ce:	4b14      	ldr	r3, [pc, #80]	@ (8005420 <vTaskStartScheduler+0xd8>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053d4:	4b13      	ldr	r3, [pc, #76]	@ (8005424 <vTaskStartScheduler+0xdc>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80053da:	f001 f8e1 	bl	80065a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80053de:	e00f      	b.n	8005400 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e6:	d10b      	bne.n	8005400 <vTaskStartScheduler+0xb8>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	60fb      	str	r3, [r7, #12]
}
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <vTaskStartScheduler+0xb4>
}
 8005400:	bf00      	nop
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	08006f24 	.word	0x08006f24
 800540c:	08005a59 	.word	0x08005a59
 8005410:	20000df4 	.word	0x20000df4
 8005414:	200008fc 	.word	0x200008fc
 8005418:	20000010 	.word	0x20000010
 800541c:	20000df0 	.word	0x20000df0
 8005420:	20000ddc 	.word	0x20000ddc
 8005424:	20000dd4 	.word	0x20000dd4

08005428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800542c:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <vTaskSuspendAll+0x18>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3301      	adds	r3, #1
 8005432:	4a03      	ldr	r2, [pc, #12]	@ (8005440 <vTaskSuspendAll+0x18>)
 8005434:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005436:	bf00      	nop
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	20000df8 	.word	0x20000df8

08005444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005452:	4b42      	ldr	r3, [pc, #264]	@ (800555c <xTaskResumeAll+0x118>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <xTaskResumeAll+0x2e>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	603b      	str	r3, [r7, #0]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005472:	f001 f939 	bl	80066e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005476:	4b39      	ldr	r3, [pc, #228]	@ (800555c <xTaskResumeAll+0x118>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3b01      	subs	r3, #1
 800547c:	4a37      	ldr	r2, [pc, #220]	@ (800555c <xTaskResumeAll+0x118>)
 800547e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005480:	4b36      	ldr	r3, [pc, #216]	@ (800555c <xTaskResumeAll+0x118>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d162      	bne.n	800554e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005488:	4b35      	ldr	r3, [pc, #212]	@ (8005560 <xTaskResumeAll+0x11c>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d05e      	beq.n	800554e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005490:	e02f      	b.n	80054f2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005492:	4b34      	ldr	r3, [pc, #208]	@ (8005564 <xTaskResumeAll+0x120>)
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3318      	adds	r3, #24
 800549e:	4618      	mov	r0, r3
 80054a0:	f7ff f83a 	bl	8004518 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7ff f835 	bl	8004518 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005568 <xTaskResumeAll+0x124>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d903      	bls.n	80054c2 <xTaskResumeAll+0x7e>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	4a2a      	ldr	r2, [pc, #168]	@ (8005568 <xTaskResumeAll+0x124>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4a27      	ldr	r2, [pc, #156]	@ (800556c <xTaskResumeAll+0x128>)
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fe ffc0 	bl	800445e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e2:	4b23      	ldr	r3, [pc, #140]	@ (8005570 <xTaskResumeAll+0x12c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d302      	bcc.n	80054f2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80054ec:	4b21      	ldr	r3, [pc, #132]	@ (8005574 <xTaskResumeAll+0x130>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054f2:	4b1c      	ldr	r3, [pc, #112]	@ (8005564 <xTaskResumeAll+0x120>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1cb      	bne.n	8005492 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005500:	f000 fb66 	bl	8005bd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005504:	4b1c      	ldr	r3, [pc, #112]	@ (8005578 <xTaskResumeAll+0x134>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d010      	beq.n	8005532 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005510:	f000 f846 	bl	80055a0 <xTaskIncrementTick>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d002      	beq.n	8005520 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800551a:	4b16      	ldr	r3, [pc, #88]	@ (8005574 <xTaskResumeAll+0x130>)
 800551c:	2201      	movs	r2, #1
 800551e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1f1      	bne.n	8005510 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800552c:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <xTaskResumeAll+0x134>)
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005532:	4b10      	ldr	r3, [pc, #64]	@ (8005574 <xTaskResumeAll+0x130>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800553a:	2301      	movs	r3, #1
 800553c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800553e:	4b0f      	ldr	r3, [pc, #60]	@ (800557c <xTaskResumeAll+0x138>)
 8005540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800554e:	f001 f8fd 	bl	800674c <vPortExitCritical>

	return xAlreadyYielded;
 8005552:	68bb      	ldr	r3, [r7, #8]
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	20000df8 	.word	0x20000df8
 8005560:	20000dd0 	.word	0x20000dd0
 8005564:	20000d90 	.word	0x20000d90
 8005568:	20000dd8 	.word	0x20000dd8
 800556c:	20000900 	.word	0x20000900
 8005570:	200008fc 	.word	0x200008fc
 8005574:	20000de4 	.word	0x20000de4
 8005578:	20000de0 	.word	0x20000de0
 800557c:	e000ed04 	.word	0xe000ed04

08005580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005586:	4b05      	ldr	r3, [pc, #20]	@ (800559c <xTaskGetTickCount+0x1c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800558c:	687b      	ldr	r3, [r7, #4]
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	20000dd4 	.word	0x20000dd4

080055a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055aa:	4b4f      	ldr	r3, [pc, #316]	@ (80056e8 <xTaskIncrementTick+0x148>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f040 8090 	bne.w	80056d4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055b4:	4b4d      	ldr	r3, [pc, #308]	@ (80056ec <xTaskIncrementTick+0x14c>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80055bc:	4a4b      	ldr	r2, [pc, #300]	@ (80056ec <xTaskIncrementTick+0x14c>)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d121      	bne.n	800560c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80055c8:	4b49      	ldr	r3, [pc, #292]	@ (80056f0 <xTaskIncrementTick+0x150>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <xTaskIncrementTick+0x4a>
	__asm volatile
 80055d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d6:	f383 8811 	msr	BASEPRI, r3
 80055da:	f3bf 8f6f 	isb	sy
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	603b      	str	r3, [r7, #0]
}
 80055e4:	bf00      	nop
 80055e6:	bf00      	nop
 80055e8:	e7fd      	b.n	80055e6 <xTaskIncrementTick+0x46>
 80055ea:	4b41      	ldr	r3, [pc, #260]	@ (80056f0 <xTaskIncrementTick+0x150>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	4b40      	ldr	r3, [pc, #256]	@ (80056f4 <xTaskIncrementTick+0x154>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a3e      	ldr	r2, [pc, #248]	@ (80056f0 <xTaskIncrementTick+0x150>)
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	4a3e      	ldr	r2, [pc, #248]	@ (80056f4 <xTaskIncrementTick+0x154>)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4b3e      	ldr	r3, [pc, #248]	@ (80056f8 <xTaskIncrementTick+0x158>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3301      	adds	r3, #1
 8005604:	4a3c      	ldr	r2, [pc, #240]	@ (80056f8 <xTaskIncrementTick+0x158>)
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	f000 fae2 	bl	8005bd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800560c:	4b3b      	ldr	r3, [pc, #236]	@ (80056fc <xTaskIncrementTick+0x15c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	429a      	cmp	r2, r3
 8005614:	d349      	bcc.n	80056aa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005616:	4b36      	ldr	r3, [pc, #216]	@ (80056f0 <xTaskIncrementTick+0x150>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005620:	4b36      	ldr	r3, [pc, #216]	@ (80056fc <xTaskIncrementTick+0x15c>)
 8005622:	f04f 32ff 	mov.w	r2, #4294967295
 8005626:	601a      	str	r2, [r3, #0]
					break;
 8005628:	e03f      	b.n	80056aa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800562a:	4b31      	ldr	r3, [pc, #196]	@ (80056f0 <xTaskIncrementTick+0x150>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	429a      	cmp	r2, r3
 8005640:	d203      	bcs.n	800564a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005642:	4a2e      	ldr	r2, [pc, #184]	@ (80056fc <xTaskIncrementTick+0x15c>)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005648:	e02f      	b.n	80056aa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	3304      	adds	r3, #4
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe ff62 	bl	8004518 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	3318      	adds	r3, #24
 8005660:	4618      	mov	r0, r3
 8005662:	f7fe ff59 	bl	8004518 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566a:	4b25      	ldr	r3, [pc, #148]	@ (8005700 <xTaskIncrementTick+0x160>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d903      	bls.n	800567a <xTaskIncrementTick+0xda>
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005676:	4a22      	ldr	r2, [pc, #136]	@ (8005700 <xTaskIncrementTick+0x160>)
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4a1f      	ldr	r2, [pc, #124]	@ (8005704 <xTaskIncrementTick+0x164>)
 8005688:	441a      	add	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7fe fee4 	bl	800445e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800569a:	4b1b      	ldr	r3, [pc, #108]	@ (8005708 <xTaskIncrementTick+0x168>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d3b8      	bcc.n	8005616 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80056a4:	2301      	movs	r3, #1
 80056a6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a8:	e7b5      	b.n	8005616 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056aa:	4b17      	ldr	r3, [pc, #92]	@ (8005708 <xTaskIncrementTick+0x168>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b0:	4914      	ldr	r1, [pc, #80]	@ (8005704 <xTaskIncrementTick+0x164>)
 80056b2:	4613      	mov	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	440b      	add	r3, r1
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d901      	bls.n	80056c6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80056c2:	2301      	movs	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80056c6:	4b11      	ldr	r3, [pc, #68]	@ (800570c <xTaskIncrementTick+0x16c>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80056ce:	2301      	movs	r3, #1
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e004      	b.n	80056de <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80056d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <xTaskIncrementTick+0x170>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3301      	adds	r3, #1
 80056da:	4a0d      	ldr	r2, [pc, #52]	@ (8005710 <xTaskIncrementTick+0x170>)
 80056dc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80056de:	697b      	ldr	r3, [r7, #20]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000df8 	.word	0x20000df8
 80056ec:	20000dd4 	.word	0x20000dd4
 80056f0:	20000d88 	.word	0x20000d88
 80056f4:	20000d8c 	.word	0x20000d8c
 80056f8:	20000de8 	.word	0x20000de8
 80056fc:	20000df0 	.word	0x20000df0
 8005700:	20000dd8 	.word	0x20000dd8
 8005704:	20000900 	.word	0x20000900
 8005708:	200008fc 	.word	0x200008fc
 800570c:	20000de4 	.word	0x20000de4
 8005710:	20000de0 	.word	0x20000de0

08005714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800571a:	4b2b      	ldr	r3, [pc, #172]	@ (80057c8 <vTaskSwitchContext+0xb4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005722:	4b2a      	ldr	r3, [pc, #168]	@ (80057cc <vTaskSwitchContext+0xb8>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005728:	e047      	b.n	80057ba <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800572a:	4b28      	ldr	r3, [pc, #160]	@ (80057cc <vTaskSwitchContext+0xb8>)
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005730:	4b27      	ldr	r3, [pc, #156]	@ (80057d0 <vTaskSwitchContext+0xbc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	e011      	b.n	800575c <vTaskSwitchContext+0x48>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <vTaskSwitchContext+0x42>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	607b      	str	r3, [r7, #4]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <vTaskSwitchContext+0x3e>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3b01      	subs	r3, #1
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	491d      	ldr	r1, [pc, #116]	@ (80057d4 <vTaskSwitchContext+0xc0>)
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	4613      	mov	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0e3      	beq.n	8005738 <vTaskSwitchContext+0x24>
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4a16      	ldr	r2, [pc, #88]	@ (80057d4 <vTaskSwitchContext+0xc0>)
 800577c:	4413      	add	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	605a      	str	r2, [r3, #4]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3308      	adds	r3, #8
 8005792:	429a      	cmp	r2, r3
 8005794:	d104      	bne.n	80057a0 <vTaskSwitchContext+0x8c>
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	605a      	str	r2, [r3, #4]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	4a0c      	ldr	r2, [pc, #48]	@ (80057d8 <vTaskSwitchContext+0xc4>)
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4a09      	ldr	r2, [pc, #36]	@ (80057d0 <vTaskSwitchContext+0xbc>)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057b0:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <vTaskSwitchContext+0xc4>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3354      	adds	r3, #84	@ 0x54
 80057b6:	4a09      	ldr	r2, [pc, #36]	@ (80057dc <vTaskSwitchContext+0xc8>)
 80057b8:	6013      	str	r3, [r2, #0]
}
 80057ba:	bf00      	nop
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000df8 	.word	0x20000df8
 80057cc:	20000de4 	.word	0x20000de4
 80057d0:	20000dd8 	.word	0x20000dd8
 80057d4:	20000900 	.word	0x20000900
 80057d8:	200008fc 	.word	0x200008fc
 80057dc:	20000010 	.word	0x20000010

080057e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10b      	bne.n	8005808 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	60fb      	str	r3, [r7, #12]
}
 8005802:	bf00      	nop
 8005804:	bf00      	nop
 8005806:	e7fd      	b.n	8005804 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005808:	4b07      	ldr	r3, [pc, #28]	@ (8005828 <vTaskPlaceOnEventList+0x48>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3318      	adds	r3, #24
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f7fe fe48 	bl	80044a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005816:	2101      	movs	r1, #1
 8005818:	6838      	ldr	r0, [r7, #0]
 800581a:	f000 fa87 	bl	8005d2c <prvAddCurrentTaskToDelayedList>
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	200008fc 	.word	0x200008fc

0800582c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	617b      	str	r3, [r7, #20]
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005856:	4b0a      	ldr	r3, [pc, #40]	@ (8005880 <vTaskPlaceOnEventListRestricted+0x54>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3318      	adds	r3, #24
 800585c:	4619      	mov	r1, r3
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7fe fdfd 	bl	800445e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d002      	beq.n	8005870 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800586a:	f04f 33ff 	mov.w	r3, #4294967295
 800586e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	68b8      	ldr	r0, [r7, #8]
 8005874:	f000 fa5a 	bl	8005d2c <prvAddCurrentTaskToDelayedList>
	}
 8005878:	bf00      	nop
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	200008fc 	.word	0x200008fc

08005884 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10b      	bne.n	80058b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	60fb      	str	r3, [r7, #12]
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	e7fd      	b.n	80058ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	3318      	adds	r3, #24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe fe2e 	bl	8004518 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005934 <xTaskRemoveFromEventList+0xb0>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d11d      	bne.n	8005900 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fe fe25 	bl	8004518 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058d2:	4b19      	ldr	r3, [pc, #100]	@ (8005938 <xTaskRemoveFromEventList+0xb4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d903      	bls.n	80058e2 <xTaskRemoveFromEventList+0x5e>
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058de:	4a16      	ldr	r2, [pc, #88]	@ (8005938 <xTaskRemoveFromEventList+0xb4>)
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4a13      	ldr	r2, [pc, #76]	@ (800593c <xTaskRemoveFromEventList+0xb8>)
 80058f0:	441a      	add	r2, r3
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	3304      	adds	r3, #4
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7fe fdb0 	bl	800445e <vListInsertEnd>
 80058fe:	e005      	b.n	800590c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	3318      	adds	r3, #24
 8005904:	4619      	mov	r1, r3
 8005906:	480e      	ldr	r0, [pc, #56]	@ (8005940 <xTaskRemoveFromEventList+0xbc>)
 8005908:	f7fe fda9 	bl	800445e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	4b0c      	ldr	r3, [pc, #48]	@ (8005944 <xTaskRemoveFromEventList+0xc0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005916:	429a      	cmp	r2, r3
 8005918:	d905      	bls.n	8005926 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800591a:	2301      	movs	r3, #1
 800591c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800591e:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <xTaskRemoveFromEventList+0xc4>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	e001      	b.n	800592a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005926:	2300      	movs	r3, #0
 8005928:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800592a:	697b      	ldr	r3, [r7, #20]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	20000df8 	.word	0x20000df8
 8005938:	20000dd8 	.word	0x20000dd8
 800593c:	20000900 	.word	0x20000900
 8005940:	20000d90 	.word	0x20000d90
 8005944:	200008fc 	.word	0x200008fc
 8005948:	20000de4 	.word	0x20000de4

0800594c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005954:	4b06      	ldr	r3, [pc, #24]	@ (8005970 <vTaskInternalSetTimeOutState+0x24>)
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800595c:	4b05      	ldr	r3, [pc, #20]	@ (8005974 <vTaskInternalSetTimeOutState+0x28>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	605a      	str	r2, [r3, #4]
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	20000de8 	.word	0x20000de8
 8005974:	20000dd4 	.word	0x20000dd4

08005978 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b088      	sub	sp, #32
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	613b      	str	r3, [r7, #16]
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60fb      	str	r3, [r7, #12]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059be:	f000 fe93 	bl	80066e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a38 <xTaskCheckForTimeOut+0xc0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	69ba      	ldr	r2, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	d102      	bne.n	80059e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80059dc:	2300      	movs	r3, #0
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	e023      	b.n	8005a2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	4b15      	ldr	r3, [pc, #84]	@ (8005a3c <xTaskCheckForTimeOut+0xc4>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d007      	beq.n	80059fe <xTaskCheckForTimeOut+0x86>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d302      	bcc.n	80059fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80059f8:	2301      	movs	r3, #1
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	e015      	b.n	8005a2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d20b      	bcs.n	8005a20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1ad2      	subs	r2, r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7ff ff99 	bl	800594c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	e004      	b.n	8005a2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a2a:	f000 fe8f 	bl	800674c <vPortExitCritical>

	return xReturn;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20000dd4 	.word	0x20000dd4
 8005a3c:	20000de8 	.word	0x20000de8

08005a40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a40:	b480      	push	{r7}
 8005a42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a44:	4b03      	ldr	r3, [pc, #12]	@ (8005a54 <vTaskMissedYield+0x14>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	601a      	str	r2, [r3, #0]
}
 8005a4a:	bf00      	nop
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	20000de4 	.word	0x20000de4

08005a58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a60:	f000 f852 	bl	8005b08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a64:	4b06      	ldr	r3, [pc, #24]	@ (8005a80 <prvIdleTask+0x28>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d9f9      	bls.n	8005a60 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a6c:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <prvIdleTask+0x2c>)
 8005a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	f3bf 8f4f 	dsb	sy
 8005a78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a7c:	e7f0      	b.n	8005a60 <prvIdleTask+0x8>
 8005a7e:	bf00      	nop
 8005a80:	20000900 	.word	0x20000900
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a8e:	2300      	movs	r3, #0
 8005a90:	607b      	str	r3, [r7, #4]
 8005a92:	e00c      	b.n	8005aae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	4613      	mov	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4a12      	ldr	r2, [pc, #72]	@ (8005ae8 <prvInitialiseTaskLists+0x60>)
 8005aa0:	4413      	add	r3, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fcae 	bl	8004404 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	607b      	str	r3, [r7, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b37      	cmp	r3, #55	@ 0x37
 8005ab2:	d9ef      	bls.n	8005a94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ab4:	480d      	ldr	r0, [pc, #52]	@ (8005aec <prvInitialiseTaskLists+0x64>)
 8005ab6:	f7fe fca5 	bl	8004404 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005aba:	480d      	ldr	r0, [pc, #52]	@ (8005af0 <prvInitialiseTaskLists+0x68>)
 8005abc:	f7fe fca2 	bl	8004404 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ac0:	480c      	ldr	r0, [pc, #48]	@ (8005af4 <prvInitialiseTaskLists+0x6c>)
 8005ac2:	f7fe fc9f 	bl	8004404 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005ac6:	480c      	ldr	r0, [pc, #48]	@ (8005af8 <prvInitialiseTaskLists+0x70>)
 8005ac8:	f7fe fc9c 	bl	8004404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005acc:	480b      	ldr	r0, [pc, #44]	@ (8005afc <prvInitialiseTaskLists+0x74>)
 8005ace:	f7fe fc99 	bl	8004404 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b00 <prvInitialiseTaskLists+0x78>)
 8005ad4:	4a05      	ldr	r2, [pc, #20]	@ (8005aec <prvInitialiseTaskLists+0x64>)
 8005ad6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8005b04 <prvInitialiseTaskLists+0x7c>)
 8005ada:	4a05      	ldr	r2, [pc, #20]	@ (8005af0 <prvInitialiseTaskLists+0x68>)
 8005adc:	601a      	str	r2, [r3, #0]
}
 8005ade:	bf00      	nop
 8005ae0:	3708      	adds	r7, #8
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000900 	.word	0x20000900
 8005aec:	20000d60 	.word	0x20000d60
 8005af0:	20000d74 	.word	0x20000d74
 8005af4:	20000d90 	.word	0x20000d90
 8005af8:	20000da4 	.word	0x20000da4
 8005afc:	20000dbc 	.word	0x20000dbc
 8005b00:	20000d88 	.word	0x20000d88
 8005b04:	20000d8c 	.word	0x20000d8c

08005b08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b0e:	e019      	b.n	8005b44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b10:	f000 fdea 	bl	80066e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b14:	4b10      	ldr	r3, [pc, #64]	@ (8005b58 <prvCheckTasksWaitingTermination+0x50>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fe fcf9 	bl	8004518 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b26:	4b0d      	ldr	r3, [pc, #52]	@ (8005b5c <prvCheckTasksWaitingTermination+0x54>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8005b5c <prvCheckTasksWaitingTermination+0x54>)
 8005b2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b30:	4b0b      	ldr	r3, [pc, #44]	@ (8005b60 <prvCheckTasksWaitingTermination+0x58>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	4a0a      	ldr	r2, [pc, #40]	@ (8005b60 <prvCheckTasksWaitingTermination+0x58>)
 8005b38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b3a:	f000 fe07 	bl	800674c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f810 	bl	8005b64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b44:	4b06      	ldr	r3, [pc, #24]	@ (8005b60 <prvCheckTasksWaitingTermination+0x58>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e1      	bne.n	8005b10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b4c:	bf00      	nop
 8005b4e:	bf00      	nop
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	20000da4 	.word	0x20000da4
 8005b5c:	20000dd0 	.word	0x20000dd0
 8005b60:	20000db8 	.word	0x20000db8

08005b64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3354      	adds	r3, #84	@ 0x54
 8005b70:	4618      	mov	r0, r3
 8005b72:	f001 f8d1 	bl	8006d18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d108      	bne.n	8005b92 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 ff9f 	bl	8006ac8 <vPortFree>
				vPortFree( pxTCB );
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 ff9c 	bl	8006ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b90:	e019      	b.n	8005bc6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d103      	bne.n	8005ba4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 ff93 	bl	8006ac8 <vPortFree>
	}
 8005ba2:	e010      	b.n	8005bc6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d00b      	beq.n	8005bc6 <prvDeleteTCB+0x62>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60fb      	str	r3, [r7, #12]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <prvDeleteTCB+0x5e>
	}
 8005bc6:	bf00      	nop
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005c08 <prvResetNextTaskUnblockTime+0x38>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <prvResetNextTaskUnblockTime+0x3c>)
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005be8:	e008      	b.n	8005bfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bea:	4b07      	ldr	r3, [pc, #28]	@ (8005c08 <prvResetNextTaskUnblockTime+0x38>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	4a04      	ldr	r2, [pc, #16]	@ (8005c0c <prvResetNextTaskUnblockTime+0x3c>)
 8005bfa:	6013      	str	r3, [r2, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20000d88 	.word	0x20000d88
 8005c0c:	20000df0 	.word	0x20000df0

08005c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c16:	4b0b      	ldr	r3, [pc, #44]	@ (8005c44 <xTaskGetSchedulerState+0x34>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d102      	bne.n	8005c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	e008      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c24:	4b08      	ldr	r3, [pc, #32]	@ (8005c48 <xTaskGetSchedulerState+0x38>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	607b      	str	r3, [r7, #4]
 8005c30:	e001      	b.n	8005c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c32:	2300      	movs	r3, #0
 8005c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c36:	687b      	ldr	r3, [r7, #4]
	}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	20000ddc 	.word	0x20000ddc
 8005c48:	20000df8 	.word	0x20000df8

08005c4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d058      	beq.n	8005d14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c62:	4b2f      	ldr	r3, [pc, #188]	@ (8005d20 <xTaskPriorityDisinherit+0xd4>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d00b      	beq.n	8005c84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	60fb      	str	r3, [r7, #12]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10b      	bne.n	8005ca4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	60bb      	str	r3, [r7, #8]
}
 8005c9e:	bf00      	nop
 8005ca0:	bf00      	nop
 8005ca2:	e7fd      	b.n	8005ca0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca8:	1e5a      	subs	r2, r3, #1
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d02c      	beq.n	8005d14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d128      	bne.n	8005d14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fe fc26 	bl	8004518 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d24 <xTaskPriorityDisinherit+0xd8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d903      	bls.n	8005cf4 <xTaskPriorityDisinherit+0xa8>
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8005d24 <xTaskPriorityDisinherit+0xd8>)
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4a09      	ldr	r2, [pc, #36]	@ (8005d28 <xTaskPriorityDisinherit+0xdc>)
 8005d02:	441a      	add	r2, r3
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	3304      	adds	r3, #4
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	f7fe fba7 	bl	800445e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d14:	697b      	ldr	r3, [r7, #20]
	}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	200008fc 	.word	0x200008fc
 8005d24:	20000dd8 	.word	0x20000dd8
 8005d28:	20000900 	.word	0x20000900

08005d2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d36:	4b21      	ldr	r3, [pc, #132]	@ (8005dbc <prvAddCurrentTaskToDelayedList+0x90>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d3c:	4b20      	ldr	r3, [pc, #128]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fbe8 	bl	8004518 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4e:	d10a      	bne.n	8005d66 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d56:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4819      	ldr	r0, [pc, #100]	@ (8005dc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d60:	f7fe fb7d 	bl	800445e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d64:	e026      	b.n	8005db4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d6e:	4b14      	ldr	r3, [pc, #80]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	429a      	cmp	r2, r3
 8005d7c:	d209      	bcs.n	8005d92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d7e:	4b12      	ldr	r3, [pc, #72]	@ (8005dc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3304      	adds	r3, #4
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	f7fe fb8b 	bl	80044a6 <vListInsert>
}
 8005d90:	e010      	b.n	8005db4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d92:	4b0e      	ldr	r3, [pc, #56]	@ (8005dcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4610      	mov	r0, r2
 8005da0:	f7fe fb81 	bl	80044a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005da4:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d202      	bcs.n	8005db4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005dae:	4a08      	ldr	r2, [pc, #32]	@ (8005dd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6013      	str	r3, [r2, #0]
}
 8005db4:	bf00      	nop
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	20000dd4 	.word	0x20000dd4
 8005dc0:	200008fc 	.word	0x200008fc
 8005dc4:	20000dbc 	.word	0x20000dbc
 8005dc8:	20000d8c 	.word	0x20000d8c
 8005dcc:	20000d88 	.word	0x20000d88
 8005dd0:	20000df0 	.word	0x20000df0

08005dd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	@ 0x28
 8005dd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005dde:	f000 fb13 	bl	8006408 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005de2:	4b1d      	ldr	r3, [pc, #116]	@ (8005e58 <xTimerCreateTimerTask+0x84>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d021      	beq.n	8005e2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005dee:	2300      	movs	r3, #0
 8005df0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005df2:	1d3a      	adds	r2, r7, #4
 8005df4:	f107 0108 	add.w	r1, r7, #8
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe fae7 	bl	80043d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	9202      	str	r2, [sp, #8]
 8005e0a:	9301      	str	r3, [sp, #4]
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	9300      	str	r3, [sp, #0]
 8005e10:	2300      	movs	r3, #0
 8005e12:	460a      	mov	r2, r1
 8005e14:	4911      	ldr	r1, [pc, #68]	@ (8005e5c <xTimerCreateTimerTask+0x88>)
 8005e16:	4812      	ldr	r0, [pc, #72]	@ (8005e60 <xTimerCreateTimerTask+0x8c>)
 8005e18:	f7ff f8a2 	bl	8004f60 <xTaskCreateStatic>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4a11      	ldr	r2, [pc, #68]	@ (8005e64 <xTimerCreateTimerTask+0x90>)
 8005e20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005e22:	4b10      	ldr	r3, [pc, #64]	@ (8005e64 <xTimerCreateTimerTask+0x90>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10b      	bne.n	8005e4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	613b      	str	r3, [r7, #16]
}
 8005e46:	bf00      	nop
 8005e48:	bf00      	nop
 8005e4a:	e7fd      	b.n	8005e48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005e4c:	697b      	ldr	r3, [r7, #20]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3718      	adds	r7, #24
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000e2c 	.word	0x20000e2c
 8005e5c:	08006f2c 	.word	0x08006f2c
 8005e60:	08005fa1 	.word	0x08005fa1
 8005e64:	20000e30 	.word	0x20000e30

08005e68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08a      	sub	sp, #40	@ 0x28
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <xTimerGenericCommand+0x30>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	623b      	str	r3, [r7, #32]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005e98:	4b19      	ldr	r3, [pc, #100]	@ (8005f00 <xTimerGenericCommand+0x98>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d02a      	beq.n	8005ef6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	dc18      	bgt.n	8005ee4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005eb2:	f7ff fead 	bl	8005c10 <xTaskGetSchedulerState>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d109      	bne.n	8005ed0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ebc:	4b10      	ldr	r3, [pc, #64]	@ (8005f00 <xTimerGenericCommand+0x98>)
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	f107 0110 	add.w	r1, r7, #16
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec8:	f7fe fc5a 	bl	8004780 <xQueueGenericSend>
 8005ecc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ece:	e012      	b.n	8005ef6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ed0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f00 <xTimerGenericCommand+0x98>)
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	f107 0110 	add.w	r1, r7, #16
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2200      	movs	r2, #0
 8005edc:	f7fe fc50 	bl	8004780 <xQueueGenericSend>
 8005ee0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ee2:	e008      	b.n	8005ef6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ee4:	4b06      	ldr	r3, [pc, #24]	@ (8005f00 <xTimerGenericCommand+0x98>)
 8005ee6:	6818      	ldr	r0, [r3, #0]
 8005ee8:	f107 0110 	add.w	r1, r7, #16
 8005eec:	2300      	movs	r3, #0
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	f7fe fd48 	bl	8004984 <xQueueGenericSendFromISR>
 8005ef4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3728      	adds	r7, #40	@ 0x28
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20000e2c 	.word	0x20000e2c

08005f04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b088      	sub	sp, #32
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f0e:	4b23      	ldr	r3, [pc, #140]	@ (8005f9c <prvProcessExpiredTimer+0x98>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fafb 	bl	8004518 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d023      	beq.n	8005f78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	18d1      	adds	r1, r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	683a      	ldr	r2, [r7, #0]
 8005f3c:	6978      	ldr	r0, [r7, #20]
 8005f3e:	f000 f8d5 	bl	80060ec <prvInsertTimerInActiveList>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d020      	beq.n	8005f8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f48:	2300      	movs	r3, #0
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	2100      	movs	r1, #0
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f7ff ff88 	bl	8005e68 <xTimerGenericCommand>
 8005f58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d114      	bne.n	8005f8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	60fb      	str	r3, [r7, #12]
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	6978      	ldr	r0, [r7, #20]
 8005f90:	4798      	blx	r3
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000e24 	.word	0x20000e24

08005fa0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fa8:	f107 0308 	add.w	r3, r7, #8
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 f859 	bl	8006064 <prvGetNextExpireTime>
 8005fb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 f805 	bl	8005fc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005fbe:	f000 f8d7 	bl	8006170 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005fc2:	bf00      	nop
 8005fc4:	e7f0      	b.n	8005fa8 <prvTimerTask+0x8>
	...

08005fc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005fd2:	f7ff fa29 	bl	8005428 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005fd6:	f107 0308 	add.w	r3, r7, #8
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 f866 	bl	80060ac <prvSampleTimeNow>
 8005fe0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d130      	bne.n	800604a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <prvProcessTimerOrBlockTask+0x3c>
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d806      	bhi.n	8006004 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ff6:	f7ff fa25 	bl	8005444 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ffa:	68f9      	ldr	r1, [r7, #12]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7ff ff81 	bl	8005f04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006002:	e024      	b.n	800604e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d008      	beq.n	800601c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800600a:	4b13      	ldr	r3, [pc, #76]	@ (8006058 <prvProcessTimerOrBlockTask+0x90>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <prvProcessTimerOrBlockTask+0x50>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <prvProcessTimerOrBlockTask+0x52>
 8006018:	2300      	movs	r3, #0
 800601a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800601c:	4b0f      	ldr	r3, [pc, #60]	@ (800605c <prvProcessTimerOrBlockTask+0x94>)
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	1ad3      	subs	r3, r2, r3
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4619      	mov	r1, r3
 800602a:	f7fe ff65 	bl	8004ef8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800602e:	f7ff fa09 	bl	8005444 <xTaskResumeAll>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d10a      	bne.n	800604e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006038:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <prvProcessTimerOrBlockTask+0x98>)
 800603a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	f3bf 8f6f 	isb	sy
}
 8006048:	e001      	b.n	800604e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800604a:	f7ff f9fb 	bl	8005444 <xTaskResumeAll>
}
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	20000e28 	.word	0x20000e28
 800605c:	20000e2c 	.word	0x20000e2c
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800606c:	4b0e      	ldr	r3, [pc, #56]	@ (80060a8 <prvGetNextExpireTime+0x44>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <prvGetNextExpireTime+0x16>
 8006076:	2201      	movs	r2, #1
 8006078:	e000      	b.n	800607c <prvGetNextExpireTime+0x18>
 800607a:	2200      	movs	r2, #0
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d105      	bne.n	8006094 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006088:	4b07      	ldr	r3, [pc, #28]	@ (80060a8 <prvGetNextExpireTime+0x44>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e001      	b.n	8006098 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006098:	68fb      	ldr	r3, [r7, #12]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000e24 	.word	0x20000e24

080060ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80060b4:	f7ff fa64 	bl	8005580 <xTaskGetTickCount>
 80060b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80060ba:	4b0b      	ldr	r3, [pc, #44]	@ (80060e8 <prvSampleTimeNow+0x3c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d205      	bcs.n	80060d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80060c4:	f000 f93a 	bl	800633c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e002      	b.n	80060d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80060d6:	4a04      	ldr	r2, [pc, #16]	@ (80060e8 <prvSampleTimeNow+0x3c>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80060dc:	68fb      	ldr	r3, [r7, #12]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000e34 	.word	0x20000e34

080060ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	429a      	cmp	r2, r3
 8006110:	d812      	bhi.n	8006138 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e01b      	b.n	800615e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006126:	4b10      	ldr	r3, [pc, #64]	@ (8006168 <prvInsertTimerInActiveList+0x7c>)
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3304      	adds	r3, #4
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fe f9b8 	bl	80044a6 <vListInsert>
 8006136:	e012      	b.n	800615e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	429a      	cmp	r2, r3
 800613e:	d206      	bcs.n	800614e <prvInsertTimerInActiveList+0x62>
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	429a      	cmp	r2, r3
 8006146:	d302      	bcc.n	800614e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006148:	2301      	movs	r3, #1
 800614a:	617b      	str	r3, [r7, #20]
 800614c:	e007      	b.n	800615e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800614e:	4b07      	ldr	r3, [pc, #28]	@ (800616c <prvInsertTimerInActiveList+0x80>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3304      	adds	r3, #4
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f7fe f9a4 	bl	80044a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800615e:	697b      	ldr	r3, [r7, #20]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	20000e28 	.word	0x20000e28
 800616c:	20000e24 	.word	0x20000e24

08006170 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08e      	sub	sp, #56	@ 0x38
 8006174:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006176:	e0ce      	b.n	8006316 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	da19      	bge.n	80061b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800617e:	1d3b      	adds	r3, r7, #4
 8006180:	3304      	adds	r3, #4
 8006182:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	61fb      	str	r3, [r7, #28]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80061a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a8:	6850      	ldr	r0, [r2, #4]
 80061aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061ac:	6892      	ldr	r2, [r2, #8]
 80061ae:	4611      	mov	r1, r2
 80061b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f2c0 80ae 	blt.w	8006316 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80061be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c8:	3304      	adds	r3, #4
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7fe f9a4 	bl	8004518 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061d0:	463b      	mov	r3, r7
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff ff6a 	bl	80060ac <prvSampleTimeNow>
 80061d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2b09      	cmp	r3, #9
 80061de:	f200 8097 	bhi.w	8006310 <prvProcessReceivedCommands+0x1a0>
 80061e2:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <prvProcessReceivedCommands+0x78>)
 80061e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006211 	.word	0x08006211
 80061f4:	08006287 	.word	0x08006287
 80061f8:	0800629b 	.word	0x0800629b
 80061fc:	080062e7 	.word	0x080062e7
 8006200:	08006211 	.word	0x08006211
 8006204:	08006211 	.word	0x08006211
 8006208:	08006287 	.word	0x08006287
 800620c:	0800629b 	.word	0x0800629b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	b2da      	uxtb	r2, r3
 800621c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	18d1      	adds	r1, r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006230:	f7ff ff5c 	bl	80060ec <prvInsertTimerInActiveList>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d06c      	beq.n	8006314 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006240:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d061      	beq.n	8006314 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	441a      	add	r2, r3
 8006258:	2300      	movs	r3, #0
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	2300      	movs	r3, #0
 800625e:	2100      	movs	r1, #0
 8006260:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006262:	f7ff fe01 	bl	8005e68 <xTimerGenericCommand>
 8006266:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d152      	bne.n	8006314 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800626e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006272:	f383 8811 	msr	BASEPRI, r3
 8006276:	f3bf 8f6f 	isb	sy
 800627a:	f3bf 8f4f 	dsb	sy
 800627e:	61bb      	str	r3, [r7, #24]
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	e7fd      	b.n	8006282 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006298:	e03d      	b.n	8006316 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062a0:	f043 0301 	orr.w	r3, r3, #1
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80062b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	617b      	str	r3, [r7, #20]
}
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	e7fd      	b.n	80062ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80062d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d8:	18d1      	adds	r1, r2, r3
 80062da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e0:	f7ff ff04 	bl	80060ec <prvInsertTimerInActiveList>
					break;
 80062e4:	e017      	b.n	8006316 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d103      	bne.n	80062fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80062f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062f6:	f000 fbe7 	bl	8006ac8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80062fa:	e00c      	b.n	8006316 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006302:	f023 0301 	bic.w	r3, r3, #1
 8006306:	b2da      	uxtb	r2, r3
 8006308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800630a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800630e:	e002      	b.n	8006316 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006310:	bf00      	nop
 8006312:	e000      	b.n	8006316 <prvProcessReceivedCommands+0x1a6>
					break;
 8006314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006316:	4b08      	ldr	r3, [pc, #32]	@ (8006338 <prvProcessReceivedCommands+0x1c8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	1d39      	adds	r1, r7, #4
 800631c:	2200      	movs	r2, #0
 800631e:	4618      	mov	r0, r3
 8006320:	f7fe fbce 	bl	8004ac0 <xQueueReceive>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	f47f af26 	bne.w	8006178 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	3730      	adds	r7, #48	@ 0x30
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000e2c 	.word	0x20000e2c

0800633c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006342:	e049      	b.n	80063d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006344:	4b2e      	ldr	r3, [pc, #184]	@ (8006400 <prvSwitchTimerLists+0xc4>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800634e:	4b2c      	ldr	r3, [pc, #176]	@ (8006400 <prvSwitchTimerLists+0xc4>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3304      	adds	r3, #4
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe f8db 	bl	8004518 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006370:	f003 0304 	and.w	r3, r3, #4
 8006374:	2b00      	cmp	r3, #0
 8006376:	d02f      	beq.n	80063d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4413      	add	r3, r2
 8006380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006382:	68ba      	ldr	r2, [r7, #8]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	d90e      	bls.n	80063a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006396:	4b1a      	ldr	r3, [pc, #104]	@ (8006400 <prvSwitchTimerLists+0xc4>)
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7fe f880 	bl	80044a6 <vListInsert>
 80063a6:	e017      	b.n	80063d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80063a8:	2300      	movs	r3, #0
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	2100      	movs	r1, #0
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f7ff fd58 	bl	8005e68 <xTimerGenericCommand>
 80063b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	603b      	str	r3, [r7, #0]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063d8:	4b09      	ldr	r3, [pc, #36]	@ (8006400 <prvSwitchTimerLists+0xc4>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1b0      	bne.n	8006344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80063e2:	4b07      	ldr	r3, [pc, #28]	@ (8006400 <prvSwitchTimerLists+0xc4>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80063e8:	4b06      	ldr	r3, [pc, #24]	@ (8006404 <prvSwitchTimerLists+0xc8>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a04      	ldr	r2, [pc, #16]	@ (8006400 <prvSwitchTimerLists+0xc4>)
 80063ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80063f0:	4a04      	ldr	r2, [pc, #16]	@ (8006404 <prvSwitchTimerLists+0xc8>)
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	6013      	str	r3, [r2, #0]
}
 80063f6:	bf00      	nop
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20000e24 	.word	0x20000e24
 8006404:	20000e28 	.word	0x20000e28

08006408 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800640e:	f000 f96b 	bl	80066e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006412:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <prvCheckForValidListAndQueue+0x60>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d120      	bne.n	800645c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800641a:	4814      	ldr	r0, [pc, #80]	@ (800646c <prvCheckForValidListAndQueue+0x64>)
 800641c:	f7fd fff2 	bl	8004404 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006420:	4813      	ldr	r0, [pc, #76]	@ (8006470 <prvCheckForValidListAndQueue+0x68>)
 8006422:	f7fd ffef 	bl	8004404 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006426:	4b13      	ldr	r3, [pc, #76]	@ (8006474 <prvCheckForValidListAndQueue+0x6c>)
 8006428:	4a10      	ldr	r2, [pc, #64]	@ (800646c <prvCheckForValidListAndQueue+0x64>)
 800642a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800642c:	4b12      	ldr	r3, [pc, #72]	@ (8006478 <prvCheckForValidListAndQueue+0x70>)
 800642e:	4a10      	ldr	r2, [pc, #64]	@ (8006470 <prvCheckForValidListAndQueue+0x68>)
 8006430:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006432:	2300      	movs	r3, #0
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	4b11      	ldr	r3, [pc, #68]	@ (800647c <prvCheckForValidListAndQueue+0x74>)
 8006438:	4a11      	ldr	r2, [pc, #68]	@ (8006480 <prvCheckForValidListAndQueue+0x78>)
 800643a:	2110      	movs	r1, #16
 800643c:	200a      	movs	r0, #10
 800643e:	f7fe f8ff 	bl	8004640 <xQueueGenericCreateStatic>
 8006442:	4603      	mov	r3, r0
 8006444:	4a08      	ldr	r2, [pc, #32]	@ (8006468 <prvCheckForValidListAndQueue+0x60>)
 8006446:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006448:	4b07      	ldr	r3, [pc, #28]	@ (8006468 <prvCheckForValidListAndQueue+0x60>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d005      	beq.n	800645c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006450:	4b05      	ldr	r3, [pc, #20]	@ (8006468 <prvCheckForValidListAndQueue+0x60>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	490b      	ldr	r1, [pc, #44]	@ (8006484 <prvCheckForValidListAndQueue+0x7c>)
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fd24 	bl	8004ea4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800645c:	f000 f976 	bl	800674c <vPortExitCritical>
}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000e2c 	.word	0x20000e2c
 800646c:	20000dfc 	.word	0x20000dfc
 8006470:	20000e10 	.word	0x20000e10
 8006474:	20000e24 	.word	0x20000e24
 8006478:	20000e28 	.word	0x20000e28
 800647c:	20000ed8 	.word	0x20000ed8
 8006480:	20000e38 	.word	0x20000e38
 8006484:	08006f34 	.word	0x08006f34

08006488 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3b04      	subs	r3, #4
 8006498:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3b04      	subs	r3, #4
 80064a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	f023 0201 	bic.w	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3b04      	subs	r3, #4
 80064b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064b8:	4a0c      	ldr	r2, [pc, #48]	@ (80064ec <pxPortInitialiseStack+0x64>)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3b14      	subs	r3, #20
 80064c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3b04      	subs	r3, #4
 80064ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f06f 0202 	mvn.w	r2, #2
 80064d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3b20      	subs	r3, #32
 80064dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064de:	68fb      	ldr	r3, [r7, #12]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	080064f1 	.word	0x080064f1

080064f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064fa:	4b13      	ldr	r3, [pc, #76]	@ (8006548 <prvTaskExitError+0x58>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006502:	d00b      	beq.n	800651c <prvTaskExitError+0x2c>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	60fb      	str	r3, [r7, #12]
}
 8006516:	bf00      	nop
 8006518:	bf00      	nop
 800651a:	e7fd      	b.n	8006518 <prvTaskExitError+0x28>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60bb      	str	r3, [r7, #8]
}
 800652e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006530:	bf00      	nop
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0fc      	beq.n	8006532 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	2000000c 	.word	0x2000000c
 800654c:	00000000 	.word	0x00000000

08006550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006550:	4b07      	ldr	r3, [pc, #28]	@ (8006570 <pxCurrentTCBConst2>)
 8006552:	6819      	ldr	r1, [r3, #0]
 8006554:	6808      	ldr	r0, [r1, #0]
 8006556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800655a:	f380 8809 	msr	PSP, r0
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f380 8811 	msr	BASEPRI, r0
 800656a:	4770      	bx	lr
 800656c:	f3af 8000 	nop.w

08006570 <pxCurrentTCBConst2>:
 8006570:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop

08006578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006578:	4808      	ldr	r0, [pc, #32]	@ (800659c <prvPortStartFirstTask+0x24>)
 800657a:	6800      	ldr	r0, [r0, #0]
 800657c:	6800      	ldr	r0, [r0, #0]
 800657e:	f380 8808 	msr	MSP, r0
 8006582:	f04f 0000 	mov.w	r0, #0
 8006586:	f380 8814 	msr	CONTROL, r0
 800658a:	b662      	cpsie	i
 800658c:	b661      	cpsie	f
 800658e:	f3bf 8f4f 	dsb	sy
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	df00      	svc	0
 8006598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800659a:	bf00      	nop
 800659c:	e000ed08 	.word	0xe000ed08

080065a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065a6:	4b47      	ldr	r3, [pc, #284]	@ (80066c4 <xPortStartScheduler+0x124>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a47      	ldr	r2, [pc, #284]	@ (80066c8 <xPortStartScheduler+0x128>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d10b      	bne.n	80065c8 <xPortStartScheduler+0x28>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	613b      	str	r3, [r7, #16]
}
 80065c2:	bf00      	nop
 80065c4:	bf00      	nop
 80065c6:	e7fd      	b.n	80065c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065c8:	4b3e      	ldr	r3, [pc, #248]	@ (80066c4 <xPortStartScheduler+0x124>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a3f      	ldr	r2, [pc, #252]	@ (80066cc <xPortStartScheduler+0x12c>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d10b      	bne.n	80065ea <xPortStartScheduler+0x4a>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	60fb      	str	r3, [r7, #12]
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	e7fd      	b.n	80065e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065ea:	4b39      	ldr	r3, [pc, #228]	@ (80066d0 <xPortStartScheduler+0x130>)
 80065ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	22ff      	movs	r2, #255	@ 0xff
 80065fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800660c:	b2da      	uxtb	r2, r3
 800660e:	4b31      	ldr	r3, [pc, #196]	@ (80066d4 <xPortStartScheduler+0x134>)
 8006610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006612:	4b31      	ldr	r3, [pc, #196]	@ (80066d8 <xPortStartScheduler+0x138>)
 8006614:	2207      	movs	r2, #7
 8006616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006618:	e009      	b.n	800662e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800661a:	4b2f      	ldr	r3, [pc, #188]	@ (80066d8 <xPortStartScheduler+0x138>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3b01      	subs	r3, #1
 8006620:	4a2d      	ldr	r2, [pc, #180]	@ (80066d8 <xPortStartScheduler+0x138>)
 8006622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006624:	78fb      	ldrb	r3, [r7, #3]
 8006626:	b2db      	uxtb	r3, r3
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	b2db      	uxtb	r3, r3
 800662c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800662e:	78fb      	ldrb	r3, [r7, #3]
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006636:	2b80      	cmp	r3, #128	@ 0x80
 8006638:	d0ef      	beq.n	800661a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800663a:	4b27      	ldr	r3, [pc, #156]	@ (80066d8 <xPortStartScheduler+0x138>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f1c3 0307 	rsb	r3, r3, #7
 8006642:	2b04      	cmp	r3, #4
 8006644:	d00b      	beq.n	800665e <xPortStartScheduler+0xbe>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	60bb      	str	r3, [r7, #8]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800665e:	4b1e      	ldr	r3, [pc, #120]	@ (80066d8 <xPortStartScheduler+0x138>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	021b      	lsls	r3, r3, #8
 8006664:	4a1c      	ldr	r2, [pc, #112]	@ (80066d8 <xPortStartScheduler+0x138>)
 8006666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006668:	4b1b      	ldr	r3, [pc, #108]	@ (80066d8 <xPortStartScheduler+0x138>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006670:	4a19      	ldr	r2, [pc, #100]	@ (80066d8 <xPortStartScheduler+0x138>)
 8006672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	b2da      	uxtb	r2, r3
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800667c:	4b17      	ldr	r3, [pc, #92]	@ (80066dc <xPortStartScheduler+0x13c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a16      	ldr	r2, [pc, #88]	@ (80066dc <xPortStartScheduler+0x13c>)
 8006682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006688:	4b14      	ldr	r3, [pc, #80]	@ (80066dc <xPortStartScheduler+0x13c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a13      	ldr	r2, [pc, #76]	@ (80066dc <xPortStartScheduler+0x13c>)
 800668e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006694:	f000 f8da 	bl	800684c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006698:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <xPortStartScheduler+0x140>)
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800669e:	f000 f8f9 	bl	8006894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066a2:	4b10      	ldr	r3, [pc, #64]	@ (80066e4 <xPortStartScheduler+0x144>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a0f      	ldr	r2, [pc, #60]	@ (80066e4 <xPortStartScheduler+0x144>)
 80066a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066ae:	f7ff ff63 	bl	8006578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066b2:	f7ff f82f 	bl	8005714 <vTaskSwitchContext>
	prvTaskExitError();
 80066b6:	f7ff ff1b 	bl	80064f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3718      	adds	r7, #24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	e000ed00 	.word	0xe000ed00
 80066c8:	410fc271 	.word	0x410fc271
 80066cc:	410fc270 	.word	0x410fc270
 80066d0:	e000e400 	.word	0xe000e400
 80066d4:	20000f28 	.word	0x20000f28
 80066d8:	20000f2c 	.word	0x20000f2c
 80066dc:	e000ed20 	.word	0xe000ed20
 80066e0:	2000000c 	.word	0x2000000c
 80066e4:	e000ef34 	.word	0xe000ef34

080066e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	607b      	str	r3, [r7, #4]
}
 8006700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006702:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <vPortEnterCritical+0x5c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3301      	adds	r3, #1
 8006708:	4a0e      	ldr	r2, [pc, #56]	@ (8006744 <vPortEnterCritical+0x5c>)
 800670a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800670c:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <vPortEnterCritical+0x5c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d110      	bne.n	8006736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006714:	4b0c      	ldr	r3, [pc, #48]	@ (8006748 <vPortEnterCritical+0x60>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00b      	beq.n	8006736 <vPortEnterCritical+0x4e>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	603b      	str	r3, [r7, #0]
}
 8006730:	bf00      	nop
 8006732:	bf00      	nop
 8006734:	e7fd      	b.n	8006732 <vPortEnterCritical+0x4a>
	}
}
 8006736:	bf00      	nop
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	2000000c 	.word	0x2000000c
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006752:	4b12      	ldr	r3, [pc, #72]	@ (800679c <vPortExitCritical+0x50>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10b      	bne.n	8006772 <vPortExitCritical+0x26>
	__asm volatile
 800675a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800675e:	f383 8811 	msr	BASEPRI, r3
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	f3bf 8f4f 	dsb	sy
 800676a:	607b      	str	r3, [r7, #4]
}
 800676c:	bf00      	nop
 800676e:	bf00      	nop
 8006770:	e7fd      	b.n	800676e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006772:	4b0a      	ldr	r3, [pc, #40]	@ (800679c <vPortExitCritical+0x50>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	3b01      	subs	r3, #1
 8006778:	4a08      	ldr	r2, [pc, #32]	@ (800679c <vPortExitCritical+0x50>)
 800677a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800677c:	4b07      	ldr	r3, [pc, #28]	@ (800679c <vPortExitCritical+0x50>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <vPortExitCritical+0x44>
 8006784:	2300      	movs	r3, #0
 8006786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f383 8811 	msr	BASEPRI, r3
}
 800678e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	2000000c 	.word	0x2000000c

080067a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067a0:	f3ef 8009 	mrs	r0, PSP
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	4b15      	ldr	r3, [pc, #84]	@ (8006800 <pxCurrentTCBConst>)
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	f01e 0f10 	tst.w	lr, #16
 80067b0:	bf08      	it	eq
 80067b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	6010      	str	r0, [r2, #0]
 80067bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067c4:	f380 8811 	msr	BASEPRI, r0
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f7fe ffa0 	bl	8005714 <vTaskSwitchContext>
 80067d4:	f04f 0000 	mov.w	r0, #0
 80067d8:	f380 8811 	msr	BASEPRI, r0
 80067dc:	bc09      	pop	{r0, r3}
 80067de:	6819      	ldr	r1, [r3, #0]
 80067e0:	6808      	ldr	r0, [r1, #0]
 80067e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e6:	f01e 0f10 	tst.w	lr, #16
 80067ea:	bf08      	it	eq
 80067ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067f0:	f380 8809 	msr	PSP, r0
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	f3af 8000 	nop.w

08006800 <pxCurrentTCBConst>:
 8006800:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop

08006808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006822:	f7fe febd 	bl	80055a0 <xTaskIncrementTick>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800682c:	4b06      	ldr	r3, [pc, #24]	@ (8006848 <xPortSysTickHandler+0x40>)
 800682e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	2300      	movs	r3, #0
 8006836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	f383 8811 	msr	BASEPRI, r3
}
 800683e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	e000ed04 	.word	0xe000ed04

0800684c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800684c:	b480      	push	{r7}
 800684e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006850:	4b0b      	ldr	r3, [pc, #44]	@ (8006880 <vPortSetupTimerInterrupt+0x34>)
 8006852:	2200      	movs	r2, #0
 8006854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006856:	4b0b      	ldr	r3, [pc, #44]	@ (8006884 <vPortSetupTimerInterrupt+0x38>)
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <vPortSetupTimerInterrupt+0x3c>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a0a      	ldr	r2, [pc, #40]	@ (800688c <vPortSetupTimerInterrupt+0x40>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	099b      	lsrs	r3, r3, #6
 8006868:	4a09      	ldr	r2, [pc, #36]	@ (8006890 <vPortSetupTimerInterrupt+0x44>)
 800686a:	3b01      	subs	r3, #1
 800686c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800686e:	4b04      	ldr	r3, [pc, #16]	@ (8006880 <vPortSetupTimerInterrupt+0x34>)
 8006870:	2207      	movs	r2, #7
 8006872:	601a      	str	r2, [r3, #0]
}
 8006874:	bf00      	nop
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	e000e010 	.word	0xe000e010
 8006884:	e000e018 	.word	0xe000e018
 8006888:	20000000 	.word	0x20000000
 800688c:	10624dd3 	.word	0x10624dd3
 8006890:	e000e014 	.word	0xe000e014

08006894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068a4 <vPortEnableVFP+0x10>
 8006898:	6801      	ldr	r1, [r0, #0]
 800689a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800689e:	6001      	str	r1, [r0, #0]
 80068a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068a2:	bf00      	nop
 80068a4:	e000ed88 	.word	0xe000ed88

080068a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068ae:	f3ef 8305 	mrs	r3, IPSR
 80068b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b0f      	cmp	r3, #15
 80068b8:	d915      	bls.n	80068e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068ba:	4a18      	ldr	r2, [pc, #96]	@ (800691c <vPortValidateInterruptPriority+0x74>)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068c4:	4b16      	ldr	r3, [pc, #88]	@ (8006920 <vPortValidateInterruptPriority+0x78>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	7afa      	ldrb	r2, [r7, #11]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d20b      	bcs.n	80068e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	607b      	str	r3, [r7, #4]
}
 80068e0:	bf00      	nop
 80068e2:	bf00      	nop
 80068e4:	e7fd      	b.n	80068e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006924 <vPortValidateInterruptPriority+0x7c>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80068ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006928 <vPortValidateInterruptPriority+0x80>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d90b      	bls.n	800690e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	603b      	str	r3, [r7, #0]
}
 8006908:	bf00      	nop
 800690a:	bf00      	nop
 800690c:	e7fd      	b.n	800690a <vPortValidateInterruptPriority+0x62>
	}
 800690e:	bf00      	nop
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	e000e3f0 	.word	0xe000e3f0
 8006920:	20000f28 	.word	0x20000f28
 8006924:	e000ed0c 	.word	0xe000ed0c
 8006928:	20000f2c 	.word	0x20000f2c

0800692c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	@ 0x28
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006938:	f7fe fd76 	bl	8005428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800693c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ab0 <pvPortMalloc+0x184>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006944:	f000 f924 	bl	8006b90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006948:	4b5a      	ldr	r3, [pc, #360]	@ (8006ab4 <pvPortMalloc+0x188>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	f040 8095 	bne.w	8006a80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01e      	beq.n	800699a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800695c:	2208      	movs	r2, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4413      	add	r3, r2
 8006962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b00      	cmp	r3, #0
 800696c:	d015      	beq.n	800699a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f023 0307 	bic.w	r3, r3, #7
 8006974:	3308      	adds	r3, #8
 8006976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00b      	beq.n	800699a <pvPortMalloc+0x6e>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	617b      	str	r3, [r7, #20]
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	e7fd      	b.n	8006996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d06f      	beq.n	8006a80 <pvPortMalloc+0x154>
 80069a0:	4b45      	ldr	r3, [pc, #276]	@ (8006ab8 <pvPortMalloc+0x18c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d86a      	bhi.n	8006a80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80069aa:	4b44      	ldr	r3, [pc, #272]	@ (8006abc <pvPortMalloc+0x190>)
 80069ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80069ae:	4b43      	ldr	r3, [pc, #268]	@ (8006abc <pvPortMalloc+0x190>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069b4:	e004      	b.n	80069c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d903      	bls.n	80069d2 <pvPortMalloc+0xa6>
 80069ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1f1      	bne.n	80069b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069d2:	4b37      	ldr	r3, [pc, #220]	@ (8006ab0 <pvPortMalloc+0x184>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069d8:	429a      	cmp	r2, r3
 80069da:	d051      	beq.n	8006a80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2208      	movs	r2, #8
 80069e2:	4413      	add	r3, r2
 80069e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	1ad2      	subs	r2, r2, r3
 80069f6:	2308      	movs	r3, #8
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d920      	bls.n	8006a40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4413      	add	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d00b      	beq.n	8006a28 <pvPortMalloc+0xfc>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	613b      	str	r3, [r7, #16]
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	e7fd      	b.n	8006a24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	685a      	ldr	r2, [r3, #4]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	1ad2      	subs	r2, r2, r3
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a3a:	69b8      	ldr	r0, [r7, #24]
 8006a3c:	f000 f90a 	bl	8006c54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a40:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab8 <pvPortMalloc+0x18c>)
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8006ab8 <pvPortMalloc+0x18c>)
 8006a4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ab8 <pvPortMalloc+0x18c>)
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac0 <pvPortMalloc+0x194>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d203      	bcs.n	8006a62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a5a:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <pvPortMalloc+0x18c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a18      	ldr	r2, [pc, #96]	@ (8006ac0 <pvPortMalloc+0x194>)
 8006a60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	4b13      	ldr	r3, [pc, #76]	@ (8006ab4 <pvPortMalloc+0x188>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a76:	4b13      	ldr	r3, [pc, #76]	@ (8006ac4 <pvPortMalloc+0x198>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	4a11      	ldr	r2, [pc, #68]	@ (8006ac4 <pvPortMalloc+0x198>)
 8006a7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a80:	f7fe fce0 	bl	8005444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00b      	beq.n	8006aa6 <pvPortMalloc+0x17a>
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	60fb      	str	r3, [r7, #12]
}
 8006aa0:	bf00      	nop
 8006aa2:	bf00      	nop
 8006aa4:	e7fd      	b.n	8006aa2 <pvPortMalloc+0x176>
	return pvReturn;
 8006aa6:	69fb      	ldr	r3, [r7, #28]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3728      	adds	r7, #40	@ 0x28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	20001af0 	.word	0x20001af0
 8006ab4:	20001b04 	.word	0x20001b04
 8006ab8:	20001af4 	.word	0x20001af4
 8006abc:	20001ae8 	.word	0x20001ae8
 8006ac0:	20001af8 	.word	0x20001af8
 8006ac4:	20001afc 	.word	0x20001afc

08006ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d04f      	beq.n	8006b7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ada:	2308      	movs	r3, #8
 8006adc:	425b      	negs	r3, r3
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	4b25      	ldr	r3, [pc, #148]	@ (8006b84 <vPortFree+0xbc>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4013      	ands	r3, r2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d10b      	bne.n	8006b0e <vPortFree+0x46>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60fb      	str	r3, [r7, #12]
}
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <vPortFree+0x66>
	__asm volatile
 8006b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1a:	f383 8811 	msr	BASEPRI, r3
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	f3bf 8f4f 	dsb	sy
 8006b26:	60bb      	str	r3, [r7, #8]
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	e7fd      	b.n	8006b2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	4b14      	ldr	r3, [pc, #80]	@ (8006b84 <vPortFree+0xbc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4013      	ands	r3, r2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d01e      	beq.n	8006b7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d11a      	bne.n	8006b7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	4b0e      	ldr	r3, [pc, #56]	@ (8006b84 <vPortFree+0xbc>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	401a      	ands	r2, r3
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b54:	f7fe fc68 	bl	8005428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b88 <vPortFree+0xc0>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4413      	add	r3, r2
 8006b62:	4a09      	ldr	r2, [pc, #36]	@ (8006b88 <vPortFree+0xc0>)
 8006b64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b66:	6938      	ldr	r0, [r7, #16]
 8006b68:	f000 f874 	bl	8006c54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b6c:	4b07      	ldr	r3, [pc, #28]	@ (8006b8c <vPortFree+0xc4>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	4a06      	ldr	r2, [pc, #24]	@ (8006b8c <vPortFree+0xc4>)
 8006b74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b76:	f7fe fc65 	bl	8005444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b7a:	bf00      	nop
 8006b7c:	3718      	adds	r7, #24
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20001b04 	.word	0x20001b04
 8006b88:	20001af4 	.word	0x20001af4
 8006b8c:	20001b00 	.word	0x20001b00

08006b90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b96:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8006b9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b9c:	4b27      	ldr	r3, [pc, #156]	@ (8006c3c <prvHeapInit+0xac>)
 8006b9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f003 0307 	and.w	r3, r3, #7
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00c      	beq.n	8006bc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	3307      	adds	r3, #7
 8006bae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f023 0307 	bic.w	r3, r3, #7
 8006bb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8006c3c <prvHeapInit+0xac>)
 8006bc0:	4413      	add	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006c40 <prvHeapInit+0xb0>)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bce:	4b1c      	ldr	r3, [pc, #112]	@ (8006c40 <prvHeapInit+0xb0>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bdc:	2208      	movs	r2, #8
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f023 0307 	bic.w	r3, r3, #7
 8006bea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a15      	ldr	r2, [pc, #84]	@ (8006c44 <prvHeapInit+0xb4>)
 8006bf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bf2:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <prvHeapInit+0xb4>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bfa:	4b12      	ldr	r3, [pc, #72]	@ (8006c44 <prvHeapInit+0xb4>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006c10:	4b0c      	ldr	r3, [pc, #48]	@ (8006c44 <prvHeapInit+0xb4>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c48 <prvHeapInit+0xb8>)
 8006c1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	4a09      	ldr	r2, [pc, #36]	@ (8006c4c <prvHeapInit+0xbc>)
 8006c26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c28:	4b09      	ldr	r3, [pc, #36]	@ (8006c50 <prvHeapInit+0xc0>)
 8006c2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006c2e:	601a      	str	r2, [r3, #0]
}
 8006c30:	bf00      	nop
 8006c32:	3714      	adds	r7, #20
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20000f30 	.word	0x20000f30
 8006c40:	20001ae8 	.word	0x20001ae8
 8006c44:	20001af0 	.word	0x20001af0
 8006c48:	20001af8 	.word	0x20001af8
 8006c4c:	20001af4 	.word	0x20001af4
 8006c50:	20001b04 	.word	0x20001b04

08006c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c5c:	4b28      	ldr	r3, [pc, #160]	@ (8006d00 <prvInsertBlockIntoFreeList+0xac>)
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e002      	b.n	8006c68 <prvInsertBlockIntoFreeList+0x14>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d8f7      	bhi.n	8006c62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	68ba      	ldr	r2, [r7, #8]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d108      	bne.n	8006c96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	441a      	add	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	441a      	add	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d118      	bne.n	8006cdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	4b15      	ldr	r3, [pc, #84]	@ (8006d04 <prvInsertBlockIntoFreeList+0xb0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d00d      	beq.n	8006cd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	441a      	add	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	e008      	b.n	8006ce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006d04 <prvInsertBlockIntoFreeList+0xb0>)
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	e003      	b.n	8006ce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d002      	beq.n	8006cf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cf2:	bf00      	nop
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	20001ae8 	.word	0x20001ae8
 8006d04:	20001af0 	.word	0x20001af0

08006d08 <memset>:
 8006d08:	4402      	add	r2, r0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d100      	bne.n	8006d12 <memset+0xa>
 8006d10:	4770      	bx	lr
 8006d12:	f803 1b01 	strb.w	r1, [r3], #1
 8006d16:	e7f9      	b.n	8006d0c <memset+0x4>

08006d18 <_reclaim_reent>:
 8006d18:	4b29      	ldr	r3, [pc, #164]	@ (8006dc0 <_reclaim_reent+0xa8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4283      	cmp	r3, r0
 8006d1e:	b570      	push	{r4, r5, r6, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	d04b      	beq.n	8006dbc <_reclaim_reent+0xa4>
 8006d24:	69c3      	ldr	r3, [r0, #28]
 8006d26:	b1ab      	cbz	r3, 8006d54 <_reclaim_reent+0x3c>
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	b16b      	cbz	r3, 8006d48 <_reclaim_reent+0x30>
 8006d2c:	2500      	movs	r5, #0
 8006d2e:	69e3      	ldr	r3, [r4, #28]
 8006d30:	68db      	ldr	r3, [r3, #12]
 8006d32:	5959      	ldr	r1, [r3, r5]
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d13b      	bne.n	8006db0 <_reclaim_reent+0x98>
 8006d38:	3504      	adds	r5, #4
 8006d3a:	2d80      	cmp	r5, #128	@ 0x80
 8006d3c:	d1f7      	bne.n	8006d2e <_reclaim_reent+0x16>
 8006d3e:	69e3      	ldr	r3, [r4, #28]
 8006d40:	4620      	mov	r0, r4
 8006d42:	68d9      	ldr	r1, [r3, #12]
 8006d44:	f000 f872 	bl	8006e2c <_free_r>
 8006d48:	69e3      	ldr	r3, [r4, #28]
 8006d4a:	6819      	ldr	r1, [r3, #0]
 8006d4c:	b111      	cbz	r1, 8006d54 <_reclaim_reent+0x3c>
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f000 f86c 	bl	8006e2c <_free_r>
 8006d54:	6961      	ldr	r1, [r4, #20]
 8006d56:	b111      	cbz	r1, 8006d5e <_reclaim_reent+0x46>
 8006d58:	4620      	mov	r0, r4
 8006d5a:	f000 f867 	bl	8006e2c <_free_r>
 8006d5e:	69e1      	ldr	r1, [r4, #28]
 8006d60:	b111      	cbz	r1, 8006d68 <_reclaim_reent+0x50>
 8006d62:	4620      	mov	r0, r4
 8006d64:	f000 f862 	bl	8006e2c <_free_r>
 8006d68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006d6a:	b111      	cbz	r1, 8006d72 <_reclaim_reent+0x5a>
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	f000 f85d 	bl	8006e2c <_free_r>
 8006d72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d74:	b111      	cbz	r1, 8006d7c <_reclaim_reent+0x64>
 8006d76:	4620      	mov	r0, r4
 8006d78:	f000 f858 	bl	8006e2c <_free_r>
 8006d7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006d7e:	b111      	cbz	r1, 8006d86 <_reclaim_reent+0x6e>
 8006d80:	4620      	mov	r0, r4
 8006d82:	f000 f853 	bl	8006e2c <_free_r>
 8006d86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006d88:	b111      	cbz	r1, 8006d90 <_reclaim_reent+0x78>
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f000 f84e 	bl	8006e2c <_free_r>
 8006d90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006d92:	b111      	cbz	r1, 8006d9a <_reclaim_reent+0x82>
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 f849 	bl	8006e2c <_free_r>
 8006d9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006d9c:	b111      	cbz	r1, 8006da4 <_reclaim_reent+0x8c>
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 f844 	bl	8006e2c <_free_r>
 8006da4:	6a23      	ldr	r3, [r4, #32]
 8006da6:	b14b      	cbz	r3, 8006dbc <_reclaim_reent+0xa4>
 8006da8:	4620      	mov	r0, r4
 8006daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006dae:	4718      	bx	r3
 8006db0:	680e      	ldr	r6, [r1, #0]
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 f83a 	bl	8006e2c <_free_r>
 8006db8:	4631      	mov	r1, r6
 8006dba:	e7bb      	b.n	8006d34 <_reclaim_reent+0x1c>
 8006dbc:	bd70      	pop	{r4, r5, r6, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20000010 	.word	0x20000010

08006dc4 <__libc_init_array>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8006dfc <__libc_init_array+0x38>)
 8006dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8006e00 <__libc_init_array+0x3c>)
 8006dca:	1b64      	subs	r4, r4, r5
 8006dcc:	10a4      	asrs	r4, r4, #2
 8006dce:	2600      	movs	r6, #0
 8006dd0:	42a6      	cmp	r6, r4
 8006dd2:	d109      	bne.n	8006de8 <__libc_init_array+0x24>
 8006dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8006e04 <__libc_init_array+0x40>)
 8006dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8006e08 <__libc_init_array+0x44>)
 8006dd8:	f000 f87e 	bl	8006ed8 <_init>
 8006ddc:	1b64      	subs	r4, r4, r5
 8006dde:	10a4      	asrs	r4, r4, #2
 8006de0:	2600      	movs	r6, #0
 8006de2:	42a6      	cmp	r6, r4
 8006de4:	d105      	bne.n	8006df2 <__libc_init_array+0x2e>
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dec:	4798      	blx	r3
 8006dee:	3601      	adds	r6, #1
 8006df0:	e7ee      	b.n	8006dd0 <__libc_init_array+0xc>
 8006df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df6:	4798      	blx	r3
 8006df8:	3601      	adds	r6, #1
 8006dfa:	e7f2      	b.n	8006de2 <__libc_init_array+0x1e>
 8006dfc:	08006fb0 	.word	0x08006fb0
 8006e00:	08006fb0 	.word	0x08006fb0
 8006e04:	08006fb0 	.word	0x08006fb0
 8006e08:	08006fb4 	.word	0x08006fb4

08006e0c <__retarget_lock_acquire_recursive>:
 8006e0c:	4770      	bx	lr

08006e0e <__retarget_lock_release_recursive>:
 8006e0e:	4770      	bx	lr

08006e10 <memcpy>:
 8006e10:	440a      	add	r2, r1
 8006e12:	4291      	cmp	r1, r2
 8006e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e18:	d100      	bne.n	8006e1c <memcpy+0xc>
 8006e1a:	4770      	bx	lr
 8006e1c:	b510      	push	{r4, lr}
 8006e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e26:	4291      	cmp	r1, r2
 8006e28:	d1f9      	bne.n	8006e1e <memcpy+0xe>
 8006e2a:	bd10      	pop	{r4, pc}

08006e2c <_free_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4605      	mov	r5, r0
 8006e30:	2900      	cmp	r1, #0
 8006e32:	d041      	beq.n	8006eb8 <_free_r+0x8c>
 8006e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e38:	1f0c      	subs	r4, r1, #4
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	bfb8      	it	lt
 8006e3e:	18e4      	addlt	r4, r4, r3
 8006e40:	f000 f83e 	bl	8006ec0 <__malloc_lock>
 8006e44:	4a1d      	ldr	r2, [pc, #116]	@ (8006ebc <_free_r+0x90>)
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	b933      	cbnz	r3, 8006e58 <_free_r+0x2c>
 8006e4a:	6063      	str	r3, [r4, #4]
 8006e4c:	6014      	str	r4, [r2, #0]
 8006e4e:	4628      	mov	r0, r5
 8006e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e54:	f000 b83a 	b.w	8006ecc <__malloc_unlock>
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	d908      	bls.n	8006e6e <_free_r+0x42>
 8006e5c:	6820      	ldr	r0, [r4, #0]
 8006e5e:	1821      	adds	r1, r4, r0
 8006e60:	428b      	cmp	r3, r1
 8006e62:	bf01      	itttt	eq
 8006e64:	6819      	ldreq	r1, [r3, #0]
 8006e66:	685b      	ldreq	r3, [r3, #4]
 8006e68:	1809      	addeq	r1, r1, r0
 8006e6a:	6021      	streq	r1, [r4, #0]
 8006e6c:	e7ed      	b.n	8006e4a <_free_r+0x1e>
 8006e6e:	461a      	mov	r2, r3
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	b10b      	cbz	r3, 8006e78 <_free_r+0x4c>
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	d9fa      	bls.n	8006e6e <_free_r+0x42>
 8006e78:	6811      	ldr	r1, [r2, #0]
 8006e7a:	1850      	adds	r0, r2, r1
 8006e7c:	42a0      	cmp	r0, r4
 8006e7e:	d10b      	bne.n	8006e98 <_free_r+0x6c>
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	4401      	add	r1, r0
 8006e84:	1850      	adds	r0, r2, r1
 8006e86:	4283      	cmp	r3, r0
 8006e88:	6011      	str	r1, [r2, #0]
 8006e8a:	d1e0      	bne.n	8006e4e <_free_r+0x22>
 8006e8c:	6818      	ldr	r0, [r3, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	6053      	str	r3, [r2, #4]
 8006e92:	4408      	add	r0, r1
 8006e94:	6010      	str	r0, [r2, #0]
 8006e96:	e7da      	b.n	8006e4e <_free_r+0x22>
 8006e98:	d902      	bls.n	8006ea0 <_free_r+0x74>
 8006e9a:	230c      	movs	r3, #12
 8006e9c:	602b      	str	r3, [r5, #0]
 8006e9e:	e7d6      	b.n	8006e4e <_free_r+0x22>
 8006ea0:	6820      	ldr	r0, [r4, #0]
 8006ea2:	1821      	adds	r1, r4, r0
 8006ea4:	428b      	cmp	r3, r1
 8006ea6:	bf04      	itt	eq
 8006ea8:	6819      	ldreq	r1, [r3, #0]
 8006eaa:	685b      	ldreq	r3, [r3, #4]
 8006eac:	6063      	str	r3, [r4, #4]
 8006eae:	bf04      	itt	eq
 8006eb0:	1809      	addeq	r1, r1, r0
 8006eb2:	6021      	streq	r1, [r4, #0]
 8006eb4:	6054      	str	r4, [r2, #4]
 8006eb6:	e7ca      	b.n	8006e4e <_free_r+0x22>
 8006eb8:	bd38      	pop	{r3, r4, r5, pc}
 8006eba:	bf00      	nop
 8006ebc:	20001c44 	.word	0x20001c44

08006ec0 <__malloc_lock>:
 8006ec0:	4801      	ldr	r0, [pc, #4]	@ (8006ec8 <__malloc_lock+0x8>)
 8006ec2:	f7ff bfa3 	b.w	8006e0c <__retarget_lock_acquire_recursive>
 8006ec6:	bf00      	nop
 8006ec8:	20001c40 	.word	0x20001c40

08006ecc <__malloc_unlock>:
 8006ecc:	4801      	ldr	r0, [pc, #4]	@ (8006ed4 <__malloc_unlock+0x8>)
 8006ece:	f7ff bf9e 	b.w	8006e0e <__retarget_lock_release_recursive>
 8006ed2:	bf00      	nop
 8006ed4:	20001c40 	.word	0x20001c40

08006ed8 <_init>:
 8006ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eda:	bf00      	nop
 8006edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ede:	bc08      	pop	{r3}
 8006ee0:	469e      	mov	lr, r3
 8006ee2:	4770      	bx	lr

08006ee4 <_fini>:
 8006ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee6:	bf00      	nop
 8006ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eea:	bc08      	pop	{r3}
 8006eec:	469e      	mov	lr, r3
 8006eee:	4770      	bx	lr
